Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> source_text
Rule 1     source_text -> description
Rule 2     description -> definitions
Rule 3     definitions -> definitions definition
Rule 4     definitions -> definition
Rule 5     definition -> moduledef
Rule 6     definition -> pragma
Rule 7     pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN
Rule 8     pragma -> LPAREN TIMES ID TIMES RPAREN
Rule 9     moduledef -> MODULE modulename paramlist portlist items ENDMODULE
Rule 10    modulename -> ID
Rule 11    modulename -> SENS_OR
Rule 12    paramlist -> DELAY LPAREN params RPAREN
Rule 13    paramlist -> empty
Rule 14    params -> params_begin param_end
Rule 15    params_begin -> params_begin param
Rule 16    params_begin -> param
Rule 17    params -> param_end
Rule 18    param -> PARAMETER param_substitution_list COMMA
Rule 19    param -> PARAMETER width param_substitution_list COMMA
Rule 20    param -> PARAMETER INTEGER param_substitution_list COMMA
Rule 21    param_end -> PARAMETER param_substitution_list
Rule 22    param_end -> PARAMETER width param_substitution_list
Rule 23    param_end -> PARAMETER INTEGER param_substitution_list
Rule 24    portlist -> LPAREN ports RPAREN SEMICOLON
Rule 25    portlist -> LPAREN ioports RPAREN SEMICOLON
Rule 26    portlist -> LPAREN RPAREN SEMICOLON
Rule 27    portlist -> SEMICOLON
Rule 28    ports -> ports COMMA portname
Rule 29    ports -> portname
Rule 30    portname -> ID
Rule 31    sigtypes -> sigtypes sigtype
Rule 32    sigtypes -> sigtype
Rule 33    sigtype -> INPUT
Rule 34    sigtype -> OUTPUT
Rule 35    sigtype -> INOUT
Rule 36    sigtype -> TRI
Rule 37    sigtype -> REG
Rule 38    sigtype -> WIRE
Rule 39    sigtype -> SIGNED
Rule 40    sigtype -> SUPPLY0
Rule 41    sigtype -> SUPPLY1
Rule 42    ioports -> ioports COMMA ioport
Rule 43    ioports -> ioport_head
Rule 44    ioport -> sigtypes portname
Rule 45    ioport -> sigtypes width portname
Rule 46    ioport_head -> sigtypes portname
Rule 47    ioport_head -> sigtypes width portname
Rule 48    ioport -> portname
Rule 49    width -> LBRACKET expression COLON expression RBRACKET
Rule 50    length -> LBRACKET expression COLON expression RBRACKET
Rule 51    items -> items item
Rule 52    items -> item
Rule 53    items -> empty
Rule 54    item -> standard_item
Rule 55    item -> generate
Rule 56    standard_item -> decl
Rule 57    standard_item -> integerdecl
Rule 58    standard_item -> realdecl
Rule 59    standard_item -> declassign
Rule 60    standard_item -> parameterdecl
Rule 61    standard_item -> localparamdecl
Rule 62    standard_item -> genvardecl
Rule 63    standard_item -> assignment
Rule 64    standard_item -> always
Rule 65    standard_item -> initial
Rule 66    standard_item -> instance
Rule 67    standard_item -> function
Rule 68    standard_item -> task
Rule 69    standard_item -> pragma
Rule 70    decl -> sigtypes declnamelist SEMICOLON
Rule 71    decl -> sigtypes width declnamelist SEMICOLON
Rule 72    declnamelist -> declnamelist COMMA declname
Rule 73    declnamelist -> declname
Rule 74    declname -> ID
Rule 75    declname -> ID length
Rule 76    declassign -> sigtypes declassign_element SEMICOLON
Rule 77    declassign -> sigtypes width declassign_element SEMICOLON
Rule 78    declassign_element -> ID EQUALS rvalue
Rule 79    declassign_element -> delays ID EQUALS delays rvalue
Rule 80    integerdecl -> INTEGER integernamelist SEMICOLON
Rule 81    integerdecl -> INTEGER SIGNED integernamelist SEMICOLON
Rule 82    integernamelist -> integernamelist COMMA integername
Rule 83    integernamelist -> integername
Rule 84    integername -> ID
Rule 85    realdecl -> REAL realnamelist SEMICOLON
Rule 86    realnamelist -> realnamelist COMMA realname
Rule 87    realnamelist -> realname
Rule 88    realname -> ID
Rule 89    parameterdecl -> PARAMETER param_substitution_list SEMICOLON
Rule 90    parameterdecl -> PARAMETER width param_substitution_list SEMICOLON
Rule 91    parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON
Rule 92    localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON
Rule 93    localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON
Rule 94    localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON
Rule 95    param_substitution_list -> param_substitution_list COMMA param_substitution
Rule 96    param_substitution_list -> param_substitution
Rule 97    param_substitution -> ID EQUALS rvalue
Rule 98    assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON
Rule 99    assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
Rule 100   lpartselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 101   lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 102   lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 103   lpartselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 104   lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 105   lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 106   lpointer -> pointer
Rule 107   lconcat -> LBRACE lconcatlist RBRACE
Rule 108   lconcatlist -> lconcatlist COMMA lconcat_one
Rule 109   lconcatlist -> lconcat_one
Rule 110   lconcat_one -> identifier
Rule 111   lconcat_one -> lpartselect
Rule 112   lconcat_one -> lpointer
Rule 113   lconcat_one -> lconcat
Rule 114   lvalue -> lpartselect
Rule 115   lvalue -> lpointer
Rule 116   lvalue -> lconcat
Rule 117   lvalue -> identifier
Rule 118   rvalue -> expression
Rule 119   expression -> MINUS expression
Rule 120   expression -> PLUS expression
Rule 121   expression -> LNOT expression
Rule 122   expression -> NOT expression
Rule 123   expression -> AND expression
Rule 124   expression -> NAND expression
Rule 125   expression -> NOR expression
Rule 126   expression -> OR expression
Rule 127   expression -> XOR expression
Rule 128   expression -> XNOR expression
Rule 129   expression -> expression POWER expression
Rule 130   expression -> expression TIMES expression
Rule 131   expression -> expression DIVIDE expression
Rule 132   expression -> expression MOD expression
Rule 133   expression -> expression PLUS expression
Rule 134   expression -> expression MINUS expression
Rule 135   expression -> expression LSHIFT expression
Rule 136   expression -> expression RSHIFT expression
Rule 137   expression -> expression LSHIFTA expression
Rule 138   expression -> expression RSHIFTA expression
Rule 139   expression -> expression LT expression
Rule 140   expression -> expression GT expression
Rule 141   expression -> expression LE expression
Rule 142   expression -> expression GE expression
Rule 143   expression -> expression EQ expression
Rule 144   expression -> expression NE expression
Rule 145   expression -> expression EQL expression
Rule 146   expression -> expression NEL expression
Rule 147   expression -> expression AND expression
Rule 148   expression -> expression XOR expression
Rule 149   expression -> expression XNOR expression
Rule 150   expression -> expression OR expression
Rule 151   expression -> expression LAND expression
Rule 152   expression -> expression LOR expression
Rule 153   expression -> expression COND expression COLON expression
Rule 154   expression -> LPAREN expression RPAREN
Rule 155   expression -> concat
Rule 156   expression -> repeat
Rule 157   expression -> partselect
Rule 158   expression -> pointer
Rule 159   expression -> functioncall
Rule 160   expression -> systemcall
Rule 161   expression -> identifier
Rule 162   expression -> const_expression
Rule 163   concat -> LBRACE concatlist RBRACE
Rule 164   concatlist -> concatlist COMMA expression
Rule 165   concatlist -> expression
Rule 166   repeat -> LBRACE expression concat RBRACE
Rule 167   partselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 168   partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 169   partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 170   partselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 171   partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 172   partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 173   pointer -> identifier LBRACKET expression RBRACKET
Rule 174   pointer -> pointer LBRACKET expression RBRACKET
Rule 175   const_expression -> intnumber
Rule 176   const_expression -> floatnumber
Rule 177   const_expression -> stringliteral
Rule 178   floatnumber -> FLOATNUMBER
Rule 179   intnumber -> INTNUMBER_DEC
Rule 180   intnumber -> SIGNED_INTNUMBER_DEC
Rule 181   intnumber -> INTNUMBER_BIN
Rule 182   intnumber -> SIGNED_INTNUMBER_BIN
Rule 183   intnumber -> INTNUMBER_OCT
Rule 184   intnumber -> SIGNED_INTNUMBER_OCT
Rule 185   intnumber -> INTNUMBER_HEX
Rule 186   intnumber -> SIGNED_INTNUMBER_HEX
Rule 187   stringliteral -> STRING_LITERAL
Rule 188   always -> ALWAYS senslist always_statement
Rule 189   senslist -> AT LPAREN edgesigs RPAREN
Rule 190   edgesig -> POSEDGE edgesig_base
Rule 191   edgesig -> NEGEDGE edgesig_base
Rule 192   edgesig_base -> identifier
Rule 193   edgesig_base -> pointer
Rule 194   edgesigs -> edgesigs SENS_OR edgesig
Rule 195   edgesigs -> edgesig
Rule 196   senslist -> empty
Rule 197   senslist -> AT levelsig
Rule 198   senslist -> AT LPAREN levelsigs RPAREN
Rule 199   levelsig -> levelsig_base
Rule 200   levelsig_base -> identifier
Rule 201   levelsig_base -> pointer
Rule 202   levelsig_base -> partselect
Rule 203   levelsigs -> levelsigs SENS_OR levelsig
Rule 204   levelsigs -> levelsigs COMMA levelsig
Rule 205   levelsigs -> levelsig
Rule 206   senslist -> AT TIMES
Rule 207   senslist -> AT LPAREN TIMES RPAREN
Rule 208   basic_statement -> if_statement
Rule 209   basic_statement -> case_statement
Rule 210   basic_statement -> casex_statement
Rule 211   basic_statement -> for_statement
Rule 212   basic_statement -> while_statement
Rule 213   basic_statement -> event_statement
Rule 214   basic_statement -> wait_statement
Rule 215   basic_statement -> forever_statement
Rule 216   basic_statement -> block
Rule 217   basic_statement -> namedblock
Rule 218   basic_statement -> parallelblock
Rule 219   basic_statement -> blocking_substitution
Rule 220   basic_statement -> nonblocking_substitution
Rule 221   basic_statement -> single_statement
Rule 222   always_statement -> basic_statement
Rule 223   blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON
Rule 224   blocking_substitution_base -> delays lvalue EQUALS delays rvalue
Rule 225   nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON
Rule 226   delays -> DELAY LPAREN expression RPAREN
Rule 227   delays -> DELAY identifier
Rule 228   delays -> DELAY intnumber
Rule 229   delays -> DELAY floatnumber
Rule 230   delays -> empty
Rule 231   block -> BEGIN block_statements END
Rule 232   block -> BEGIN END
Rule 233   block_statements -> block_statements block_statement
Rule 234   block_statements -> block_statement
Rule 235   block_statement -> basic_statement
Rule 236   namedblock -> BEGIN COLON ID namedblock_statements END
Rule 237   namedblock -> BEGIN COLON ID END
Rule 238   namedblock_statements -> namedblock_statements namedblock_statement
Rule 239   namedblock_statements -> namedblock_statement
Rule 240   namedblock_statement -> basic_statement
Rule 241   namedblock_statement -> decl
Rule 242   namedblock_statement -> integerdecl
Rule 243   namedblock_statement -> realdecl
Rule 244   namedblock_statement -> parameterdecl
Rule 245   namedblock_statement -> localparamdecl
Rule 246   parallelblock -> FORK block_statements JOIN
Rule 247   parallelblock -> FORK JOIN
Rule 248   if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 249   if_statement -> IF LPAREN cond RPAREN true_statement
Rule 250   if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 251   if_statement -> delays IF LPAREN cond RPAREN true_statement
Rule 252   cond -> expression
Rule 253   ifcontent_statement -> basic_statement
Rule 254   true_statement -> ifcontent_statement
Rule 255   else_statement -> ifcontent_statement
Rule 256   for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
Rule 257   forpre -> blocking_substitution
Rule 258   forpre -> SEMICOLON
Rule 259   forcond -> cond SEMICOLON
Rule 260   forcond -> SEMICOLON
Rule 261   forpost -> blocking_substitution_base
Rule 262   forpost -> empty
Rule 263   forcontent_statement -> basic_statement
Rule 264   while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement
Rule 265   whilecontent_statement -> basic_statement
Rule 266   case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 267   casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 268   case_comp -> expression
Rule 269   casecontent_statements -> casecontent_statements casecontent_statement
Rule 270   casecontent_statements -> casecontent_statement
Rule 271   casecontent_statement -> casecontent_condition COLON basic_statement
Rule 272   casecontent_condition -> casecontent_condition COMMA expression
Rule 273   casecontent_condition -> expression
Rule 274   casecontent_statement -> DEFAULT COLON basic_statement
Rule 275   initial -> INITIAL initial_statement
Rule 276   initial_statement -> basic_statement
Rule 277   event_statement -> senslist SEMICOLON
Rule 278   wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement
Rule 279   waitcontent_statement -> basic_statement
Rule 280   waitcontent_statement -> SEMICOLON
Rule 281   forever_statement -> FOREVER basic_statement
Rule 282   instance -> ID parameterlist instance_bodylist SEMICOLON
Rule 283   instance -> SENS_OR parameterlist instance_bodylist SEMICOLON
Rule 284   instance_bodylist -> instance_bodylist COMMA instance_body
Rule 285   instance_bodylist -> instance_body
Rule 286   instance_body -> ID LPAREN instance_ports RPAREN
Rule 287   instance_body -> ID width LPAREN instance_ports RPAREN
Rule 288   instance -> ID instance_bodylist_noname SEMICOLON
Rule 289   instance -> SENS_OR instance_bodylist_noname SEMICOLON
Rule 290   instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname
Rule 291   instance_bodylist_noname -> instance_body_noname
Rule 292   instance_body_noname -> LPAREN instance_ports RPAREN
Rule 293   parameterlist -> DELAY LPAREN param_args RPAREN
Rule 294   parameterlist -> DELAY LPAREN param_args_noname RPAREN
Rule 295   parameterlist -> empty
Rule 296   param_args_noname -> param_args_noname COMMA param_arg_noname
Rule 297   param_args_noname -> param_arg_noname
Rule 298   param_args -> param_args COMMA param_arg
Rule 299   param_args -> param_arg
Rule 300   param_args -> empty
Rule 301   param_arg_noname -> expression
Rule 302   param_arg -> DOT ID LPAREN expression RPAREN
Rule 303   instance_ports -> instance_ports_list
Rule 304   instance_ports -> instance_ports_arg
Rule 305   instance_ports_list -> instance_ports_list COMMA instance_port_list
Rule 306   instance_ports_list -> instance_port_list
Rule 307   instance_ports_list -> empty
Rule 308   instance_port_list -> expression
Rule 309   instance_ports_arg -> instance_ports_arg COMMA instance_port_arg
Rule 310   instance_ports_arg -> instance_port_arg
Rule 311   instance_port_arg -> DOT ID LPAREN identifier RPAREN
Rule 312   instance_port_arg -> DOT ID LPAREN expression RPAREN
Rule 313   instance_port_arg -> DOT ID LPAREN RPAREN
Rule 314   genvardecl -> GENVAR genvarlist SEMICOLON
Rule 315   genvarlist -> genvarlist COMMA genvar
Rule 316   genvarlist -> genvar
Rule 317   genvar -> ID
Rule 318   generate -> GENERATE generate_items ENDGENERATE
Rule 319   generate_items -> empty
Rule 320   generate_items -> generate_items generate_item
Rule 321   generate_items -> generate_item
Rule 322   generate_item -> standard_item
Rule 323   generate_item -> generate_if
Rule 324   generate_item -> generate_for
Rule 325   generate_block -> BEGIN generate_items END
Rule 326   generate_block -> BEGIN COLON ID generate_items END
Rule 327   generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
Rule 328   generate_if -> IF LPAREN cond RPAREN gif_true_item
Rule 329   gif_true_item -> generate_item
Rule 330   gif_true_item -> generate_block
Rule 331   gif_false_item -> generate_item
Rule 332   gif_false_item -> generate_block
Rule 333   generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
Rule 334   generate_forcontent -> generate_item
Rule 335   generate_forcontent -> generate_block
Rule 336   systemcall -> DOLLER ID
Rule 337   systemcall -> DOLLER ID LPAREN sysargs RPAREN
Rule 338   systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN
Rule 339   sysargs -> sysargs COMMA sysarg
Rule 340   sysargs -> sysarg
Rule 341   sysargs -> empty
Rule 342   sysarg -> expression
Rule 343   function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
Rule 344   function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION
Rule 345   function_statement -> funcvardecls function_calc
Rule 346   funcvardecls -> funcvardecls funcvardecl
Rule 347   funcvardecls -> funcvardecl
Rule 348   funcvardecl -> decl
Rule 349   funcvardecl -> integerdecl
Rule 350   function_calc -> blocking_substitution
Rule 351   function_calc -> if_statement
Rule 352   function_calc -> for_statement
Rule 353   function_calc -> while_statement
Rule 354   function_calc -> case_statement
Rule 355   function_calc -> casex_statement
Rule 356   function_calc -> block
Rule 357   function_calc -> namedblock
Rule 358   functioncall -> identifier LPAREN func_args RPAREN
Rule 359   func_args -> func_args COMMA expression
Rule 360   func_args -> expression
Rule 361   func_args -> empty
Rule 362   task -> TASK ID SEMICOLON task_statement ENDTASK
Rule 363   task_statement -> taskvardecls task_calc
Rule 364   taskvardecls -> taskvardecls taskvardecl
Rule 365   taskvardecls -> taskvardecl
Rule 366   taskvardecls -> empty
Rule 367   taskvardecl -> decl
Rule 368   taskvardecl -> integerdecl
Rule 369   task_calc -> blocking_substitution
Rule 370   task_calc -> if_statement
Rule 371   task_calc -> for_statement
Rule 372   task_calc -> while_statement
Rule 373   task_calc -> case_statement
Rule 374   task_calc -> casex_statement
Rule 375   task_calc -> block
Rule 376   task_calc -> namedblock
Rule 377   identifier -> ID
Rule 378   identifier -> scope ID
Rule 379   scope -> identifier DOT
Rule 380   scope -> pointer DOT
Rule 381   disable -> DISABLE ID
Rule 382   single_statement -> DELAY expression SEMICOLON
Rule 383   single_statement -> systemcall SEMICOLON
Rule 384   single_statement -> disable SEMICOLON
Rule 385   empty -> <empty>

Terminals, with rules where they appear

ALWAYS               : 188
AND                  : 123 147
ASSIGN               : 98 99
AT                   : 189 197 198 206 207
BEGIN                : 231 232 236 237 325 326
CASE                 : 266
CASEX                : 267
COLON                : 49 50 100 103 153 167 170 236 237 271 274 326
COMMA                : 18 19 20 28 42 72 82 86 95 108 164 204 272 284 290 296 298 305 309 315 339 359
COND                 : 153
DEFAULT              : 274
DELAY                : 12 226 227 228 229 293 294 382
DISABLE              : 381
DIVIDE               : 131
DOLLER               : 336 337 338
DOT                  : 302 311 312 313 379 380
ELSE                 : 248 250 327
END                  : 231 232 236 237 325 326
ENDCASE              : 266 267
ENDFUNCTION          : 343 344
ENDGENERATE          : 318
ENDMODULE            : 9
ENDTASK              : 362
EQ                   : 143
EQL                  : 145
EQUALS               : 7 78 79 97 98 99 223 224
FLOATNUMBER          : 178
FOR                  : 256 333
FOREVER              : 281
FORK                 : 246 247
FUNCTION             : 343 344
GE                   : 142
GENERATE             : 318
GENVAR               : 314
GT                   : 140
ID                   : 7 8 10 30 74 75 78 79 84 88 97 236 237 282 286 287 288 302 311 312 313 317 326 336 337 343 344 362 377 378 381
IF                   : 248 249 250 251 327 328
INITIAL              : 275
INOUT                : 35
INPUT                : 33
INTEGER              : 20 23 80 81 91 94
INTNUMBER_BIN        : 181
INTNUMBER_DEC        : 179
INTNUMBER_HEX        : 185
INTNUMBER_OCT        : 183
JOIN                 : 246 247
LAND                 : 151
LBRACE               : 107 163 166
LBRACKET             : 49 50 100 101 102 103 104 105 167 168 169 170 171 172 173 174
LE                   : 141 225
LNOT                 : 121
LOCALPARAM           : 92 93 94
LOR                  : 152
LPAREN               : 7 8 12 24 25 26 154 189 198 207 226 248 249 250 251 256 264 266 267 278 286 287 292 293 294 302 311 312 313 327 328 333 337 338 358
LSHIFT               : 135
LSHIFTA              : 137
LT                   : 139
MINUS                : 119 134
MINUSCOLON           : 102 105 169 172
MOD                  : 132
MODULE               : 9
NAND                 : 124
NE                   : 144
NEGEDGE              : 191
NEL                  : 146
NOR                  : 125
NOT                  : 122
OR                   : 126 150
OUTPUT               : 34
PARAMETER            : 18 19 20 21 22 23 89 90 91
PLUS                 : 120 133
PLUSCOLON            : 101 104 168 171
POSEDGE              : 190
POWER                : 129
RBRACE               : 107 163 166
RBRACKET             : 49 50 100 101 102 103 104 105 167 168 169 170 171 172 173 174
REAL                 : 85
REG                  : 37
RPAREN               : 7 8 12 24 25 26 154 189 198 207 226 248 249 250 251 256 264 266 267 278 286 287 292 293 294 302 311 312 313 327 328 333 337 338 358
RSHIFT               : 136
RSHIFTA              : 138
SEMICOLON            : 24 25 26 27 70 71 76 77 80 81 85 89 90 91 92 93 94 98 99 223 225 258 259 260 277 280 282 283 288 289 314 343 344 362 382 383 384
SENS_OR              : 11 194 203 283 289
SIGNED               : 39 81 338
SIGNED_INTNUMBER_BIN : 182
SIGNED_INTNUMBER_DEC : 180
SIGNED_INTNUMBER_HEX : 186
SIGNED_INTNUMBER_OCT : 184
STRING_LITERAL       : 187
SUPPLY0              : 40
SUPPLY1              : 41
TASK                 : 362
TIMES                : 7 7 8 8 130 206 207
TRI                  : 36
WAIT                 : 278
WHILE                : 264
WIRE                 : 38
XNOR                 : 128 149
XOR                  : 127 148
error                : 

Nonterminals, with rules where they appear

always               : 64
always_statement     : 188
assignment           : 63
basic_statement      : 222 235 240 253 263 265 271 274 276 279 281
block                : 216 356 375
block_statement      : 233 234
block_statements     : 231 233 246
blocking_substitution : 219 257 350 369
blocking_substitution_base : 261
case_comp            : 266 267
case_statement       : 209 354 373
casecontent_condition : 271 272
casecontent_statement : 269 270
casecontent_statements : 266 267 269
casex_statement      : 210 355 374
concat               : 155 166
concatlist           : 163 164
cond                 : 248 249 250 251 259 264 278 327 328
const_expression     : 162
decl                 : 56 241 348 367
declassign           : 59
declassign_element   : 76 77
declname             : 72 73
declnamelist         : 70 71 72
definition           : 3 4
definitions          : 2 3
delays               : 79 79 99 99 223 223 224 224 225 225 250 251
description          : 1
disable              : 384
edgesig              : 194 195
edgesig_base         : 190 191
edgesigs             : 189 194
else_statement       : 248 250
empty                : 13 53 196 230 262 295 300 307 319 341 361 366
event_statement      : 213
expression           : 7 49 49 50 50 100 100 101 101 102 102 103 103 104 104 105 105 118 119 120 121 122 123 124 125 126 127 128 129 129 130 130 131 131 132 132 133 133 134 134 135 135 136 136 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149 150 150 151 151 152 152 153 153 153 154 164 165 166 167 167 168 168 169 169 170 170 171 171 172 172 173 174 226 252 268 272 273 301 302 308 312 342 359 360 382
floatnumber          : 176 229
for_statement        : 211 352 371
forcond              : 256 333
forcontent_statement : 256
forever_statement    : 215
forpost              : 256 333
forpre               : 256 333
func_args            : 358 359
function             : 67
function_calc        : 345
function_statement   : 343 344
functioncall         : 159
funcvardecl          : 346 347
funcvardecls         : 345 346
generate             : 55
generate_block       : 330 332 335
generate_for         : 324
generate_forcontent  : 333
generate_if          : 323
generate_item        : 320 321 329 331 334
generate_items       : 318 320 325 326
genvar               : 315 316
genvardecl           : 62
genvarlist           : 314 315
gif_false_item       : 327
gif_true_item        : 327 328
identifier           : 103 104 105 110 117 161 167 168 169 173 192 200 227 311 358 379
if_statement         : 208 351 370
ifcontent_statement  : 254 255
initial              : 65
initial_statement    : 275
instance             : 66
instance_body        : 284 285
instance_body_noname : 290 291
instance_bodylist    : 282 283 284
instance_bodylist_noname : 288 289 290
instance_port_arg    : 309 310
instance_port_list   : 305 306
instance_ports       : 286 287 292
instance_ports_arg   : 304 309
instance_ports_list  : 303 305
integerdecl          : 57 242 349 368
integername          : 82 83
integernamelist      : 80 81 82
intnumber            : 175 228
ioport               : 42
ioport_head          : 43
ioports              : 25 42
item                 : 51 52
items                : 9 51
lconcat              : 113 116
lconcat_one          : 108 109
lconcatlist          : 107 108
length               : 75
levelsig             : 197 203 204 205
levelsig_base        : 199
levelsigs            : 198 203 204
localparamdecl       : 61 245
lpartselect          : 111 114
lpointer             : 112 115
lvalue               : 98 99 223 224 225
moduledef            : 5
modulename           : 9
namedblock           : 217 357 376
namedblock_statement : 238 239
namedblock_statements : 236 238
nonblocking_substitution : 220
parallelblock        : 218
param                : 15 16
param_arg            : 298 299
param_arg_noname     : 296 297
param_args           : 293 298
param_args_noname    : 294 296
param_end            : 14 17
param_substitution   : 95 96
param_substitution_list : 18 19 20 21 22 23 89 90 91 92 93 94 95
parameterdecl        : 60 244
parameterlist        : 282 283
paramlist            : 9
params               : 12
params_begin         : 14 15
partselect           : 157 202
pointer              : 100 101 102 106 158 170 171 172 174 193 201 380
portlist             : 9
portname             : 28 29 44 45 46 47 48
ports                : 24 28
pragma               : 6 69
realdecl             : 58 243
realname             : 86 87
realnamelist         : 85 86
repeat               : 156
rvalue               : 78 79 97 98 99 223 224 225
scope                : 378
senslist             : 188 277
sigtype              : 31 32
sigtypes             : 31 44 45 46 47 70 71 76 77
single_statement     : 221
source_text          : 0
standard_item        : 54 322
stringliteral        : 177
sysarg               : 339 340
sysargs              : 337 338 339
systemcall           : 160 383
task                 : 68
task_calc            : 363
task_statement       : 362
taskvardecl          : 364 365
taskvardecls         : 363 364
true_statement       : 248 249 250 251
wait_statement       : 214
waitcontent_statement : 278
while_statement      : 212 353 372
whilecontent_statement : 264
width                : 19 22 45 47 71 77 90 93 287 343

Parsing method: LALR

state 0

    (0) S' -> . source_text
    (1) source_text -> . description
    (2) description -> . definitions
    (3) definitions -> . definitions definition
    (4) definitions -> . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    source_text                    shift and go to state 1
    description                    shift and go to state 2
    definitions                    shift and go to state 3
    definition                     shift and go to state 4
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 1

    (0) S' -> source_text .



state 2

    (1) source_text -> description .

    $end            reduce using rule 1 (source_text -> description .)


state 3

    (2) description -> definitions .
    (3) definitions -> definitions . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    $end            reduce using rule 2 (description -> definitions .)
    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    definition                     shift and go to state 9
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 4

    (4) definitions -> definition .

    MODULE          reduce using rule 4 (definitions -> definition .)
    LPAREN          reduce using rule 4 (definitions -> definition .)
    $end            reduce using rule 4 (definitions -> definition .)


state 5

    (5) definition -> moduledef .

    MODULE          reduce using rule 5 (definition -> moduledef .)
    LPAREN          reduce using rule 5 (definition -> moduledef .)
    $end            reduce using rule 5 (definition -> moduledef .)


state 6

    (6) definition -> pragma .

    MODULE          reduce using rule 6 (definition -> pragma .)
    LPAREN          reduce using rule 6 (definition -> pragma .)
    $end            reduce using rule 6 (definition -> pragma .)


state 7

    (9) moduledef -> MODULE . modulename paramlist portlist items ENDMODULE
    (10) modulename -> . ID
    (11) modulename -> . SENS_OR

    ID              shift and go to state 11
    SENS_OR         shift and go to state 12

    modulename                     shift and go to state 10

state 8

    (7) pragma -> LPAREN . TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN . TIMES ID TIMES RPAREN

    TIMES           shift and go to state 13


state 9

    (3) definitions -> definitions definition .

    MODULE          reduce using rule 3 (definitions -> definitions definition .)
    LPAREN          reduce using rule 3 (definitions -> definitions definition .)
    $end            reduce using rule 3 (definitions -> definitions definition .)


state 10

    (9) moduledef -> MODULE modulename . paramlist portlist items ENDMODULE
    (12) paramlist -> . DELAY LPAREN params RPAREN
    (13) paramlist -> . empty
    (385) empty -> .

    DELAY           shift and go to state 15
    LPAREN          reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

    paramlist                      shift and go to state 14
    empty                          shift and go to state 16

state 11

    (10) modulename -> ID .

    DELAY           reduce using rule 10 (modulename -> ID .)
    LPAREN          reduce using rule 10 (modulename -> ID .)
    SEMICOLON       reduce using rule 10 (modulename -> ID .)


state 12

    (11) modulename -> SENS_OR .

    DELAY           reduce using rule 11 (modulename -> SENS_OR .)
    LPAREN          reduce using rule 11 (modulename -> SENS_OR .)
    SEMICOLON       reduce using rule 11 (modulename -> SENS_OR .)


state 13

    (7) pragma -> LPAREN TIMES . ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES . ID TIMES RPAREN

    ID              shift and go to state 17


state 14

    (9) moduledef -> MODULE modulename paramlist . portlist items ENDMODULE
    (24) portlist -> . LPAREN ports RPAREN SEMICOLON
    (25) portlist -> . LPAREN ioports RPAREN SEMICOLON
    (26) portlist -> . LPAREN RPAREN SEMICOLON
    (27) portlist -> . SEMICOLON

    LPAREN          shift and go to state 19
    SEMICOLON       shift and go to state 20

    portlist                       shift and go to state 18

state 15

    (12) paramlist -> DELAY . LPAREN params RPAREN

    LPAREN          shift and go to state 21


state 16

    (13) paramlist -> empty .

    LPAREN          reduce using rule 13 (paramlist -> empty .)
    SEMICOLON       reduce using rule 13 (paramlist -> empty .)


state 17

    (7) pragma -> LPAREN TIMES ID . EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES ID . TIMES RPAREN

    EQUALS          shift and go to state 23
    TIMES           shift and go to state 22


state 18

    (9) moduledef -> MODULE modulename paramlist portlist . items ENDMODULE
    (51) items -> . items item
    (52) items -> . item
    (53) items -> . empty
    (54) item -> . standard_item
    (55) item -> . generate
    (385) empty -> .
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (318) generate -> . GENERATE generate_items ENDGENERATE
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for GENERATE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDMODULE       reduce using rule 385 (empty -> .)
    GENERATE        shift and go to state 43
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! GENERATE        [ reduce using rule 385 (empty -> .) ]
  ! INTEGER         [ reduce using rule 385 (empty -> .) ]
  ! REAL            [ reduce using rule 385 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 385 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 385 (empty -> .) ]
  ! GENVAR          [ reduce using rule 385 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 385 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 385 (empty -> .) ]
  ! INITIAL         [ reduce using rule 385 (empty -> .) ]
  ! ID              [ reduce using rule 385 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 385 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 385 (empty -> .) ]
  ! TASK            [ reduce using rule 385 (empty -> .) ]
  ! LPAREN          [ reduce using rule 385 (empty -> .) ]
  ! INPUT           [ reduce using rule 385 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 385 (empty -> .) ]
  ! INOUT           [ reduce using rule 385 (empty -> .) ]
  ! TRI             [ reduce using rule 385 (empty -> .) ]
  ! REG             [ reduce using rule 385 (empty -> .) ]
  ! WIRE            [ reduce using rule 385 (empty -> .) ]
  ! SIGNED          [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 385 (empty -> .) ]

    items                          shift and go to state 24
    item                           shift and go to state 25
    empty                          shift and go to state 26
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 19

    (24) portlist -> LPAREN . ports RPAREN SEMICOLON
    (25) portlist -> LPAREN . ioports RPAREN SEMICOLON
    (26) portlist -> LPAREN . RPAREN SEMICOLON
    (28) ports -> . ports COMMA portname
    (29) ports -> . portname
    (42) ioports -> . ioports COMMA ioport
    (43) ioports -> . ioport_head
    (30) portname -> . ID
    (46) ioport_head -> . sigtypes portname
    (47) ioport_head -> . sigtypes width portname
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    RPAREN          shift and go to state 68
    ID              shift and go to state 72
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    ports                          shift and go to state 67
    ioports                        shift and go to state 69
    portname                       shift and go to state 70
    ioport_head                    shift and go to state 71
    sigtypes                       shift and go to state 73
    sigtype                        shift and go to state 58

state 20

    (27) portlist -> SEMICOLON .

    GENERATE        reduce using rule 27 (portlist -> SEMICOLON .)
    INTEGER         reduce using rule 27 (portlist -> SEMICOLON .)
    REAL            reduce using rule 27 (portlist -> SEMICOLON .)
    PARAMETER       reduce using rule 27 (portlist -> SEMICOLON .)
    LOCALPARAM      reduce using rule 27 (portlist -> SEMICOLON .)
    GENVAR          reduce using rule 27 (portlist -> SEMICOLON .)
    ASSIGN          reduce using rule 27 (portlist -> SEMICOLON .)
    ALWAYS          reduce using rule 27 (portlist -> SEMICOLON .)
    INITIAL         reduce using rule 27 (portlist -> SEMICOLON .)
    ID              reduce using rule 27 (portlist -> SEMICOLON .)
    SENS_OR         reduce using rule 27 (portlist -> SEMICOLON .)
    FUNCTION        reduce using rule 27 (portlist -> SEMICOLON .)
    TASK            reduce using rule 27 (portlist -> SEMICOLON .)
    LPAREN          reduce using rule 27 (portlist -> SEMICOLON .)
    INPUT           reduce using rule 27 (portlist -> SEMICOLON .)
    OUTPUT          reduce using rule 27 (portlist -> SEMICOLON .)
    INOUT           reduce using rule 27 (portlist -> SEMICOLON .)
    TRI             reduce using rule 27 (portlist -> SEMICOLON .)
    REG             reduce using rule 27 (portlist -> SEMICOLON .)
    WIRE            reduce using rule 27 (portlist -> SEMICOLON .)
    SIGNED          reduce using rule 27 (portlist -> SEMICOLON .)
    SUPPLY0         reduce using rule 27 (portlist -> SEMICOLON .)
    SUPPLY1         reduce using rule 27 (portlist -> SEMICOLON .)
    ENDMODULE       reduce using rule 27 (portlist -> SEMICOLON .)


state 21

    (12) paramlist -> DELAY LPAREN . params RPAREN
    (14) params -> . params_begin param_end
    (17) params -> . param_end
    (15) params_begin -> . params_begin param
    (16) params_begin -> . param
    (21) param_end -> . PARAMETER param_substitution_list
    (22) param_end -> . PARAMETER width param_substitution_list
    (23) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER width param_substitution_list COMMA
    (20) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 78

    params                         shift and go to state 74
    params_begin                   shift and go to state 75
    param_end                      shift and go to state 76
    param                          shift and go to state 77

state 22

    (8) pragma -> LPAREN TIMES ID TIMES . RPAREN

    RPAREN          shift and go to state 79


state 23

    (7) pragma -> LPAREN TIMES ID EQUALS . expression TIMES RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 82
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 24

    (9) moduledef -> MODULE modulename paramlist portlist items . ENDMODULE
    (51) items -> items . item
    (54) item -> . standard_item
    (55) item -> . generate
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (318) generate -> . GENERATE generate_items ENDGENERATE
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    ENDMODULE       shift and go to state 117
    GENERATE        shift and go to state 43
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    item                           shift and go to state 118
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 25

    (52) items -> item .

    ENDMODULE       reduce using rule 52 (items -> item .)
    GENERATE        reduce using rule 52 (items -> item .)
    INTEGER         reduce using rule 52 (items -> item .)
    REAL            reduce using rule 52 (items -> item .)
    PARAMETER       reduce using rule 52 (items -> item .)
    LOCALPARAM      reduce using rule 52 (items -> item .)
    GENVAR          reduce using rule 52 (items -> item .)
    ASSIGN          reduce using rule 52 (items -> item .)
    ALWAYS          reduce using rule 52 (items -> item .)
    INITIAL         reduce using rule 52 (items -> item .)
    ID              reduce using rule 52 (items -> item .)
    SENS_OR         reduce using rule 52 (items -> item .)
    FUNCTION        reduce using rule 52 (items -> item .)
    TASK            reduce using rule 52 (items -> item .)
    LPAREN          reduce using rule 52 (items -> item .)
    INPUT           reduce using rule 52 (items -> item .)
    OUTPUT          reduce using rule 52 (items -> item .)
    INOUT           reduce using rule 52 (items -> item .)
    TRI             reduce using rule 52 (items -> item .)
    REG             reduce using rule 52 (items -> item .)
    WIRE            reduce using rule 52 (items -> item .)
    SIGNED          reduce using rule 52 (items -> item .)
    SUPPLY0         reduce using rule 52 (items -> item .)
    SUPPLY1         reduce using rule 52 (items -> item .)


state 26

    (53) items -> empty .

    ENDMODULE       reduce using rule 53 (items -> empty .)
    GENERATE        reduce using rule 53 (items -> empty .)
    INTEGER         reduce using rule 53 (items -> empty .)
    REAL            reduce using rule 53 (items -> empty .)
    PARAMETER       reduce using rule 53 (items -> empty .)
    LOCALPARAM      reduce using rule 53 (items -> empty .)
    GENVAR          reduce using rule 53 (items -> empty .)
    ASSIGN          reduce using rule 53 (items -> empty .)
    ALWAYS          reduce using rule 53 (items -> empty .)
    INITIAL         reduce using rule 53 (items -> empty .)
    ID              reduce using rule 53 (items -> empty .)
    SENS_OR         reduce using rule 53 (items -> empty .)
    FUNCTION        reduce using rule 53 (items -> empty .)
    TASK            reduce using rule 53 (items -> empty .)
    LPAREN          reduce using rule 53 (items -> empty .)
    INPUT           reduce using rule 53 (items -> empty .)
    OUTPUT          reduce using rule 53 (items -> empty .)
    INOUT           reduce using rule 53 (items -> empty .)
    TRI             reduce using rule 53 (items -> empty .)
    REG             reduce using rule 53 (items -> empty .)
    WIRE            reduce using rule 53 (items -> empty .)
    SIGNED          reduce using rule 53 (items -> empty .)
    SUPPLY0         reduce using rule 53 (items -> empty .)
    SUPPLY1         reduce using rule 53 (items -> empty .)


state 27

    (54) item -> standard_item .

    ENDMODULE       reduce using rule 54 (item -> standard_item .)
    GENERATE        reduce using rule 54 (item -> standard_item .)
    INTEGER         reduce using rule 54 (item -> standard_item .)
    REAL            reduce using rule 54 (item -> standard_item .)
    PARAMETER       reduce using rule 54 (item -> standard_item .)
    LOCALPARAM      reduce using rule 54 (item -> standard_item .)
    GENVAR          reduce using rule 54 (item -> standard_item .)
    ASSIGN          reduce using rule 54 (item -> standard_item .)
    ALWAYS          reduce using rule 54 (item -> standard_item .)
    INITIAL         reduce using rule 54 (item -> standard_item .)
    ID              reduce using rule 54 (item -> standard_item .)
    SENS_OR         reduce using rule 54 (item -> standard_item .)
    FUNCTION        reduce using rule 54 (item -> standard_item .)
    TASK            reduce using rule 54 (item -> standard_item .)
    LPAREN          reduce using rule 54 (item -> standard_item .)
    INPUT           reduce using rule 54 (item -> standard_item .)
    OUTPUT          reduce using rule 54 (item -> standard_item .)
    INOUT           reduce using rule 54 (item -> standard_item .)
    TRI             reduce using rule 54 (item -> standard_item .)
    REG             reduce using rule 54 (item -> standard_item .)
    WIRE            reduce using rule 54 (item -> standard_item .)
    SIGNED          reduce using rule 54 (item -> standard_item .)
    SUPPLY0         reduce using rule 54 (item -> standard_item .)
    SUPPLY1         reduce using rule 54 (item -> standard_item .)


state 28

    (55) item -> generate .

    ENDMODULE       reduce using rule 55 (item -> generate .)
    GENERATE        reduce using rule 55 (item -> generate .)
    INTEGER         reduce using rule 55 (item -> generate .)
    REAL            reduce using rule 55 (item -> generate .)
    PARAMETER       reduce using rule 55 (item -> generate .)
    LOCALPARAM      reduce using rule 55 (item -> generate .)
    GENVAR          reduce using rule 55 (item -> generate .)
    ASSIGN          reduce using rule 55 (item -> generate .)
    ALWAYS          reduce using rule 55 (item -> generate .)
    INITIAL         reduce using rule 55 (item -> generate .)
    ID              reduce using rule 55 (item -> generate .)
    SENS_OR         reduce using rule 55 (item -> generate .)
    FUNCTION        reduce using rule 55 (item -> generate .)
    TASK            reduce using rule 55 (item -> generate .)
    LPAREN          reduce using rule 55 (item -> generate .)
    INPUT           reduce using rule 55 (item -> generate .)
    OUTPUT          reduce using rule 55 (item -> generate .)
    INOUT           reduce using rule 55 (item -> generate .)
    TRI             reduce using rule 55 (item -> generate .)
    REG             reduce using rule 55 (item -> generate .)
    WIRE            reduce using rule 55 (item -> generate .)
    SIGNED          reduce using rule 55 (item -> generate .)
    SUPPLY0         reduce using rule 55 (item -> generate .)
    SUPPLY1         reduce using rule 55 (item -> generate .)


state 29

    (56) standard_item -> decl .

    ENDMODULE       reduce using rule 56 (standard_item -> decl .)
    GENERATE        reduce using rule 56 (standard_item -> decl .)
    INTEGER         reduce using rule 56 (standard_item -> decl .)
    REAL            reduce using rule 56 (standard_item -> decl .)
    PARAMETER       reduce using rule 56 (standard_item -> decl .)
    LOCALPARAM      reduce using rule 56 (standard_item -> decl .)
    GENVAR          reduce using rule 56 (standard_item -> decl .)
    ASSIGN          reduce using rule 56 (standard_item -> decl .)
    ALWAYS          reduce using rule 56 (standard_item -> decl .)
    INITIAL         reduce using rule 56 (standard_item -> decl .)
    ID              reduce using rule 56 (standard_item -> decl .)
    SENS_OR         reduce using rule 56 (standard_item -> decl .)
    FUNCTION        reduce using rule 56 (standard_item -> decl .)
    TASK            reduce using rule 56 (standard_item -> decl .)
    LPAREN          reduce using rule 56 (standard_item -> decl .)
    INPUT           reduce using rule 56 (standard_item -> decl .)
    OUTPUT          reduce using rule 56 (standard_item -> decl .)
    INOUT           reduce using rule 56 (standard_item -> decl .)
    TRI             reduce using rule 56 (standard_item -> decl .)
    REG             reduce using rule 56 (standard_item -> decl .)
    WIRE            reduce using rule 56 (standard_item -> decl .)
    SIGNED          reduce using rule 56 (standard_item -> decl .)
    SUPPLY0         reduce using rule 56 (standard_item -> decl .)
    SUPPLY1         reduce using rule 56 (standard_item -> decl .)
    ENDGENERATE     reduce using rule 56 (standard_item -> decl .)
    IF              reduce using rule 56 (standard_item -> decl .)
    FOR             reduce using rule 56 (standard_item -> decl .)
    ELSE            reduce using rule 56 (standard_item -> decl .)
    END             reduce using rule 56 (standard_item -> decl .)


state 30

    (57) standard_item -> integerdecl .

    ENDMODULE       reduce using rule 57 (standard_item -> integerdecl .)
    GENERATE        reduce using rule 57 (standard_item -> integerdecl .)
    INTEGER         reduce using rule 57 (standard_item -> integerdecl .)
    REAL            reduce using rule 57 (standard_item -> integerdecl .)
    PARAMETER       reduce using rule 57 (standard_item -> integerdecl .)
    LOCALPARAM      reduce using rule 57 (standard_item -> integerdecl .)
    GENVAR          reduce using rule 57 (standard_item -> integerdecl .)
    ASSIGN          reduce using rule 57 (standard_item -> integerdecl .)
    ALWAYS          reduce using rule 57 (standard_item -> integerdecl .)
    INITIAL         reduce using rule 57 (standard_item -> integerdecl .)
    ID              reduce using rule 57 (standard_item -> integerdecl .)
    SENS_OR         reduce using rule 57 (standard_item -> integerdecl .)
    FUNCTION        reduce using rule 57 (standard_item -> integerdecl .)
    TASK            reduce using rule 57 (standard_item -> integerdecl .)
    LPAREN          reduce using rule 57 (standard_item -> integerdecl .)
    INPUT           reduce using rule 57 (standard_item -> integerdecl .)
    OUTPUT          reduce using rule 57 (standard_item -> integerdecl .)
    INOUT           reduce using rule 57 (standard_item -> integerdecl .)
    TRI             reduce using rule 57 (standard_item -> integerdecl .)
    REG             reduce using rule 57 (standard_item -> integerdecl .)
    WIRE            reduce using rule 57 (standard_item -> integerdecl .)
    SIGNED          reduce using rule 57 (standard_item -> integerdecl .)
    SUPPLY0         reduce using rule 57 (standard_item -> integerdecl .)
    SUPPLY1         reduce using rule 57 (standard_item -> integerdecl .)
    ENDGENERATE     reduce using rule 57 (standard_item -> integerdecl .)
    IF              reduce using rule 57 (standard_item -> integerdecl .)
    FOR             reduce using rule 57 (standard_item -> integerdecl .)
    ELSE            reduce using rule 57 (standard_item -> integerdecl .)
    END             reduce using rule 57 (standard_item -> integerdecl .)


state 31

    (58) standard_item -> realdecl .

    ENDMODULE       reduce using rule 58 (standard_item -> realdecl .)
    GENERATE        reduce using rule 58 (standard_item -> realdecl .)
    INTEGER         reduce using rule 58 (standard_item -> realdecl .)
    REAL            reduce using rule 58 (standard_item -> realdecl .)
    PARAMETER       reduce using rule 58 (standard_item -> realdecl .)
    LOCALPARAM      reduce using rule 58 (standard_item -> realdecl .)
    GENVAR          reduce using rule 58 (standard_item -> realdecl .)
    ASSIGN          reduce using rule 58 (standard_item -> realdecl .)
    ALWAYS          reduce using rule 58 (standard_item -> realdecl .)
    INITIAL         reduce using rule 58 (standard_item -> realdecl .)
    ID              reduce using rule 58 (standard_item -> realdecl .)
    SENS_OR         reduce using rule 58 (standard_item -> realdecl .)
    FUNCTION        reduce using rule 58 (standard_item -> realdecl .)
    TASK            reduce using rule 58 (standard_item -> realdecl .)
    LPAREN          reduce using rule 58 (standard_item -> realdecl .)
    INPUT           reduce using rule 58 (standard_item -> realdecl .)
    OUTPUT          reduce using rule 58 (standard_item -> realdecl .)
    INOUT           reduce using rule 58 (standard_item -> realdecl .)
    TRI             reduce using rule 58 (standard_item -> realdecl .)
    REG             reduce using rule 58 (standard_item -> realdecl .)
    WIRE            reduce using rule 58 (standard_item -> realdecl .)
    SIGNED          reduce using rule 58 (standard_item -> realdecl .)
    SUPPLY0         reduce using rule 58 (standard_item -> realdecl .)
    SUPPLY1         reduce using rule 58 (standard_item -> realdecl .)
    ENDGENERATE     reduce using rule 58 (standard_item -> realdecl .)
    IF              reduce using rule 58 (standard_item -> realdecl .)
    FOR             reduce using rule 58 (standard_item -> realdecl .)
    ELSE            reduce using rule 58 (standard_item -> realdecl .)
    END             reduce using rule 58 (standard_item -> realdecl .)


state 32

    (59) standard_item -> declassign .

    ENDMODULE       reduce using rule 59 (standard_item -> declassign .)
    GENERATE        reduce using rule 59 (standard_item -> declassign .)
    INTEGER         reduce using rule 59 (standard_item -> declassign .)
    REAL            reduce using rule 59 (standard_item -> declassign .)
    PARAMETER       reduce using rule 59 (standard_item -> declassign .)
    LOCALPARAM      reduce using rule 59 (standard_item -> declassign .)
    GENVAR          reduce using rule 59 (standard_item -> declassign .)
    ASSIGN          reduce using rule 59 (standard_item -> declassign .)
    ALWAYS          reduce using rule 59 (standard_item -> declassign .)
    INITIAL         reduce using rule 59 (standard_item -> declassign .)
    ID              reduce using rule 59 (standard_item -> declassign .)
    SENS_OR         reduce using rule 59 (standard_item -> declassign .)
    FUNCTION        reduce using rule 59 (standard_item -> declassign .)
    TASK            reduce using rule 59 (standard_item -> declassign .)
    LPAREN          reduce using rule 59 (standard_item -> declassign .)
    INPUT           reduce using rule 59 (standard_item -> declassign .)
    OUTPUT          reduce using rule 59 (standard_item -> declassign .)
    INOUT           reduce using rule 59 (standard_item -> declassign .)
    TRI             reduce using rule 59 (standard_item -> declassign .)
    REG             reduce using rule 59 (standard_item -> declassign .)
    WIRE            reduce using rule 59 (standard_item -> declassign .)
    SIGNED          reduce using rule 59 (standard_item -> declassign .)
    SUPPLY0         reduce using rule 59 (standard_item -> declassign .)
    SUPPLY1         reduce using rule 59 (standard_item -> declassign .)
    ENDGENERATE     reduce using rule 59 (standard_item -> declassign .)
    IF              reduce using rule 59 (standard_item -> declassign .)
    FOR             reduce using rule 59 (standard_item -> declassign .)
    ELSE            reduce using rule 59 (standard_item -> declassign .)
    END             reduce using rule 59 (standard_item -> declassign .)


state 33

    (60) standard_item -> parameterdecl .

    ENDMODULE       reduce using rule 60 (standard_item -> parameterdecl .)
    GENERATE        reduce using rule 60 (standard_item -> parameterdecl .)
    INTEGER         reduce using rule 60 (standard_item -> parameterdecl .)
    REAL            reduce using rule 60 (standard_item -> parameterdecl .)
    PARAMETER       reduce using rule 60 (standard_item -> parameterdecl .)
    LOCALPARAM      reduce using rule 60 (standard_item -> parameterdecl .)
    GENVAR          reduce using rule 60 (standard_item -> parameterdecl .)
    ASSIGN          reduce using rule 60 (standard_item -> parameterdecl .)
    ALWAYS          reduce using rule 60 (standard_item -> parameterdecl .)
    INITIAL         reduce using rule 60 (standard_item -> parameterdecl .)
    ID              reduce using rule 60 (standard_item -> parameterdecl .)
    SENS_OR         reduce using rule 60 (standard_item -> parameterdecl .)
    FUNCTION        reduce using rule 60 (standard_item -> parameterdecl .)
    TASK            reduce using rule 60 (standard_item -> parameterdecl .)
    LPAREN          reduce using rule 60 (standard_item -> parameterdecl .)
    INPUT           reduce using rule 60 (standard_item -> parameterdecl .)
    OUTPUT          reduce using rule 60 (standard_item -> parameterdecl .)
    INOUT           reduce using rule 60 (standard_item -> parameterdecl .)
    TRI             reduce using rule 60 (standard_item -> parameterdecl .)
    REG             reduce using rule 60 (standard_item -> parameterdecl .)
    WIRE            reduce using rule 60 (standard_item -> parameterdecl .)
    SIGNED          reduce using rule 60 (standard_item -> parameterdecl .)
    SUPPLY0         reduce using rule 60 (standard_item -> parameterdecl .)
    SUPPLY1         reduce using rule 60 (standard_item -> parameterdecl .)
    ENDGENERATE     reduce using rule 60 (standard_item -> parameterdecl .)
    IF              reduce using rule 60 (standard_item -> parameterdecl .)
    FOR             reduce using rule 60 (standard_item -> parameterdecl .)
    ELSE            reduce using rule 60 (standard_item -> parameterdecl .)
    END             reduce using rule 60 (standard_item -> parameterdecl .)


state 34

    (61) standard_item -> localparamdecl .

    ENDMODULE       reduce using rule 61 (standard_item -> localparamdecl .)
    GENERATE        reduce using rule 61 (standard_item -> localparamdecl .)
    INTEGER         reduce using rule 61 (standard_item -> localparamdecl .)
    REAL            reduce using rule 61 (standard_item -> localparamdecl .)
    PARAMETER       reduce using rule 61 (standard_item -> localparamdecl .)
    LOCALPARAM      reduce using rule 61 (standard_item -> localparamdecl .)
    GENVAR          reduce using rule 61 (standard_item -> localparamdecl .)
    ASSIGN          reduce using rule 61 (standard_item -> localparamdecl .)
    ALWAYS          reduce using rule 61 (standard_item -> localparamdecl .)
    INITIAL         reduce using rule 61 (standard_item -> localparamdecl .)
    ID              reduce using rule 61 (standard_item -> localparamdecl .)
    SENS_OR         reduce using rule 61 (standard_item -> localparamdecl .)
    FUNCTION        reduce using rule 61 (standard_item -> localparamdecl .)
    TASK            reduce using rule 61 (standard_item -> localparamdecl .)
    LPAREN          reduce using rule 61 (standard_item -> localparamdecl .)
    INPUT           reduce using rule 61 (standard_item -> localparamdecl .)
    OUTPUT          reduce using rule 61 (standard_item -> localparamdecl .)
    INOUT           reduce using rule 61 (standard_item -> localparamdecl .)
    TRI             reduce using rule 61 (standard_item -> localparamdecl .)
    REG             reduce using rule 61 (standard_item -> localparamdecl .)
    WIRE            reduce using rule 61 (standard_item -> localparamdecl .)
    SIGNED          reduce using rule 61 (standard_item -> localparamdecl .)
    SUPPLY0         reduce using rule 61 (standard_item -> localparamdecl .)
    SUPPLY1         reduce using rule 61 (standard_item -> localparamdecl .)
    ENDGENERATE     reduce using rule 61 (standard_item -> localparamdecl .)
    IF              reduce using rule 61 (standard_item -> localparamdecl .)
    FOR             reduce using rule 61 (standard_item -> localparamdecl .)
    ELSE            reduce using rule 61 (standard_item -> localparamdecl .)
    END             reduce using rule 61 (standard_item -> localparamdecl .)


state 35

    (62) standard_item -> genvardecl .

    ENDMODULE       reduce using rule 62 (standard_item -> genvardecl .)
    GENERATE        reduce using rule 62 (standard_item -> genvardecl .)
    INTEGER         reduce using rule 62 (standard_item -> genvardecl .)
    REAL            reduce using rule 62 (standard_item -> genvardecl .)
    PARAMETER       reduce using rule 62 (standard_item -> genvardecl .)
    LOCALPARAM      reduce using rule 62 (standard_item -> genvardecl .)
    GENVAR          reduce using rule 62 (standard_item -> genvardecl .)
    ASSIGN          reduce using rule 62 (standard_item -> genvardecl .)
    ALWAYS          reduce using rule 62 (standard_item -> genvardecl .)
    INITIAL         reduce using rule 62 (standard_item -> genvardecl .)
    ID              reduce using rule 62 (standard_item -> genvardecl .)
    SENS_OR         reduce using rule 62 (standard_item -> genvardecl .)
    FUNCTION        reduce using rule 62 (standard_item -> genvardecl .)
    TASK            reduce using rule 62 (standard_item -> genvardecl .)
    LPAREN          reduce using rule 62 (standard_item -> genvardecl .)
    INPUT           reduce using rule 62 (standard_item -> genvardecl .)
    OUTPUT          reduce using rule 62 (standard_item -> genvardecl .)
    INOUT           reduce using rule 62 (standard_item -> genvardecl .)
    TRI             reduce using rule 62 (standard_item -> genvardecl .)
    REG             reduce using rule 62 (standard_item -> genvardecl .)
    WIRE            reduce using rule 62 (standard_item -> genvardecl .)
    SIGNED          reduce using rule 62 (standard_item -> genvardecl .)
    SUPPLY0         reduce using rule 62 (standard_item -> genvardecl .)
    SUPPLY1         reduce using rule 62 (standard_item -> genvardecl .)
    ENDGENERATE     reduce using rule 62 (standard_item -> genvardecl .)
    IF              reduce using rule 62 (standard_item -> genvardecl .)
    FOR             reduce using rule 62 (standard_item -> genvardecl .)
    ELSE            reduce using rule 62 (standard_item -> genvardecl .)
    END             reduce using rule 62 (standard_item -> genvardecl .)


state 36

    (63) standard_item -> assignment .

    ENDMODULE       reduce using rule 63 (standard_item -> assignment .)
    GENERATE        reduce using rule 63 (standard_item -> assignment .)
    INTEGER         reduce using rule 63 (standard_item -> assignment .)
    REAL            reduce using rule 63 (standard_item -> assignment .)
    PARAMETER       reduce using rule 63 (standard_item -> assignment .)
    LOCALPARAM      reduce using rule 63 (standard_item -> assignment .)
    GENVAR          reduce using rule 63 (standard_item -> assignment .)
    ASSIGN          reduce using rule 63 (standard_item -> assignment .)
    ALWAYS          reduce using rule 63 (standard_item -> assignment .)
    INITIAL         reduce using rule 63 (standard_item -> assignment .)
    ID              reduce using rule 63 (standard_item -> assignment .)
    SENS_OR         reduce using rule 63 (standard_item -> assignment .)
    FUNCTION        reduce using rule 63 (standard_item -> assignment .)
    TASK            reduce using rule 63 (standard_item -> assignment .)
    LPAREN          reduce using rule 63 (standard_item -> assignment .)
    INPUT           reduce using rule 63 (standard_item -> assignment .)
    OUTPUT          reduce using rule 63 (standard_item -> assignment .)
    INOUT           reduce using rule 63 (standard_item -> assignment .)
    TRI             reduce using rule 63 (standard_item -> assignment .)
    REG             reduce using rule 63 (standard_item -> assignment .)
    WIRE            reduce using rule 63 (standard_item -> assignment .)
    SIGNED          reduce using rule 63 (standard_item -> assignment .)
    SUPPLY0         reduce using rule 63 (standard_item -> assignment .)
    SUPPLY1         reduce using rule 63 (standard_item -> assignment .)
    ENDGENERATE     reduce using rule 63 (standard_item -> assignment .)
    IF              reduce using rule 63 (standard_item -> assignment .)
    FOR             reduce using rule 63 (standard_item -> assignment .)
    ELSE            reduce using rule 63 (standard_item -> assignment .)
    END             reduce using rule 63 (standard_item -> assignment .)


state 37

    (64) standard_item -> always .

    ENDMODULE       reduce using rule 64 (standard_item -> always .)
    GENERATE        reduce using rule 64 (standard_item -> always .)
    INTEGER         reduce using rule 64 (standard_item -> always .)
    REAL            reduce using rule 64 (standard_item -> always .)
    PARAMETER       reduce using rule 64 (standard_item -> always .)
    LOCALPARAM      reduce using rule 64 (standard_item -> always .)
    GENVAR          reduce using rule 64 (standard_item -> always .)
    ASSIGN          reduce using rule 64 (standard_item -> always .)
    ALWAYS          reduce using rule 64 (standard_item -> always .)
    INITIAL         reduce using rule 64 (standard_item -> always .)
    ID              reduce using rule 64 (standard_item -> always .)
    SENS_OR         reduce using rule 64 (standard_item -> always .)
    FUNCTION        reduce using rule 64 (standard_item -> always .)
    TASK            reduce using rule 64 (standard_item -> always .)
    LPAREN          reduce using rule 64 (standard_item -> always .)
    INPUT           reduce using rule 64 (standard_item -> always .)
    OUTPUT          reduce using rule 64 (standard_item -> always .)
    INOUT           reduce using rule 64 (standard_item -> always .)
    TRI             reduce using rule 64 (standard_item -> always .)
    REG             reduce using rule 64 (standard_item -> always .)
    WIRE            reduce using rule 64 (standard_item -> always .)
    SIGNED          reduce using rule 64 (standard_item -> always .)
    SUPPLY0         reduce using rule 64 (standard_item -> always .)
    SUPPLY1         reduce using rule 64 (standard_item -> always .)
    ENDGENERATE     reduce using rule 64 (standard_item -> always .)
    IF              reduce using rule 64 (standard_item -> always .)
    FOR             reduce using rule 64 (standard_item -> always .)
    ELSE            reduce using rule 64 (standard_item -> always .)
    END             reduce using rule 64 (standard_item -> always .)


state 38

    (65) standard_item -> initial .

    ENDMODULE       reduce using rule 65 (standard_item -> initial .)
    GENERATE        reduce using rule 65 (standard_item -> initial .)
    INTEGER         reduce using rule 65 (standard_item -> initial .)
    REAL            reduce using rule 65 (standard_item -> initial .)
    PARAMETER       reduce using rule 65 (standard_item -> initial .)
    LOCALPARAM      reduce using rule 65 (standard_item -> initial .)
    GENVAR          reduce using rule 65 (standard_item -> initial .)
    ASSIGN          reduce using rule 65 (standard_item -> initial .)
    ALWAYS          reduce using rule 65 (standard_item -> initial .)
    INITIAL         reduce using rule 65 (standard_item -> initial .)
    ID              reduce using rule 65 (standard_item -> initial .)
    SENS_OR         reduce using rule 65 (standard_item -> initial .)
    FUNCTION        reduce using rule 65 (standard_item -> initial .)
    TASK            reduce using rule 65 (standard_item -> initial .)
    LPAREN          reduce using rule 65 (standard_item -> initial .)
    INPUT           reduce using rule 65 (standard_item -> initial .)
    OUTPUT          reduce using rule 65 (standard_item -> initial .)
    INOUT           reduce using rule 65 (standard_item -> initial .)
    TRI             reduce using rule 65 (standard_item -> initial .)
    REG             reduce using rule 65 (standard_item -> initial .)
    WIRE            reduce using rule 65 (standard_item -> initial .)
    SIGNED          reduce using rule 65 (standard_item -> initial .)
    SUPPLY0         reduce using rule 65 (standard_item -> initial .)
    SUPPLY1         reduce using rule 65 (standard_item -> initial .)
    ENDGENERATE     reduce using rule 65 (standard_item -> initial .)
    IF              reduce using rule 65 (standard_item -> initial .)
    FOR             reduce using rule 65 (standard_item -> initial .)
    ELSE            reduce using rule 65 (standard_item -> initial .)
    END             reduce using rule 65 (standard_item -> initial .)


state 39

    (66) standard_item -> instance .

    ENDMODULE       reduce using rule 66 (standard_item -> instance .)
    GENERATE        reduce using rule 66 (standard_item -> instance .)
    INTEGER         reduce using rule 66 (standard_item -> instance .)
    REAL            reduce using rule 66 (standard_item -> instance .)
    PARAMETER       reduce using rule 66 (standard_item -> instance .)
    LOCALPARAM      reduce using rule 66 (standard_item -> instance .)
    GENVAR          reduce using rule 66 (standard_item -> instance .)
    ASSIGN          reduce using rule 66 (standard_item -> instance .)
    ALWAYS          reduce using rule 66 (standard_item -> instance .)
    INITIAL         reduce using rule 66 (standard_item -> instance .)
    ID              reduce using rule 66 (standard_item -> instance .)
    SENS_OR         reduce using rule 66 (standard_item -> instance .)
    FUNCTION        reduce using rule 66 (standard_item -> instance .)
    TASK            reduce using rule 66 (standard_item -> instance .)
    LPAREN          reduce using rule 66 (standard_item -> instance .)
    INPUT           reduce using rule 66 (standard_item -> instance .)
    OUTPUT          reduce using rule 66 (standard_item -> instance .)
    INOUT           reduce using rule 66 (standard_item -> instance .)
    TRI             reduce using rule 66 (standard_item -> instance .)
    REG             reduce using rule 66 (standard_item -> instance .)
    WIRE            reduce using rule 66 (standard_item -> instance .)
    SIGNED          reduce using rule 66 (standard_item -> instance .)
    SUPPLY0         reduce using rule 66 (standard_item -> instance .)
    SUPPLY1         reduce using rule 66 (standard_item -> instance .)
    ENDGENERATE     reduce using rule 66 (standard_item -> instance .)
    IF              reduce using rule 66 (standard_item -> instance .)
    FOR             reduce using rule 66 (standard_item -> instance .)
    ELSE            reduce using rule 66 (standard_item -> instance .)
    END             reduce using rule 66 (standard_item -> instance .)


state 40

    (67) standard_item -> function .

    ENDMODULE       reduce using rule 67 (standard_item -> function .)
    GENERATE        reduce using rule 67 (standard_item -> function .)
    INTEGER         reduce using rule 67 (standard_item -> function .)
    REAL            reduce using rule 67 (standard_item -> function .)
    PARAMETER       reduce using rule 67 (standard_item -> function .)
    LOCALPARAM      reduce using rule 67 (standard_item -> function .)
    GENVAR          reduce using rule 67 (standard_item -> function .)
    ASSIGN          reduce using rule 67 (standard_item -> function .)
    ALWAYS          reduce using rule 67 (standard_item -> function .)
    INITIAL         reduce using rule 67 (standard_item -> function .)
    ID              reduce using rule 67 (standard_item -> function .)
    SENS_OR         reduce using rule 67 (standard_item -> function .)
    FUNCTION        reduce using rule 67 (standard_item -> function .)
    TASK            reduce using rule 67 (standard_item -> function .)
    LPAREN          reduce using rule 67 (standard_item -> function .)
    INPUT           reduce using rule 67 (standard_item -> function .)
    OUTPUT          reduce using rule 67 (standard_item -> function .)
    INOUT           reduce using rule 67 (standard_item -> function .)
    TRI             reduce using rule 67 (standard_item -> function .)
    REG             reduce using rule 67 (standard_item -> function .)
    WIRE            reduce using rule 67 (standard_item -> function .)
    SIGNED          reduce using rule 67 (standard_item -> function .)
    SUPPLY0         reduce using rule 67 (standard_item -> function .)
    SUPPLY1         reduce using rule 67 (standard_item -> function .)
    ENDGENERATE     reduce using rule 67 (standard_item -> function .)
    IF              reduce using rule 67 (standard_item -> function .)
    FOR             reduce using rule 67 (standard_item -> function .)
    ELSE            reduce using rule 67 (standard_item -> function .)
    END             reduce using rule 67 (standard_item -> function .)


state 41

    (68) standard_item -> task .

    ENDMODULE       reduce using rule 68 (standard_item -> task .)
    GENERATE        reduce using rule 68 (standard_item -> task .)
    INTEGER         reduce using rule 68 (standard_item -> task .)
    REAL            reduce using rule 68 (standard_item -> task .)
    PARAMETER       reduce using rule 68 (standard_item -> task .)
    LOCALPARAM      reduce using rule 68 (standard_item -> task .)
    GENVAR          reduce using rule 68 (standard_item -> task .)
    ASSIGN          reduce using rule 68 (standard_item -> task .)
    ALWAYS          reduce using rule 68 (standard_item -> task .)
    INITIAL         reduce using rule 68 (standard_item -> task .)
    ID              reduce using rule 68 (standard_item -> task .)
    SENS_OR         reduce using rule 68 (standard_item -> task .)
    FUNCTION        reduce using rule 68 (standard_item -> task .)
    TASK            reduce using rule 68 (standard_item -> task .)
    LPAREN          reduce using rule 68 (standard_item -> task .)
    INPUT           reduce using rule 68 (standard_item -> task .)
    OUTPUT          reduce using rule 68 (standard_item -> task .)
    INOUT           reduce using rule 68 (standard_item -> task .)
    TRI             reduce using rule 68 (standard_item -> task .)
    REG             reduce using rule 68 (standard_item -> task .)
    WIRE            reduce using rule 68 (standard_item -> task .)
    SIGNED          reduce using rule 68 (standard_item -> task .)
    SUPPLY0         reduce using rule 68 (standard_item -> task .)
    SUPPLY1         reduce using rule 68 (standard_item -> task .)
    ENDGENERATE     reduce using rule 68 (standard_item -> task .)
    IF              reduce using rule 68 (standard_item -> task .)
    FOR             reduce using rule 68 (standard_item -> task .)
    ELSE            reduce using rule 68 (standard_item -> task .)
    END             reduce using rule 68 (standard_item -> task .)


state 42

    (69) standard_item -> pragma .

    ENDMODULE       reduce using rule 69 (standard_item -> pragma .)
    GENERATE        reduce using rule 69 (standard_item -> pragma .)
    INTEGER         reduce using rule 69 (standard_item -> pragma .)
    REAL            reduce using rule 69 (standard_item -> pragma .)
    PARAMETER       reduce using rule 69 (standard_item -> pragma .)
    LOCALPARAM      reduce using rule 69 (standard_item -> pragma .)
    GENVAR          reduce using rule 69 (standard_item -> pragma .)
    ASSIGN          reduce using rule 69 (standard_item -> pragma .)
    ALWAYS          reduce using rule 69 (standard_item -> pragma .)
    INITIAL         reduce using rule 69 (standard_item -> pragma .)
    ID              reduce using rule 69 (standard_item -> pragma .)
    SENS_OR         reduce using rule 69 (standard_item -> pragma .)
    FUNCTION        reduce using rule 69 (standard_item -> pragma .)
    TASK            reduce using rule 69 (standard_item -> pragma .)
    LPAREN          reduce using rule 69 (standard_item -> pragma .)
    INPUT           reduce using rule 69 (standard_item -> pragma .)
    OUTPUT          reduce using rule 69 (standard_item -> pragma .)
    INOUT           reduce using rule 69 (standard_item -> pragma .)
    TRI             reduce using rule 69 (standard_item -> pragma .)
    REG             reduce using rule 69 (standard_item -> pragma .)
    WIRE            reduce using rule 69 (standard_item -> pragma .)
    SIGNED          reduce using rule 69 (standard_item -> pragma .)
    SUPPLY0         reduce using rule 69 (standard_item -> pragma .)
    SUPPLY1         reduce using rule 69 (standard_item -> pragma .)
    ENDGENERATE     reduce using rule 69 (standard_item -> pragma .)
    IF              reduce using rule 69 (standard_item -> pragma .)
    FOR             reduce using rule 69 (standard_item -> pragma .)
    ELSE            reduce using rule 69 (standard_item -> pragma .)
    END             reduce using rule 69 (standard_item -> pragma .)


state 43

    (318) generate -> GENERATE . generate_items ENDGENERATE
    (319) generate_items -> . empty
    (320) generate_items -> . generate_items generate_item
    (321) generate_items -> . generate_item
    (385) empty -> .
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDGENERATE     reduce using rule 385 (empty -> .)
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! IF              [ reduce using rule 385 (empty -> .) ]
  ! FOR             [ reduce using rule 385 (empty -> .) ]
  ! INTEGER         [ reduce using rule 385 (empty -> .) ]
  ! REAL            [ reduce using rule 385 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 385 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 385 (empty -> .) ]
  ! GENVAR          [ reduce using rule 385 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 385 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 385 (empty -> .) ]
  ! INITIAL         [ reduce using rule 385 (empty -> .) ]
  ! ID              [ reduce using rule 385 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 385 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 385 (empty -> .) ]
  ! TASK            [ reduce using rule 385 (empty -> .) ]
  ! LPAREN          [ reduce using rule 385 (empty -> .) ]
  ! INPUT           [ reduce using rule 385 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 385 (empty -> .) ]
  ! INOUT           [ reduce using rule 385 (empty -> .) ]
  ! TRI             [ reduce using rule 385 (empty -> .) ]
  ! REG             [ reduce using rule 385 (empty -> .) ]
  ! WIRE            [ reduce using rule 385 (empty -> .) ]
  ! SIGNED          [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 385 (empty -> .) ]

    generate_items                 shift and go to state 119
    empty                          shift and go to state 120
    generate_item                  shift and go to state 121
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 44

    (70) decl -> sigtypes . declnamelist SEMICOLON
    (71) decl -> sigtypes . width declnamelist SEMICOLON
    (76) declassign -> sigtypes . declassign_element SEMICOLON
    (77) declassign -> sigtypes . width declassign_element SEMICOLON
    (31) sigtypes -> sigtypes . sigtype
    (72) declnamelist -> . declnamelist COMMA declname
    (73) declnamelist -> . declname
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (78) declassign_element -> . ID EQUALS rvalue
    (79) declassign_element -> . delays ID EQUALS delays rvalue
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1
    (74) declname -> . ID
    (75) declname -> . ID length
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LBRACKET        shift and go to state 132
    ID              shift and go to state 133
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66
    DELAY           shift and go to state 135

  ! ID              [ reduce using rule 385 (empty -> .) ]

    declnamelist                   shift and go to state 127
    width                          shift and go to state 128
    declassign_element             shift and go to state 129
    sigtype                        shift and go to state 130
    declname                       shift and go to state 131
    delays                         shift and go to state 134
    empty                          shift and go to state 136

state 45

    (80) integerdecl -> INTEGER . integernamelist SEMICOLON
    (81) integerdecl -> INTEGER . SIGNED integernamelist SEMICOLON
    (82) integernamelist -> . integernamelist COMMA integername
    (83) integernamelist -> . integername
    (84) integername -> . ID

    SIGNED          shift and go to state 138
    ID              shift and go to state 140

    integernamelist                shift and go to state 137
    integername                    shift and go to state 139

state 46

    (39) sigtype -> SIGNED .

    LBRACKET        reduce using rule 39 (sigtype -> SIGNED .)
    ID              reduce using rule 39 (sigtype -> SIGNED .)
    INPUT           reduce using rule 39 (sigtype -> SIGNED .)
    OUTPUT          reduce using rule 39 (sigtype -> SIGNED .)
    INOUT           reduce using rule 39 (sigtype -> SIGNED .)
    TRI             reduce using rule 39 (sigtype -> SIGNED .)
    REG             reduce using rule 39 (sigtype -> SIGNED .)
    WIRE            reduce using rule 39 (sigtype -> SIGNED .)
    SIGNED          reduce using rule 39 (sigtype -> SIGNED .)
    SUPPLY0         reduce using rule 39 (sigtype -> SIGNED .)
    SUPPLY1         reduce using rule 39 (sigtype -> SIGNED .)
    DELAY           reduce using rule 39 (sigtype -> SIGNED .)


state 47

    (85) realdecl -> REAL . realnamelist SEMICOLON
    (86) realnamelist -> . realnamelist COMMA realname
    (87) realnamelist -> . realname
    (88) realname -> . ID

    ID              shift and go to state 143

    realnamelist                   shift and go to state 141
    realname                       shift and go to state 142

state 48

    (89) parameterdecl -> PARAMETER . param_substitution_list SEMICOLON
    (90) parameterdecl -> PARAMETER . width param_substitution_list SEMICOLON
    (91) parameterdecl -> PARAMETER . INTEGER param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (97) param_substitution -> . ID EQUALS rvalue

    INTEGER         shift and go to state 146
    LBRACKET        shift and go to state 132
    ID              shift and go to state 148

    param_substitution_list        shift and go to state 144
    width                          shift and go to state 145
    param_substitution             shift and go to state 147

state 49

    (92) localparamdecl -> LOCALPARAM . param_substitution_list SEMICOLON
    (93) localparamdecl -> LOCALPARAM . width param_substitution_list SEMICOLON
    (94) localparamdecl -> LOCALPARAM . INTEGER param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (97) param_substitution -> . ID EQUALS rvalue

    INTEGER         shift and go to state 151
    LBRACKET        shift and go to state 132
    ID              shift and go to state 148

    param_substitution_list        shift and go to state 149
    width                          shift and go to state 150
    param_substitution             shift and go to state 147

state 50

    (314) genvardecl -> GENVAR . genvarlist SEMICOLON
    (315) genvarlist -> . genvarlist COMMA genvar
    (316) genvarlist -> . genvar
    (317) genvar -> . ID

    ID              shift and go to state 154

    genvarlist                     shift and go to state 152
    genvar                         shift and go to state 153

state 51

    (98) assignment -> ASSIGN . lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> ASSIGN . delays lvalue EQUALS delays rvalue SEMICOLON
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (385) empty -> .
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    DELAY           shift and go to state 135
    LBRACE          shift and go to state 162
    ID              shift and go to state 81

  ! LBRACE          [ reduce using rule 385 (empty -> .) ]
  ! ID              [ reduce using rule 385 (empty -> .) ]

    lvalue                         shift and go to state 155
    delays                         shift and go to state 156
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    empty                          shift and go to state 136
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 52

    (188) always -> ALWAYS . senslist always_statement
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (385) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 164
    IF              reduce using rule 385 (empty -> .)
    CASE            reduce using rule 385 (empty -> .)
    CASEX           reduce using rule 385 (empty -> .)
    FOR             reduce using rule 385 (empty -> .)
    WHILE           reduce using rule 385 (empty -> .)
    WAIT            reduce using rule 385 (empty -> .)
    FOREVER         reduce using rule 385 (empty -> .)
    BEGIN           reduce using rule 385 (empty -> .)
    FORK            reduce using rule 385 (empty -> .)
    DELAY           reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    DISABLE         reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! AT              [ reduce using rule 385 (empty -> .) ]

    senslist                       shift and go to state 163
    empty                          shift and go to state 165

state 53

    (275) initial -> INITIAL . initial_statement
    (276) initial_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    initial_statement              shift and go to state 166
    basic_statement                shift and go to state 167
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 54

    (282) instance -> ID . parameterlist instance_bodylist SEMICOLON
    (288) instance -> ID . instance_bodylist_noname SEMICOLON
    (293) parameterlist -> . DELAY LPAREN param_args RPAREN
    (294) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (295) parameterlist -> . empty
    (290) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (291) instance_bodylist_noname -> . instance_body_noname
    (385) empty -> .
    (292) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 200
    ID              reduce using rule 385 (empty -> .)
    LPAREN          shift and go to state 201

    parameterlist                  shift and go to state 198
    instance_bodylist_noname       shift and go to state 199
    empty                          shift and go to state 202
    instance_body_noname           shift and go to state 203

state 55

    (283) instance -> SENS_OR . parameterlist instance_bodylist SEMICOLON
    (289) instance -> SENS_OR . instance_bodylist_noname SEMICOLON
    (293) parameterlist -> . DELAY LPAREN param_args RPAREN
    (294) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (295) parameterlist -> . empty
    (290) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (291) instance_bodylist_noname -> . instance_body_noname
    (385) empty -> .
    (292) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 200
    ID              reduce using rule 385 (empty -> .)
    LPAREN          shift and go to state 201

    parameterlist                  shift and go to state 204
    instance_bodylist_noname       shift and go to state 205
    empty                          shift and go to state 202
    instance_body_noname           shift and go to state 203

state 56

    (343) function -> FUNCTION . width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> FUNCTION . ID SEMICOLON function_statement ENDFUNCTION
    (49) width -> . LBRACKET expression COLON expression RBRACKET

    ID              shift and go to state 207
    LBRACKET        shift and go to state 132

    width                          shift and go to state 206

state 57

    (362) task -> TASK . ID SEMICOLON task_statement ENDTASK

    ID              shift and go to state 208


state 58

    (32) sigtypes -> sigtype .

    LBRACKET        reduce using rule 32 (sigtypes -> sigtype .)
    ID              reduce using rule 32 (sigtypes -> sigtype .)
    INPUT           reduce using rule 32 (sigtypes -> sigtype .)
    OUTPUT          reduce using rule 32 (sigtypes -> sigtype .)
    INOUT           reduce using rule 32 (sigtypes -> sigtype .)
    TRI             reduce using rule 32 (sigtypes -> sigtype .)
    REG             reduce using rule 32 (sigtypes -> sigtype .)
    WIRE            reduce using rule 32 (sigtypes -> sigtype .)
    SIGNED          reduce using rule 32 (sigtypes -> sigtype .)
    SUPPLY0         reduce using rule 32 (sigtypes -> sigtype .)
    SUPPLY1         reduce using rule 32 (sigtypes -> sigtype .)
    DELAY           reduce using rule 32 (sigtypes -> sigtype .)


state 59

    (33) sigtype -> INPUT .

    LBRACKET        reduce using rule 33 (sigtype -> INPUT .)
    ID              reduce using rule 33 (sigtype -> INPUT .)
    INPUT           reduce using rule 33 (sigtype -> INPUT .)
    OUTPUT          reduce using rule 33 (sigtype -> INPUT .)
    INOUT           reduce using rule 33 (sigtype -> INPUT .)
    TRI             reduce using rule 33 (sigtype -> INPUT .)
    REG             reduce using rule 33 (sigtype -> INPUT .)
    WIRE            reduce using rule 33 (sigtype -> INPUT .)
    SIGNED          reduce using rule 33 (sigtype -> INPUT .)
    SUPPLY0         reduce using rule 33 (sigtype -> INPUT .)
    SUPPLY1         reduce using rule 33 (sigtype -> INPUT .)
    DELAY           reduce using rule 33 (sigtype -> INPUT .)


state 60

    (34) sigtype -> OUTPUT .

    LBRACKET        reduce using rule 34 (sigtype -> OUTPUT .)
    ID              reduce using rule 34 (sigtype -> OUTPUT .)
    INPUT           reduce using rule 34 (sigtype -> OUTPUT .)
    OUTPUT          reduce using rule 34 (sigtype -> OUTPUT .)
    INOUT           reduce using rule 34 (sigtype -> OUTPUT .)
    TRI             reduce using rule 34 (sigtype -> OUTPUT .)
    REG             reduce using rule 34 (sigtype -> OUTPUT .)
    WIRE            reduce using rule 34 (sigtype -> OUTPUT .)
    SIGNED          reduce using rule 34 (sigtype -> OUTPUT .)
    SUPPLY0         reduce using rule 34 (sigtype -> OUTPUT .)
    SUPPLY1         reduce using rule 34 (sigtype -> OUTPUT .)
    DELAY           reduce using rule 34 (sigtype -> OUTPUT .)


state 61

    (35) sigtype -> INOUT .

    LBRACKET        reduce using rule 35 (sigtype -> INOUT .)
    ID              reduce using rule 35 (sigtype -> INOUT .)
    INPUT           reduce using rule 35 (sigtype -> INOUT .)
    OUTPUT          reduce using rule 35 (sigtype -> INOUT .)
    INOUT           reduce using rule 35 (sigtype -> INOUT .)
    TRI             reduce using rule 35 (sigtype -> INOUT .)
    REG             reduce using rule 35 (sigtype -> INOUT .)
    WIRE            reduce using rule 35 (sigtype -> INOUT .)
    SIGNED          reduce using rule 35 (sigtype -> INOUT .)
    SUPPLY0         reduce using rule 35 (sigtype -> INOUT .)
    SUPPLY1         reduce using rule 35 (sigtype -> INOUT .)
    DELAY           reduce using rule 35 (sigtype -> INOUT .)


state 62

    (36) sigtype -> TRI .

    LBRACKET        reduce using rule 36 (sigtype -> TRI .)
    ID              reduce using rule 36 (sigtype -> TRI .)
    INPUT           reduce using rule 36 (sigtype -> TRI .)
    OUTPUT          reduce using rule 36 (sigtype -> TRI .)
    INOUT           reduce using rule 36 (sigtype -> TRI .)
    TRI             reduce using rule 36 (sigtype -> TRI .)
    REG             reduce using rule 36 (sigtype -> TRI .)
    WIRE            reduce using rule 36 (sigtype -> TRI .)
    SIGNED          reduce using rule 36 (sigtype -> TRI .)
    SUPPLY0         reduce using rule 36 (sigtype -> TRI .)
    SUPPLY1         reduce using rule 36 (sigtype -> TRI .)
    DELAY           reduce using rule 36 (sigtype -> TRI .)


state 63

    (37) sigtype -> REG .

    LBRACKET        reduce using rule 37 (sigtype -> REG .)
    ID              reduce using rule 37 (sigtype -> REG .)
    INPUT           reduce using rule 37 (sigtype -> REG .)
    OUTPUT          reduce using rule 37 (sigtype -> REG .)
    INOUT           reduce using rule 37 (sigtype -> REG .)
    TRI             reduce using rule 37 (sigtype -> REG .)
    REG             reduce using rule 37 (sigtype -> REG .)
    WIRE            reduce using rule 37 (sigtype -> REG .)
    SIGNED          reduce using rule 37 (sigtype -> REG .)
    SUPPLY0         reduce using rule 37 (sigtype -> REG .)
    SUPPLY1         reduce using rule 37 (sigtype -> REG .)
    DELAY           reduce using rule 37 (sigtype -> REG .)


state 64

    (38) sigtype -> WIRE .

    LBRACKET        reduce using rule 38 (sigtype -> WIRE .)
    ID              reduce using rule 38 (sigtype -> WIRE .)
    INPUT           reduce using rule 38 (sigtype -> WIRE .)
    OUTPUT          reduce using rule 38 (sigtype -> WIRE .)
    INOUT           reduce using rule 38 (sigtype -> WIRE .)
    TRI             reduce using rule 38 (sigtype -> WIRE .)
    REG             reduce using rule 38 (sigtype -> WIRE .)
    WIRE            reduce using rule 38 (sigtype -> WIRE .)
    SIGNED          reduce using rule 38 (sigtype -> WIRE .)
    SUPPLY0         reduce using rule 38 (sigtype -> WIRE .)
    SUPPLY1         reduce using rule 38 (sigtype -> WIRE .)
    DELAY           reduce using rule 38 (sigtype -> WIRE .)


state 65

    (40) sigtype -> SUPPLY0 .

    LBRACKET        reduce using rule 40 (sigtype -> SUPPLY0 .)
    ID              reduce using rule 40 (sigtype -> SUPPLY0 .)
    INPUT           reduce using rule 40 (sigtype -> SUPPLY0 .)
    OUTPUT          reduce using rule 40 (sigtype -> SUPPLY0 .)
    INOUT           reduce using rule 40 (sigtype -> SUPPLY0 .)
    TRI             reduce using rule 40 (sigtype -> SUPPLY0 .)
    REG             reduce using rule 40 (sigtype -> SUPPLY0 .)
    WIRE            reduce using rule 40 (sigtype -> SUPPLY0 .)
    SIGNED          reduce using rule 40 (sigtype -> SUPPLY0 .)
    SUPPLY0         reduce using rule 40 (sigtype -> SUPPLY0 .)
    SUPPLY1         reduce using rule 40 (sigtype -> SUPPLY0 .)
    DELAY           reduce using rule 40 (sigtype -> SUPPLY0 .)


state 66

    (41) sigtype -> SUPPLY1 .

    LBRACKET        reduce using rule 41 (sigtype -> SUPPLY1 .)
    ID              reduce using rule 41 (sigtype -> SUPPLY1 .)
    INPUT           reduce using rule 41 (sigtype -> SUPPLY1 .)
    OUTPUT          reduce using rule 41 (sigtype -> SUPPLY1 .)
    INOUT           reduce using rule 41 (sigtype -> SUPPLY1 .)
    TRI             reduce using rule 41 (sigtype -> SUPPLY1 .)
    REG             reduce using rule 41 (sigtype -> SUPPLY1 .)
    WIRE            reduce using rule 41 (sigtype -> SUPPLY1 .)
    SIGNED          reduce using rule 41 (sigtype -> SUPPLY1 .)
    SUPPLY0         reduce using rule 41 (sigtype -> SUPPLY1 .)
    SUPPLY1         reduce using rule 41 (sigtype -> SUPPLY1 .)
    DELAY           reduce using rule 41 (sigtype -> SUPPLY1 .)


state 67

    (24) portlist -> LPAREN ports . RPAREN SEMICOLON
    (28) ports -> ports . COMMA portname

    RPAREN          shift and go to state 209
    COMMA           shift and go to state 210


state 68

    (26) portlist -> LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 211


state 69

    (25) portlist -> LPAREN ioports . RPAREN SEMICOLON
    (42) ioports -> ioports . COMMA ioport

    RPAREN          shift and go to state 212
    COMMA           shift and go to state 213


state 70

    (29) ports -> portname .

    RPAREN          reduce using rule 29 (ports -> portname .)
    COMMA           reduce using rule 29 (ports -> portname .)


state 71

    (43) ioports -> ioport_head .

    RPAREN          reduce using rule 43 (ioports -> ioport_head .)
    COMMA           reduce using rule 43 (ioports -> ioport_head .)


state 72

    (30) portname -> ID .

    RPAREN          reduce using rule 30 (portname -> ID .)
    COMMA           reduce using rule 30 (portname -> ID .)


state 73

    (46) ioport_head -> sigtypes . portname
    (47) ioport_head -> sigtypes . width portname
    (31) sigtypes -> sigtypes . sigtype
    (30) portname -> . ID
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    ID              shift and go to state 72
    LBRACKET        shift and go to state 132
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    portname                       shift and go to state 214
    width                          shift and go to state 215
    sigtype                        shift and go to state 130

state 74

    (12) paramlist -> DELAY LPAREN params . RPAREN

    RPAREN          shift and go to state 216


state 75

    (14) params -> params_begin . param_end
    (15) params_begin -> params_begin . param
    (21) param_end -> . PARAMETER param_substitution_list
    (22) param_end -> . PARAMETER width param_substitution_list
    (23) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER width param_substitution_list COMMA
    (20) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 78

    param_end                      shift and go to state 217
    param                          shift and go to state 218

state 76

    (17) params -> param_end .

    RPAREN          reduce using rule 17 (params -> param_end .)


state 77

    (16) params_begin -> param .

    PARAMETER       reduce using rule 16 (params_begin -> param .)


state 78

    (21) param_end -> PARAMETER . param_substitution_list
    (22) param_end -> PARAMETER . width param_substitution_list
    (23) param_end -> PARAMETER . INTEGER param_substitution_list
    (18) param -> PARAMETER . param_substitution_list COMMA
    (19) param -> PARAMETER . width param_substitution_list COMMA
    (20) param -> PARAMETER . INTEGER param_substitution_list COMMA
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (97) param_substitution -> . ID EQUALS rvalue

    INTEGER         shift and go to state 221
    LBRACKET        shift and go to state 132
    ID              shift and go to state 148

    param_substitution_list        shift and go to state 219
    width                          shift and go to state 220
    param_substitution             shift and go to state 147

state 79

    (8) pragma -> LPAREN TIMES ID TIMES RPAREN .

    MODULE          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LPAREN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    $end            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDMODULE       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENERATE        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INTEGER         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REAL            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    PARAMETER       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LOCALPARAM      reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENVAR          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ASSIGN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INITIAL         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ID              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SENS_OR         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FUNCTION        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TASK            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INPUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    OUTPUT          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INOUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TRI             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REG             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    WIRE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SIGNED          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY0         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY1         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDGENERATE     reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    IF              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FOR             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ELSE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    END             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)


state 80

    (154) expression -> LPAREN . expression RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 222
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 81

    (377) identifier -> ID .

    LBRACKET        reduce using rule 377 (identifier -> ID .)
    LPAREN          reduce using rule 377 (identifier -> ID .)
    DOT             reduce using rule 377 (identifier -> ID .)
    TIMES           reduce using rule 377 (identifier -> ID .)
    POWER           reduce using rule 377 (identifier -> ID .)
    DIVIDE          reduce using rule 377 (identifier -> ID .)
    MOD             reduce using rule 377 (identifier -> ID .)
    PLUS            reduce using rule 377 (identifier -> ID .)
    MINUS           reduce using rule 377 (identifier -> ID .)
    LSHIFT          reduce using rule 377 (identifier -> ID .)
    RSHIFT          reduce using rule 377 (identifier -> ID .)
    LSHIFTA         reduce using rule 377 (identifier -> ID .)
    RSHIFTA         reduce using rule 377 (identifier -> ID .)
    LT              reduce using rule 377 (identifier -> ID .)
    GT              reduce using rule 377 (identifier -> ID .)
    LE              reduce using rule 377 (identifier -> ID .)
    GE              reduce using rule 377 (identifier -> ID .)
    EQ              reduce using rule 377 (identifier -> ID .)
    NE              reduce using rule 377 (identifier -> ID .)
    EQL             reduce using rule 377 (identifier -> ID .)
    NEL             reduce using rule 377 (identifier -> ID .)
    AND             reduce using rule 377 (identifier -> ID .)
    XOR             reduce using rule 377 (identifier -> ID .)
    XNOR            reduce using rule 377 (identifier -> ID .)
    OR              reduce using rule 377 (identifier -> ID .)
    LAND            reduce using rule 377 (identifier -> ID .)
    LOR             reduce using rule 377 (identifier -> ID .)
    COND            reduce using rule 377 (identifier -> ID .)
    EQUALS          reduce using rule 377 (identifier -> ID .)
    RPAREN          reduce using rule 377 (identifier -> ID .)
    LBRACE          reduce using rule 377 (identifier -> ID .)
    RBRACE          reduce using rule 377 (identifier -> ID .)
    COMMA           reduce using rule 377 (identifier -> ID .)
    COLON           reduce using rule 377 (identifier -> ID .)
    SEMICOLON       reduce using rule 377 (identifier -> ID .)
    PLUSCOLON       reduce using rule 377 (identifier -> ID .)
    MINUSCOLON      reduce using rule 377 (identifier -> ID .)
    RBRACKET        reduce using rule 377 (identifier -> ID .)
    ID              reduce using rule 377 (identifier -> ID .)
    LNOT            reduce using rule 377 (identifier -> ID .)
    NOT             reduce using rule 377 (identifier -> ID .)
    NAND            reduce using rule 377 (identifier -> ID .)
    NOR             reduce using rule 377 (identifier -> ID .)
    DOLLER          reduce using rule 377 (identifier -> ID .)
    INTNUMBER_DEC   reduce using rule 377 (identifier -> ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 377 (identifier -> ID .)
    INTNUMBER_BIN   reduce using rule 377 (identifier -> ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 377 (identifier -> ID .)
    INTNUMBER_OCT   reduce using rule 377 (identifier -> ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 377 (identifier -> ID .)
    INTNUMBER_HEX   reduce using rule 377 (identifier -> ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 377 (identifier -> ID .)
    FLOATNUMBER     reduce using rule 377 (identifier -> ID .)
    STRING_LITERAL  reduce using rule 377 (identifier -> ID .)
    IF              reduce using rule 377 (identifier -> ID .)
    CASE            reduce using rule 377 (identifier -> ID .)
    CASEX           reduce using rule 377 (identifier -> ID .)
    FOR             reduce using rule 377 (identifier -> ID .)
    WHILE           reduce using rule 377 (identifier -> ID .)
    WAIT            reduce using rule 377 (identifier -> ID .)
    FOREVER         reduce using rule 377 (identifier -> ID .)
    BEGIN           reduce using rule 377 (identifier -> ID .)
    FORK            reduce using rule 377 (identifier -> ID .)
    DELAY           reduce using rule 377 (identifier -> ID .)
    AT              reduce using rule 377 (identifier -> ID .)
    DISABLE         reduce using rule 377 (identifier -> ID .)
    SENS_OR         reduce using rule 377 (identifier -> ID .)


state 82

    (7) pragma -> LPAREN TIMES ID EQUALS expression . TIMES RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           shift and go to state 223
    POWER           shift and go to state 224
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 83

    (119) expression -> MINUS . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 248
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 84

    (120) expression -> PLUS . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 249
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 85

    (121) expression -> LNOT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 250
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 86

    (122) expression -> NOT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 251
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 87

    (123) expression -> AND . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 252
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 88

    (124) expression -> NAND . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 253
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 89

    (125) expression -> NOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 254
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 90

    (126) expression -> OR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 255
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 91

    (127) expression -> XOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 256
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 92

    (128) expression -> XNOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 257
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 93

    (155) expression -> concat .

    TIMES           reduce using rule 155 (expression -> concat .)
    POWER           reduce using rule 155 (expression -> concat .)
    DIVIDE          reduce using rule 155 (expression -> concat .)
    MOD             reduce using rule 155 (expression -> concat .)
    PLUS            reduce using rule 155 (expression -> concat .)
    MINUS           reduce using rule 155 (expression -> concat .)
    LSHIFT          reduce using rule 155 (expression -> concat .)
    RSHIFT          reduce using rule 155 (expression -> concat .)
    LSHIFTA         reduce using rule 155 (expression -> concat .)
    RSHIFTA         reduce using rule 155 (expression -> concat .)
    LT              reduce using rule 155 (expression -> concat .)
    GT              reduce using rule 155 (expression -> concat .)
    LE              reduce using rule 155 (expression -> concat .)
    GE              reduce using rule 155 (expression -> concat .)
    EQ              reduce using rule 155 (expression -> concat .)
    NE              reduce using rule 155 (expression -> concat .)
    EQL             reduce using rule 155 (expression -> concat .)
    NEL             reduce using rule 155 (expression -> concat .)
    AND             reduce using rule 155 (expression -> concat .)
    XOR             reduce using rule 155 (expression -> concat .)
    XNOR            reduce using rule 155 (expression -> concat .)
    OR              reduce using rule 155 (expression -> concat .)
    LAND            reduce using rule 155 (expression -> concat .)
    LOR             reduce using rule 155 (expression -> concat .)
    COND            reduce using rule 155 (expression -> concat .)
    RPAREN          reduce using rule 155 (expression -> concat .)
    LBRACE          reduce using rule 155 (expression -> concat .)
    RBRACE          reduce using rule 155 (expression -> concat .)
    COMMA           reduce using rule 155 (expression -> concat .)
    COLON           reduce using rule 155 (expression -> concat .)
    SEMICOLON       reduce using rule 155 (expression -> concat .)
    PLUSCOLON       reduce using rule 155 (expression -> concat .)
    MINUSCOLON      reduce using rule 155 (expression -> concat .)
    RBRACKET        reduce using rule 155 (expression -> concat .)


state 94

    (156) expression -> repeat .

    TIMES           reduce using rule 156 (expression -> repeat .)
    POWER           reduce using rule 156 (expression -> repeat .)
    DIVIDE          reduce using rule 156 (expression -> repeat .)
    MOD             reduce using rule 156 (expression -> repeat .)
    PLUS            reduce using rule 156 (expression -> repeat .)
    MINUS           reduce using rule 156 (expression -> repeat .)
    LSHIFT          reduce using rule 156 (expression -> repeat .)
    RSHIFT          reduce using rule 156 (expression -> repeat .)
    LSHIFTA         reduce using rule 156 (expression -> repeat .)
    RSHIFTA         reduce using rule 156 (expression -> repeat .)
    LT              reduce using rule 156 (expression -> repeat .)
    GT              reduce using rule 156 (expression -> repeat .)
    LE              reduce using rule 156 (expression -> repeat .)
    GE              reduce using rule 156 (expression -> repeat .)
    EQ              reduce using rule 156 (expression -> repeat .)
    NE              reduce using rule 156 (expression -> repeat .)
    EQL             reduce using rule 156 (expression -> repeat .)
    NEL             reduce using rule 156 (expression -> repeat .)
    AND             reduce using rule 156 (expression -> repeat .)
    XOR             reduce using rule 156 (expression -> repeat .)
    XNOR            reduce using rule 156 (expression -> repeat .)
    OR              reduce using rule 156 (expression -> repeat .)
    LAND            reduce using rule 156 (expression -> repeat .)
    LOR             reduce using rule 156 (expression -> repeat .)
    COND            reduce using rule 156 (expression -> repeat .)
    RPAREN          reduce using rule 156 (expression -> repeat .)
    LBRACE          reduce using rule 156 (expression -> repeat .)
    RBRACE          reduce using rule 156 (expression -> repeat .)
    COMMA           reduce using rule 156 (expression -> repeat .)
    COLON           reduce using rule 156 (expression -> repeat .)
    SEMICOLON       reduce using rule 156 (expression -> repeat .)
    PLUSCOLON       reduce using rule 156 (expression -> repeat .)
    MINUSCOLON      reduce using rule 156 (expression -> repeat .)
    RBRACKET        reduce using rule 156 (expression -> repeat .)


state 95

    (157) expression -> partselect .

    TIMES           reduce using rule 157 (expression -> partselect .)
    POWER           reduce using rule 157 (expression -> partselect .)
    DIVIDE          reduce using rule 157 (expression -> partselect .)
    MOD             reduce using rule 157 (expression -> partselect .)
    PLUS            reduce using rule 157 (expression -> partselect .)
    MINUS           reduce using rule 157 (expression -> partselect .)
    LSHIFT          reduce using rule 157 (expression -> partselect .)
    RSHIFT          reduce using rule 157 (expression -> partselect .)
    LSHIFTA         reduce using rule 157 (expression -> partselect .)
    RSHIFTA         reduce using rule 157 (expression -> partselect .)
    LT              reduce using rule 157 (expression -> partselect .)
    GT              reduce using rule 157 (expression -> partselect .)
    LE              reduce using rule 157 (expression -> partselect .)
    GE              reduce using rule 157 (expression -> partselect .)
    EQ              reduce using rule 157 (expression -> partselect .)
    NE              reduce using rule 157 (expression -> partselect .)
    EQL             reduce using rule 157 (expression -> partselect .)
    NEL             reduce using rule 157 (expression -> partselect .)
    AND             reduce using rule 157 (expression -> partselect .)
    XOR             reduce using rule 157 (expression -> partselect .)
    XNOR            reduce using rule 157 (expression -> partselect .)
    OR              reduce using rule 157 (expression -> partselect .)
    LAND            reduce using rule 157 (expression -> partselect .)
    LOR             reduce using rule 157 (expression -> partselect .)
    COND            reduce using rule 157 (expression -> partselect .)
    RPAREN          reduce using rule 157 (expression -> partselect .)
    LBRACE          reduce using rule 157 (expression -> partselect .)
    RBRACE          reduce using rule 157 (expression -> partselect .)
    COMMA           reduce using rule 157 (expression -> partselect .)
    COLON           reduce using rule 157 (expression -> partselect .)
    SEMICOLON       reduce using rule 157 (expression -> partselect .)
    PLUSCOLON       reduce using rule 157 (expression -> partselect .)
    MINUSCOLON      reduce using rule 157 (expression -> partselect .)
    RBRACKET        reduce using rule 157 (expression -> partselect .)


state 96

    (158) expression -> pointer .
    (170) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (171) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (174) pointer -> pointer . LBRACKET expression RBRACKET
    (380) scope -> pointer . DOT

    TIMES           reduce using rule 158 (expression -> pointer .)
    POWER           reduce using rule 158 (expression -> pointer .)
    DIVIDE          reduce using rule 158 (expression -> pointer .)
    MOD             reduce using rule 158 (expression -> pointer .)
    PLUS            reduce using rule 158 (expression -> pointer .)
    MINUS           reduce using rule 158 (expression -> pointer .)
    LSHIFT          reduce using rule 158 (expression -> pointer .)
    RSHIFT          reduce using rule 158 (expression -> pointer .)
    LSHIFTA         reduce using rule 158 (expression -> pointer .)
    RSHIFTA         reduce using rule 158 (expression -> pointer .)
    LT              reduce using rule 158 (expression -> pointer .)
    GT              reduce using rule 158 (expression -> pointer .)
    LE              reduce using rule 158 (expression -> pointer .)
    GE              reduce using rule 158 (expression -> pointer .)
    EQ              reduce using rule 158 (expression -> pointer .)
    NE              reduce using rule 158 (expression -> pointer .)
    EQL             reduce using rule 158 (expression -> pointer .)
    NEL             reduce using rule 158 (expression -> pointer .)
    AND             reduce using rule 158 (expression -> pointer .)
    XOR             reduce using rule 158 (expression -> pointer .)
    XNOR            reduce using rule 158 (expression -> pointer .)
    OR              reduce using rule 158 (expression -> pointer .)
    LAND            reduce using rule 158 (expression -> pointer .)
    LOR             reduce using rule 158 (expression -> pointer .)
    COND            reduce using rule 158 (expression -> pointer .)
    RPAREN          reduce using rule 158 (expression -> pointer .)
    LBRACE          reduce using rule 158 (expression -> pointer .)
    RBRACE          reduce using rule 158 (expression -> pointer .)
    COMMA           reduce using rule 158 (expression -> pointer .)
    COLON           reduce using rule 158 (expression -> pointer .)
    SEMICOLON       reduce using rule 158 (expression -> pointer .)
    PLUSCOLON       reduce using rule 158 (expression -> pointer .)
    MINUSCOLON      reduce using rule 158 (expression -> pointer .)
    RBRACKET        reduce using rule 158 (expression -> pointer .)
    LBRACKET        shift and go to state 258
    DOT             shift and go to state 259


state 97

    (159) expression -> functioncall .

    TIMES           reduce using rule 159 (expression -> functioncall .)
    POWER           reduce using rule 159 (expression -> functioncall .)
    DIVIDE          reduce using rule 159 (expression -> functioncall .)
    MOD             reduce using rule 159 (expression -> functioncall .)
    PLUS            reduce using rule 159 (expression -> functioncall .)
    MINUS           reduce using rule 159 (expression -> functioncall .)
    LSHIFT          reduce using rule 159 (expression -> functioncall .)
    RSHIFT          reduce using rule 159 (expression -> functioncall .)
    LSHIFTA         reduce using rule 159 (expression -> functioncall .)
    RSHIFTA         reduce using rule 159 (expression -> functioncall .)
    LT              reduce using rule 159 (expression -> functioncall .)
    GT              reduce using rule 159 (expression -> functioncall .)
    LE              reduce using rule 159 (expression -> functioncall .)
    GE              reduce using rule 159 (expression -> functioncall .)
    EQ              reduce using rule 159 (expression -> functioncall .)
    NE              reduce using rule 159 (expression -> functioncall .)
    EQL             reduce using rule 159 (expression -> functioncall .)
    NEL             reduce using rule 159 (expression -> functioncall .)
    AND             reduce using rule 159 (expression -> functioncall .)
    XOR             reduce using rule 159 (expression -> functioncall .)
    XNOR            reduce using rule 159 (expression -> functioncall .)
    OR              reduce using rule 159 (expression -> functioncall .)
    LAND            reduce using rule 159 (expression -> functioncall .)
    LOR             reduce using rule 159 (expression -> functioncall .)
    COND            reduce using rule 159 (expression -> functioncall .)
    RPAREN          reduce using rule 159 (expression -> functioncall .)
    LBRACE          reduce using rule 159 (expression -> functioncall .)
    RBRACE          reduce using rule 159 (expression -> functioncall .)
    COMMA           reduce using rule 159 (expression -> functioncall .)
    COLON           reduce using rule 159 (expression -> functioncall .)
    SEMICOLON       reduce using rule 159 (expression -> functioncall .)
    PLUSCOLON       reduce using rule 159 (expression -> functioncall .)
    MINUSCOLON      reduce using rule 159 (expression -> functioncall .)
    RBRACKET        reduce using rule 159 (expression -> functioncall .)


state 98

    (160) expression -> systemcall .

    TIMES           reduce using rule 160 (expression -> systemcall .)
    POWER           reduce using rule 160 (expression -> systemcall .)
    DIVIDE          reduce using rule 160 (expression -> systemcall .)
    MOD             reduce using rule 160 (expression -> systemcall .)
    PLUS            reduce using rule 160 (expression -> systemcall .)
    MINUS           reduce using rule 160 (expression -> systemcall .)
    LSHIFT          reduce using rule 160 (expression -> systemcall .)
    RSHIFT          reduce using rule 160 (expression -> systemcall .)
    LSHIFTA         reduce using rule 160 (expression -> systemcall .)
    RSHIFTA         reduce using rule 160 (expression -> systemcall .)
    LT              reduce using rule 160 (expression -> systemcall .)
    GT              reduce using rule 160 (expression -> systemcall .)
    LE              reduce using rule 160 (expression -> systemcall .)
    GE              reduce using rule 160 (expression -> systemcall .)
    EQ              reduce using rule 160 (expression -> systemcall .)
    NE              reduce using rule 160 (expression -> systemcall .)
    EQL             reduce using rule 160 (expression -> systemcall .)
    NEL             reduce using rule 160 (expression -> systemcall .)
    AND             reduce using rule 160 (expression -> systemcall .)
    XOR             reduce using rule 160 (expression -> systemcall .)
    XNOR            reduce using rule 160 (expression -> systemcall .)
    OR              reduce using rule 160 (expression -> systemcall .)
    LAND            reduce using rule 160 (expression -> systemcall .)
    LOR             reduce using rule 160 (expression -> systemcall .)
    COND            reduce using rule 160 (expression -> systemcall .)
    RPAREN          reduce using rule 160 (expression -> systemcall .)
    LBRACE          reduce using rule 160 (expression -> systemcall .)
    RBRACE          reduce using rule 160 (expression -> systemcall .)
    COMMA           reduce using rule 160 (expression -> systemcall .)
    COLON           reduce using rule 160 (expression -> systemcall .)
    SEMICOLON       reduce using rule 160 (expression -> systemcall .)
    PLUSCOLON       reduce using rule 160 (expression -> systemcall .)
    MINUSCOLON      reduce using rule 160 (expression -> systemcall .)
    RBRACKET        reduce using rule 160 (expression -> systemcall .)


state 99

    (161) expression -> identifier .
    (167) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (168) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (358) functioncall -> identifier . LPAREN func_args RPAREN
    (379) scope -> identifier . DOT

    TIMES           reduce using rule 161 (expression -> identifier .)
    POWER           reduce using rule 161 (expression -> identifier .)
    DIVIDE          reduce using rule 161 (expression -> identifier .)
    MOD             reduce using rule 161 (expression -> identifier .)
    PLUS            reduce using rule 161 (expression -> identifier .)
    MINUS           reduce using rule 161 (expression -> identifier .)
    LSHIFT          reduce using rule 161 (expression -> identifier .)
    RSHIFT          reduce using rule 161 (expression -> identifier .)
    LSHIFTA         reduce using rule 161 (expression -> identifier .)
    RSHIFTA         reduce using rule 161 (expression -> identifier .)
    LT              reduce using rule 161 (expression -> identifier .)
    GT              reduce using rule 161 (expression -> identifier .)
    LE              reduce using rule 161 (expression -> identifier .)
    GE              reduce using rule 161 (expression -> identifier .)
    EQ              reduce using rule 161 (expression -> identifier .)
    NE              reduce using rule 161 (expression -> identifier .)
    EQL             reduce using rule 161 (expression -> identifier .)
    NEL             reduce using rule 161 (expression -> identifier .)
    AND             reduce using rule 161 (expression -> identifier .)
    XOR             reduce using rule 161 (expression -> identifier .)
    XNOR            reduce using rule 161 (expression -> identifier .)
    OR              reduce using rule 161 (expression -> identifier .)
    LAND            reduce using rule 161 (expression -> identifier .)
    LOR             reduce using rule 161 (expression -> identifier .)
    COND            reduce using rule 161 (expression -> identifier .)
    RPAREN          reduce using rule 161 (expression -> identifier .)
    LBRACE          reduce using rule 161 (expression -> identifier .)
    RBRACE          reduce using rule 161 (expression -> identifier .)
    COMMA           reduce using rule 161 (expression -> identifier .)
    COLON           reduce using rule 161 (expression -> identifier .)
    SEMICOLON       reduce using rule 161 (expression -> identifier .)
    PLUSCOLON       reduce using rule 161 (expression -> identifier .)
    MINUSCOLON      reduce using rule 161 (expression -> identifier .)
    RBRACKET        reduce using rule 161 (expression -> identifier .)
    LBRACKET        shift and go to state 260
    LPAREN          shift and go to state 261
    DOT             shift and go to state 262


state 100

    (162) expression -> const_expression .

    TIMES           reduce using rule 162 (expression -> const_expression .)
    POWER           reduce using rule 162 (expression -> const_expression .)
    DIVIDE          reduce using rule 162 (expression -> const_expression .)
    MOD             reduce using rule 162 (expression -> const_expression .)
    PLUS            reduce using rule 162 (expression -> const_expression .)
    MINUS           reduce using rule 162 (expression -> const_expression .)
    LSHIFT          reduce using rule 162 (expression -> const_expression .)
    RSHIFT          reduce using rule 162 (expression -> const_expression .)
    LSHIFTA         reduce using rule 162 (expression -> const_expression .)
    RSHIFTA         reduce using rule 162 (expression -> const_expression .)
    LT              reduce using rule 162 (expression -> const_expression .)
    GT              reduce using rule 162 (expression -> const_expression .)
    LE              reduce using rule 162 (expression -> const_expression .)
    GE              reduce using rule 162 (expression -> const_expression .)
    EQ              reduce using rule 162 (expression -> const_expression .)
    NE              reduce using rule 162 (expression -> const_expression .)
    EQL             reduce using rule 162 (expression -> const_expression .)
    NEL             reduce using rule 162 (expression -> const_expression .)
    AND             reduce using rule 162 (expression -> const_expression .)
    XOR             reduce using rule 162 (expression -> const_expression .)
    XNOR            reduce using rule 162 (expression -> const_expression .)
    OR              reduce using rule 162 (expression -> const_expression .)
    LAND            reduce using rule 162 (expression -> const_expression .)
    LOR             reduce using rule 162 (expression -> const_expression .)
    COND            reduce using rule 162 (expression -> const_expression .)
    RPAREN          reduce using rule 162 (expression -> const_expression .)
    LBRACE          reduce using rule 162 (expression -> const_expression .)
    RBRACE          reduce using rule 162 (expression -> const_expression .)
    COMMA           reduce using rule 162 (expression -> const_expression .)
    COLON           reduce using rule 162 (expression -> const_expression .)
    SEMICOLON       reduce using rule 162 (expression -> const_expression .)
    PLUSCOLON       reduce using rule 162 (expression -> const_expression .)
    MINUSCOLON      reduce using rule 162 (expression -> const_expression .)
    RBRACKET        reduce using rule 162 (expression -> const_expression .)


state 101

    (163) concat -> LBRACE . concatlist RBRACE
    (166) repeat -> LBRACE . expression concat RBRACE
    (164) concatlist -> . concatlist COMMA expression
    (165) concatlist -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    concatlist                     shift and go to state 263
    expression                     shift and go to state 264
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 102

    (336) systemcall -> DOLLER . ID
    (337) systemcall -> DOLLER . ID LPAREN sysargs RPAREN
    (338) systemcall -> DOLLER . SIGNED LPAREN sysargs RPAREN

    ID              shift and go to state 265
    SIGNED          shift and go to state 266


state 103

    (378) identifier -> scope . ID

    ID              shift and go to state 267


state 104

    (175) const_expression -> intnumber .

    TIMES           reduce using rule 175 (const_expression -> intnumber .)
    POWER           reduce using rule 175 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 175 (const_expression -> intnumber .)
    MOD             reduce using rule 175 (const_expression -> intnumber .)
    PLUS            reduce using rule 175 (const_expression -> intnumber .)
    MINUS           reduce using rule 175 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 175 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 175 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 175 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 175 (const_expression -> intnumber .)
    LT              reduce using rule 175 (const_expression -> intnumber .)
    GT              reduce using rule 175 (const_expression -> intnumber .)
    LE              reduce using rule 175 (const_expression -> intnumber .)
    GE              reduce using rule 175 (const_expression -> intnumber .)
    EQ              reduce using rule 175 (const_expression -> intnumber .)
    NE              reduce using rule 175 (const_expression -> intnumber .)
    EQL             reduce using rule 175 (const_expression -> intnumber .)
    NEL             reduce using rule 175 (const_expression -> intnumber .)
    AND             reduce using rule 175 (const_expression -> intnumber .)
    XOR             reduce using rule 175 (const_expression -> intnumber .)
    XNOR            reduce using rule 175 (const_expression -> intnumber .)
    OR              reduce using rule 175 (const_expression -> intnumber .)
    LAND            reduce using rule 175 (const_expression -> intnumber .)
    LOR             reduce using rule 175 (const_expression -> intnumber .)
    COND            reduce using rule 175 (const_expression -> intnumber .)
    RPAREN          reduce using rule 175 (const_expression -> intnumber .)
    LBRACE          reduce using rule 175 (const_expression -> intnumber .)
    RBRACE          reduce using rule 175 (const_expression -> intnumber .)
    COMMA           reduce using rule 175 (const_expression -> intnumber .)
    COLON           reduce using rule 175 (const_expression -> intnumber .)
    SEMICOLON       reduce using rule 175 (const_expression -> intnumber .)
    PLUSCOLON       reduce using rule 175 (const_expression -> intnumber .)
    MINUSCOLON      reduce using rule 175 (const_expression -> intnumber .)
    RBRACKET        reduce using rule 175 (const_expression -> intnumber .)


state 105

    (176) const_expression -> floatnumber .

    TIMES           reduce using rule 176 (const_expression -> floatnumber .)
    POWER           reduce using rule 176 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 176 (const_expression -> floatnumber .)
    MOD             reduce using rule 176 (const_expression -> floatnumber .)
    PLUS            reduce using rule 176 (const_expression -> floatnumber .)
    MINUS           reduce using rule 176 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 176 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 176 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 176 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 176 (const_expression -> floatnumber .)
    LT              reduce using rule 176 (const_expression -> floatnumber .)
    GT              reduce using rule 176 (const_expression -> floatnumber .)
    LE              reduce using rule 176 (const_expression -> floatnumber .)
    GE              reduce using rule 176 (const_expression -> floatnumber .)
    EQ              reduce using rule 176 (const_expression -> floatnumber .)
    NE              reduce using rule 176 (const_expression -> floatnumber .)
    EQL             reduce using rule 176 (const_expression -> floatnumber .)
    NEL             reduce using rule 176 (const_expression -> floatnumber .)
    AND             reduce using rule 176 (const_expression -> floatnumber .)
    XOR             reduce using rule 176 (const_expression -> floatnumber .)
    XNOR            reduce using rule 176 (const_expression -> floatnumber .)
    OR              reduce using rule 176 (const_expression -> floatnumber .)
    LAND            reduce using rule 176 (const_expression -> floatnumber .)
    LOR             reduce using rule 176 (const_expression -> floatnumber .)
    COND            reduce using rule 176 (const_expression -> floatnumber .)
    RPAREN          reduce using rule 176 (const_expression -> floatnumber .)
    LBRACE          reduce using rule 176 (const_expression -> floatnumber .)
    RBRACE          reduce using rule 176 (const_expression -> floatnumber .)
    COMMA           reduce using rule 176 (const_expression -> floatnumber .)
    COLON           reduce using rule 176 (const_expression -> floatnumber .)
    SEMICOLON       reduce using rule 176 (const_expression -> floatnumber .)
    PLUSCOLON       reduce using rule 176 (const_expression -> floatnumber .)
    MINUSCOLON      reduce using rule 176 (const_expression -> floatnumber .)
    RBRACKET        reduce using rule 176 (const_expression -> floatnumber .)


state 106

    (177) const_expression -> stringliteral .

    TIMES           reduce using rule 177 (const_expression -> stringliteral .)
    POWER           reduce using rule 177 (const_expression -> stringliteral .)
    DIVIDE          reduce using rule 177 (const_expression -> stringliteral .)
    MOD             reduce using rule 177 (const_expression -> stringliteral .)
    PLUS            reduce using rule 177 (const_expression -> stringliteral .)
    MINUS           reduce using rule 177 (const_expression -> stringliteral .)
    LSHIFT          reduce using rule 177 (const_expression -> stringliteral .)
    RSHIFT          reduce using rule 177 (const_expression -> stringliteral .)
    LSHIFTA         reduce using rule 177 (const_expression -> stringliteral .)
    RSHIFTA         reduce using rule 177 (const_expression -> stringliteral .)
    LT              reduce using rule 177 (const_expression -> stringliteral .)
    GT              reduce using rule 177 (const_expression -> stringliteral .)
    LE              reduce using rule 177 (const_expression -> stringliteral .)
    GE              reduce using rule 177 (const_expression -> stringliteral .)
    EQ              reduce using rule 177 (const_expression -> stringliteral .)
    NE              reduce using rule 177 (const_expression -> stringliteral .)
    EQL             reduce using rule 177 (const_expression -> stringliteral .)
    NEL             reduce using rule 177 (const_expression -> stringliteral .)
    AND             reduce using rule 177 (const_expression -> stringliteral .)
    XOR             reduce using rule 177 (const_expression -> stringliteral .)
    XNOR            reduce using rule 177 (const_expression -> stringliteral .)
    OR              reduce using rule 177 (const_expression -> stringliteral .)
    LAND            reduce using rule 177 (const_expression -> stringliteral .)
    LOR             reduce using rule 177 (const_expression -> stringliteral .)
    COND            reduce using rule 177 (const_expression -> stringliteral .)
    RPAREN          reduce using rule 177 (const_expression -> stringliteral .)
    LBRACE          reduce using rule 177 (const_expression -> stringliteral .)
    RBRACE          reduce using rule 177 (const_expression -> stringliteral .)
    COMMA           reduce using rule 177 (const_expression -> stringliteral .)
    COLON           reduce using rule 177 (const_expression -> stringliteral .)
    SEMICOLON       reduce using rule 177 (const_expression -> stringliteral .)
    PLUSCOLON       reduce using rule 177 (const_expression -> stringliteral .)
    MINUSCOLON      reduce using rule 177 (const_expression -> stringliteral .)
    RBRACKET        reduce using rule 177 (const_expression -> stringliteral .)


state 107

    (179) intnumber -> INTNUMBER_DEC .

    TIMES           reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    POWER           reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    DIVIDE          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    MOD             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    PLUS            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    MINUS           reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LSHIFT          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    RSHIFT          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LT              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    GT              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LE              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    GE              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    EQ              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    NE              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    EQL             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    NEL             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    AND             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    XOR             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    XNOR            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    OR              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LAND            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LOR             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    COND            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    RPAREN          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LBRACE          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    RBRACE          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    COMMA           reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    COLON           reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    RBRACKET        reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    ID              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LNOT            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    NOT             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    NAND            reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    NOR             reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    LPAREN          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    DOLLER          reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 179 (intnumber -> INTNUMBER_DEC .)
    IF              reduce using rule 179 (intnumber -> INTNUMBER_DEC .)


state 108

    (180) intnumber -> SIGNED_INTNUMBER_DEC .

    TIMES           reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    POWER           reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DIVIDE          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MOD             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUS            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUS           reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFT          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFT          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LT              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GT              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LE              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GE              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQ              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NE              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQL             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NEL             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    AND             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XOR             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XNOR            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    OR              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LAND            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LOR             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COND            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RPAREN          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LBRACE          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACE          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COMMA           reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COLON           reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACKET        reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    ID              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LNOT            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOT             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NAND            reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOR             reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LPAREN          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DOLLER          reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)
    IF              reduce using rule 180 (intnumber -> SIGNED_INTNUMBER_DEC .)


state 109

    (181) intnumber -> INTNUMBER_BIN .

    TIMES           reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    POWER           reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    DIVIDE          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    MOD             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    PLUS            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    MINUS           reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LSHIFT          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    RSHIFT          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LT              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    GT              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LE              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    GE              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    EQ              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    NE              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    EQL             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    NEL             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    AND             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    XOR             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    XNOR            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    OR              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LAND            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LOR             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    COND            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    RPAREN          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LBRACE          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    RBRACE          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    COMMA           reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    COLON           reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    RBRACKET        reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    ID              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LNOT            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    NOT             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    NAND            reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    NOR             reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    LPAREN          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    DOLLER          reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 181 (intnumber -> INTNUMBER_BIN .)
    IF              reduce using rule 181 (intnumber -> INTNUMBER_BIN .)


state 110

    (182) intnumber -> SIGNED_INTNUMBER_BIN .

    TIMES           reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    POWER           reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DIVIDE          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MOD             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUS            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUS           reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFT          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFT          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LT              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GT              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LE              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GE              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQ              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NE              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQL             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NEL             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    AND             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XOR             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XNOR            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    OR              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LAND            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LOR             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COND            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RPAREN          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LBRACE          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACE          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COMMA           reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COLON           reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACKET        reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    ID              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LNOT            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOT             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NAND            reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOR             reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LPAREN          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DOLLER          reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)
    IF              reduce using rule 182 (intnumber -> SIGNED_INTNUMBER_BIN .)


state 111

    (183) intnumber -> INTNUMBER_OCT .

    TIMES           reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    POWER           reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    DIVIDE          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    MOD             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    PLUS            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    MINUS           reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LSHIFT          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    RSHIFT          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LT              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    GT              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LE              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    GE              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    EQ              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    NE              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    EQL             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    NEL             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    AND             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    XOR             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    XNOR            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    OR              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LAND            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LOR             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    COND            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    RPAREN          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LBRACE          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    RBRACE          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    COMMA           reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    COLON           reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    RBRACKET        reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    ID              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LNOT            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    NOT             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    NAND            reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    NOR             reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    LPAREN          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    DOLLER          reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 183 (intnumber -> INTNUMBER_OCT .)
    IF              reduce using rule 183 (intnumber -> INTNUMBER_OCT .)


state 112

    (184) intnumber -> SIGNED_INTNUMBER_OCT .

    TIMES           reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    POWER           reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DIVIDE          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MOD             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUS            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUS           reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFT          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFT          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LT              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GT              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LE              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GE              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQ              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NE              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQL             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NEL             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    AND             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XOR             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XNOR            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    OR              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LAND            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LOR             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COND            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RPAREN          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LBRACE          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACE          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COMMA           reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COLON           reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACKET        reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    ID              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LNOT            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOT             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NAND            reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOR             reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LPAREN          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DOLLER          reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)
    IF              reduce using rule 184 (intnumber -> SIGNED_INTNUMBER_OCT .)


state 113

    (185) intnumber -> INTNUMBER_HEX .

    TIMES           reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    POWER           reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    DIVIDE          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    MOD             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    PLUS            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    MINUS           reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LSHIFT          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    RSHIFT          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LT              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    GT              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LE              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    GE              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    EQ              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    NE              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    EQL             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    NEL             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    AND             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    XOR             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    XNOR            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    OR              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LAND            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LOR             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    COND            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    RPAREN          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LBRACE          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    RBRACE          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    COMMA           reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    COLON           reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    RBRACKET        reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    ID              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LNOT            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    NOT             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    NAND            reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    NOR             reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    LPAREN          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    DOLLER          reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 185 (intnumber -> INTNUMBER_HEX .)
    IF              reduce using rule 185 (intnumber -> INTNUMBER_HEX .)


state 114

    (186) intnumber -> SIGNED_INTNUMBER_HEX .

    TIMES           reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    POWER           reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DIVIDE          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MOD             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUS            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUS           reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFT          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFT          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LT              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GT              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LE              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GE              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQ              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NE              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQL             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NEL             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    AND             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XOR             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XNOR            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    OR              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LAND            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LOR             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COND            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RPAREN          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LBRACE          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACE          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COMMA           reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COLON           reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACKET        reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    ID              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LNOT            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOT             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NAND            reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOR             reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LPAREN          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DOLLER          reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)
    IF              reduce using rule 186 (intnumber -> SIGNED_INTNUMBER_HEX .)


state 115

    (178) floatnumber -> FLOATNUMBER .

    TIMES           reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    POWER           reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    DIVIDE          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    MOD             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    PLUS            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    MINUS           reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LSHIFT          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    RSHIFT          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LSHIFTA         reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    RSHIFTA         reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LT              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    GT              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LE              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    GE              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    EQ              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    NE              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    EQL             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    NEL             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    AND             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    XOR             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    XNOR            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    OR              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LAND            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LOR             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    COND            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    RPAREN          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LBRACE          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    RBRACE          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    COMMA           reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    COLON           reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    PLUSCOLON       reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    MINUSCOLON      reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    RBRACKET        reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    ID              reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LNOT            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    NOT             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    NAND            reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    NOR             reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    LPAREN          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    DOLLER          reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_DEC   reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_DEC reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_BIN   reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_BIN reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_OCT   reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_OCT reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_HEX   reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_HEX reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    STRING_LITERAL  reduce using rule 178 (floatnumber -> FLOATNUMBER .)
    IF              reduce using rule 178 (floatnumber -> FLOATNUMBER .)


state 116

    (187) stringliteral -> STRING_LITERAL .

    TIMES           reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    POWER           reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    DIVIDE          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    MOD             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    PLUS            reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    MINUS           reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LSHIFT          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    RSHIFT          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LSHIFTA         reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    RSHIFTA         reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LT              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    GT              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LE              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    GE              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    EQ              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    NE              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    EQL             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    NEL             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    AND             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    XOR             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    XNOR            reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    OR              reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LAND            reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LOR             reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    COND            reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    RPAREN          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    LBRACE          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    RBRACE          reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    COMMA           reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    COLON           reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    PLUSCOLON       reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    MINUSCOLON      reduce using rule 187 (stringliteral -> STRING_LITERAL .)
    RBRACKET        reduce using rule 187 (stringliteral -> STRING_LITERAL .)


state 117

    (9) moduledef -> MODULE modulename paramlist portlist items ENDMODULE .

    MODULE          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    LPAREN          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    $end            reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)


state 118

    (51) items -> items item .

    ENDMODULE       reduce using rule 51 (items -> items item .)
    GENERATE        reduce using rule 51 (items -> items item .)
    INTEGER         reduce using rule 51 (items -> items item .)
    REAL            reduce using rule 51 (items -> items item .)
    PARAMETER       reduce using rule 51 (items -> items item .)
    LOCALPARAM      reduce using rule 51 (items -> items item .)
    GENVAR          reduce using rule 51 (items -> items item .)
    ASSIGN          reduce using rule 51 (items -> items item .)
    ALWAYS          reduce using rule 51 (items -> items item .)
    INITIAL         reduce using rule 51 (items -> items item .)
    ID              reduce using rule 51 (items -> items item .)
    SENS_OR         reduce using rule 51 (items -> items item .)
    FUNCTION        reduce using rule 51 (items -> items item .)
    TASK            reduce using rule 51 (items -> items item .)
    LPAREN          reduce using rule 51 (items -> items item .)
    INPUT           reduce using rule 51 (items -> items item .)
    OUTPUT          reduce using rule 51 (items -> items item .)
    INOUT           reduce using rule 51 (items -> items item .)
    TRI             reduce using rule 51 (items -> items item .)
    REG             reduce using rule 51 (items -> items item .)
    WIRE            reduce using rule 51 (items -> items item .)
    SIGNED          reduce using rule 51 (items -> items item .)
    SUPPLY0         reduce using rule 51 (items -> items item .)
    SUPPLY1         reduce using rule 51 (items -> items item .)


state 119

    (318) generate -> GENERATE generate_items . ENDGENERATE
    (320) generate_items -> generate_items . generate_item
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    ENDGENERATE     shift and go to state 268
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    generate_item                  shift and go to state 269
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 120

    (319) generate_items -> empty .

    ENDGENERATE     reduce using rule 319 (generate_items -> empty .)
    IF              reduce using rule 319 (generate_items -> empty .)
    FOR             reduce using rule 319 (generate_items -> empty .)
    INTEGER         reduce using rule 319 (generate_items -> empty .)
    REAL            reduce using rule 319 (generate_items -> empty .)
    PARAMETER       reduce using rule 319 (generate_items -> empty .)
    LOCALPARAM      reduce using rule 319 (generate_items -> empty .)
    GENVAR          reduce using rule 319 (generate_items -> empty .)
    ASSIGN          reduce using rule 319 (generate_items -> empty .)
    ALWAYS          reduce using rule 319 (generate_items -> empty .)
    INITIAL         reduce using rule 319 (generate_items -> empty .)
    ID              reduce using rule 319 (generate_items -> empty .)
    SENS_OR         reduce using rule 319 (generate_items -> empty .)
    FUNCTION        reduce using rule 319 (generate_items -> empty .)
    TASK            reduce using rule 319 (generate_items -> empty .)
    LPAREN          reduce using rule 319 (generate_items -> empty .)
    INPUT           reduce using rule 319 (generate_items -> empty .)
    OUTPUT          reduce using rule 319 (generate_items -> empty .)
    INOUT           reduce using rule 319 (generate_items -> empty .)
    TRI             reduce using rule 319 (generate_items -> empty .)
    REG             reduce using rule 319 (generate_items -> empty .)
    WIRE            reduce using rule 319 (generate_items -> empty .)
    SIGNED          reduce using rule 319 (generate_items -> empty .)
    SUPPLY0         reduce using rule 319 (generate_items -> empty .)
    SUPPLY1         reduce using rule 319 (generate_items -> empty .)
    END             reduce using rule 319 (generate_items -> empty .)


state 121

    (321) generate_items -> generate_item .

    ENDGENERATE     reduce using rule 321 (generate_items -> generate_item .)
    IF              reduce using rule 321 (generate_items -> generate_item .)
    FOR             reduce using rule 321 (generate_items -> generate_item .)
    INTEGER         reduce using rule 321 (generate_items -> generate_item .)
    REAL            reduce using rule 321 (generate_items -> generate_item .)
    PARAMETER       reduce using rule 321 (generate_items -> generate_item .)
    LOCALPARAM      reduce using rule 321 (generate_items -> generate_item .)
    GENVAR          reduce using rule 321 (generate_items -> generate_item .)
    ASSIGN          reduce using rule 321 (generate_items -> generate_item .)
    ALWAYS          reduce using rule 321 (generate_items -> generate_item .)
    INITIAL         reduce using rule 321 (generate_items -> generate_item .)
    ID              reduce using rule 321 (generate_items -> generate_item .)
    SENS_OR         reduce using rule 321 (generate_items -> generate_item .)
    FUNCTION        reduce using rule 321 (generate_items -> generate_item .)
    TASK            reduce using rule 321 (generate_items -> generate_item .)
    LPAREN          reduce using rule 321 (generate_items -> generate_item .)
    INPUT           reduce using rule 321 (generate_items -> generate_item .)
    OUTPUT          reduce using rule 321 (generate_items -> generate_item .)
    INOUT           reduce using rule 321 (generate_items -> generate_item .)
    TRI             reduce using rule 321 (generate_items -> generate_item .)
    REG             reduce using rule 321 (generate_items -> generate_item .)
    WIRE            reduce using rule 321 (generate_items -> generate_item .)
    SIGNED          reduce using rule 321 (generate_items -> generate_item .)
    SUPPLY0         reduce using rule 321 (generate_items -> generate_item .)
    SUPPLY1         reduce using rule 321 (generate_items -> generate_item .)
    END             reduce using rule 321 (generate_items -> generate_item .)


state 122

    (322) generate_item -> standard_item .

    ENDGENERATE     reduce using rule 322 (generate_item -> standard_item .)
    IF              reduce using rule 322 (generate_item -> standard_item .)
    FOR             reduce using rule 322 (generate_item -> standard_item .)
    INTEGER         reduce using rule 322 (generate_item -> standard_item .)
    REAL            reduce using rule 322 (generate_item -> standard_item .)
    PARAMETER       reduce using rule 322 (generate_item -> standard_item .)
    LOCALPARAM      reduce using rule 322 (generate_item -> standard_item .)
    GENVAR          reduce using rule 322 (generate_item -> standard_item .)
    ASSIGN          reduce using rule 322 (generate_item -> standard_item .)
    ALWAYS          reduce using rule 322 (generate_item -> standard_item .)
    INITIAL         reduce using rule 322 (generate_item -> standard_item .)
    ID              reduce using rule 322 (generate_item -> standard_item .)
    SENS_OR         reduce using rule 322 (generate_item -> standard_item .)
    FUNCTION        reduce using rule 322 (generate_item -> standard_item .)
    TASK            reduce using rule 322 (generate_item -> standard_item .)
    LPAREN          reduce using rule 322 (generate_item -> standard_item .)
    INPUT           reduce using rule 322 (generate_item -> standard_item .)
    OUTPUT          reduce using rule 322 (generate_item -> standard_item .)
    INOUT           reduce using rule 322 (generate_item -> standard_item .)
    TRI             reduce using rule 322 (generate_item -> standard_item .)
    REG             reduce using rule 322 (generate_item -> standard_item .)
    WIRE            reduce using rule 322 (generate_item -> standard_item .)
    SIGNED          reduce using rule 322 (generate_item -> standard_item .)
    SUPPLY0         reduce using rule 322 (generate_item -> standard_item .)
    SUPPLY1         reduce using rule 322 (generate_item -> standard_item .)
    ELSE            reduce using rule 322 (generate_item -> standard_item .)
    END             reduce using rule 322 (generate_item -> standard_item .)


state 123

    (323) generate_item -> generate_if .

    ENDGENERATE     reduce using rule 323 (generate_item -> generate_if .)
    IF              reduce using rule 323 (generate_item -> generate_if .)
    FOR             reduce using rule 323 (generate_item -> generate_if .)
    INTEGER         reduce using rule 323 (generate_item -> generate_if .)
    REAL            reduce using rule 323 (generate_item -> generate_if .)
    PARAMETER       reduce using rule 323 (generate_item -> generate_if .)
    LOCALPARAM      reduce using rule 323 (generate_item -> generate_if .)
    GENVAR          reduce using rule 323 (generate_item -> generate_if .)
    ASSIGN          reduce using rule 323 (generate_item -> generate_if .)
    ALWAYS          reduce using rule 323 (generate_item -> generate_if .)
    INITIAL         reduce using rule 323 (generate_item -> generate_if .)
    ID              reduce using rule 323 (generate_item -> generate_if .)
    SENS_OR         reduce using rule 323 (generate_item -> generate_if .)
    FUNCTION        reduce using rule 323 (generate_item -> generate_if .)
    TASK            reduce using rule 323 (generate_item -> generate_if .)
    LPAREN          reduce using rule 323 (generate_item -> generate_if .)
    INPUT           reduce using rule 323 (generate_item -> generate_if .)
    OUTPUT          reduce using rule 323 (generate_item -> generate_if .)
    INOUT           reduce using rule 323 (generate_item -> generate_if .)
    TRI             reduce using rule 323 (generate_item -> generate_if .)
    REG             reduce using rule 323 (generate_item -> generate_if .)
    WIRE            reduce using rule 323 (generate_item -> generate_if .)
    SIGNED          reduce using rule 323 (generate_item -> generate_if .)
    SUPPLY0         reduce using rule 323 (generate_item -> generate_if .)
    SUPPLY1         reduce using rule 323 (generate_item -> generate_if .)
    ELSE            reduce using rule 323 (generate_item -> generate_if .)
    END             reduce using rule 323 (generate_item -> generate_if .)


state 124

    (324) generate_item -> generate_for .

    ENDGENERATE     reduce using rule 324 (generate_item -> generate_for .)
    IF              reduce using rule 324 (generate_item -> generate_for .)
    FOR             reduce using rule 324 (generate_item -> generate_for .)
    INTEGER         reduce using rule 324 (generate_item -> generate_for .)
    REAL            reduce using rule 324 (generate_item -> generate_for .)
    PARAMETER       reduce using rule 324 (generate_item -> generate_for .)
    LOCALPARAM      reduce using rule 324 (generate_item -> generate_for .)
    GENVAR          reduce using rule 324 (generate_item -> generate_for .)
    ASSIGN          reduce using rule 324 (generate_item -> generate_for .)
    ALWAYS          reduce using rule 324 (generate_item -> generate_for .)
    INITIAL         reduce using rule 324 (generate_item -> generate_for .)
    ID              reduce using rule 324 (generate_item -> generate_for .)
    SENS_OR         reduce using rule 324 (generate_item -> generate_for .)
    FUNCTION        reduce using rule 324 (generate_item -> generate_for .)
    TASK            reduce using rule 324 (generate_item -> generate_for .)
    LPAREN          reduce using rule 324 (generate_item -> generate_for .)
    INPUT           reduce using rule 324 (generate_item -> generate_for .)
    OUTPUT          reduce using rule 324 (generate_item -> generate_for .)
    INOUT           reduce using rule 324 (generate_item -> generate_for .)
    TRI             reduce using rule 324 (generate_item -> generate_for .)
    REG             reduce using rule 324 (generate_item -> generate_for .)
    WIRE            reduce using rule 324 (generate_item -> generate_for .)
    SIGNED          reduce using rule 324 (generate_item -> generate_for .)
    SUPPLY0         reduce using rule 324 (generate_item -> generate_for .)
    SUPPLY1         reduce using rule 324 (generate_item -> generate_for .)
    ELSE            reduce using rule 324 (generate_item -> generate_for .)
    END             reduce using rule 324 (generate_item -> generate_for .)


state 125

    (327) generate_if -> IF . LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> IF . LPAREN cond RPAREN gif_true_item

    LPAREN          shift and go to state 270


state 126

    (333) generate_for -> FOR . LPAREN forpre forcond forpost RPAREN generate_forcontent

    LPAREN          shift and go to state 271


state 127

    (70) decl -> sigtypes declnamelist . SEMICOLON
    (72) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 272
    COMMA           shift and go to state 273


state 128

    (71) decl -> sigtypes width . declnamelist SEMICOLON
    (77) declassign -> sigtypes width . declassign_element SEMICOLON
    (72) declnamelist -> . declnamelist COMMA declname
    (73) declnamelist -> . declname
    (78) declassign_element -> . ID EQUALS rvalue
    (79) declassign_element -> . delays ID EQUALS delays rvalue
    (74) declname -> . ID
    (75) declname -> . ID length
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 133
    DELAY           shift and go to state 135

  ! ID              [ reduce using rule 385 (empty -> .) ]

    declnamelist                   shift and go to state 274
    declassign_element             shift and go to state 275
    declname                       shift and go to state 131
    delays                         shift and go to state 134
    empty                          shift and go to state 136

state 129

    (76) declassign -> sigtypes declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 276


state 130

    (31) sigtypes -> sigtypes sigtype .

    LBRACKET        reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    ID              reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    INPUT           reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    OUTPUT          reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    INOUT           reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    TRI             reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    REG             reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    WIRE            reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    SIGNED          reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    SUPPLY0         reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    SUPPLY1         reduce using rule 31 (sigtypes -> sigtypes sigtype .)
    DELAY           reduce using rule 31 (sigtypes -> sigtypes sigtype .)


state 131

    (73) declnamelist -> declname .

    SEMICOLON       reduce using rule 73 (declnamelist -> declname .)
    COMMA           reduce using rule 73 (declnamelist -> declname .)


state 132

    (49) width -> LBRACKET . expression COLON expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 277
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 133

    (78) declassign_element -> ID . EQUALS rvalue
    (74) declname -> ID .
    (75) declname -> ID . length
    (50) length -> . LBRACKET expression COLON expression RBRACKET

    EQUALS          shift and go to state 278
    SEMICOLON       reduce using rule 74 (declname -> ID .)
    COMMA           reduce using rule 74 (declname -> ID .)
    LBRACKET        shift and go to state 280

    length                         shift and go to state 279

state 134

    (79) declassign_element -> delays . ID EQUALS delays rvalue

    ID              shift and go to state 281


state 135

    (226) delays -> DELAY . LPAREN expression RPAREN
    (227) delays -> DELAY . identifier
    (228) delays -> DELAY . intnumber
    (229) delays -> DELAY . floatnumber
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET

    LPAREN          shift and go to state 282
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115

    identifier                     shift and go to state 283
    intnumber                      shift and go to state 284
    floatnumber                    shift and go to state 285
    scope                          shift and go to state 103
    pointer                        shift and go to state 286

state 136

    (230) delays -> empty .

    ID              reduce using rule 230 (delays -> empty .)
    LBRACE          reduce using rule 230 (delays -> empty .)
    MINUS           reduce using rule 230 (delays -> empty .)
    PLUS            reduce using rule 230 (delays -> empty .)
    LNOT            reduce using rule 230 (delays -> empty .)
    NOT             reduce using rule 230 (delays -> empty .)
    AND             reduce using rule 230 (delays -> empty .)
    NAND            reduce using rule 230 (delays -> empty .)
    NOR             reduce using rule 230 (delays -> empty .)
    OR              reduce using rule 230 (delays -> empty .)
    XOR             reduce using rule 230 (delays -> empty .)
    XNOR            reduce using rule 230 (delays -> empty .)
    LPAREN          reduce using rule 230 (delays -> empty .)
    DOLLER          reduce using rule 230 (delays -> empty .)
    INTNUMBER_DEC   reduce using rule 230 (delays -> empty .)
    SIGNED_INTNUMBER_DEC reduce using rule 230 (delays -> empty .)
    INTNUMBER_BIN   reduce using rule 230 (delays -> empty .)
    SIGNED_INTNUMBER_BIN reduce using rule 230 (delays -> empty .)
    INTNUMBER_OCT   reduce using rule 230 (delays -> empty .)
    SIGNED_INTNUMBER_OCT reduce using rule 230 (delays -> empty .)
    INTNUMBER_HEX   reduce using rule 230 (delays -> empty .)
    SIGNED_INTNUMBER_HEX reduce using rule 230 (delays -> empty .)
    FLOATNUMBER     reduce using rule 230 (delays -> empty .)
    STRING_LITERAL  reduce using rule 230 (delays -> empty .)
    IF              reduce using rule 230 (delays -> empty .)


state 137

    (80) integerdecl -> INTEGER integernamelist . SEMICOLON
    (82) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 287
    COMMA           shift and go to state 288


state 138

    (81) integerdecl -> INTEGER SIGNED . integernamelist SEMICOLON
    (82) integernamelist -> . integernamelist COMMA integername
    (83) integernamelist -> . integername
    (84) integername -> . ID

    ID              shift and go to state 140

    integernamelist                shift and go to state 289
    integername                    shift and go to state 139

state 139

    (83) integernamelist -> integername .

    SEMICOLON       reduce using rule 83 (integernamelist -> integername .)
    COMMA           reduce using rule 83 (integernamelist -> integername .)


state 140

    (84) integername -> ID .

    SEMICOLON       reduce using rule 84 (integername -> ID .)
    COMMA           reduce using rule 84 (integername -> ID .)


state 141

    (85) realdecl -> REAL realnamelist . SEMICOLON
    (86) realnamelist -> realnamelist . COMMA realname

    SEMICOLON       shift and go to state 290
    COMMA           shift and go to state 291


state 142

    (87) realnamelist -> realname .

    SEMICOLON       reduce using rule 87 (realnamelist -> realname .)
    COMMA           reduce using rule 87 (realnamelist -> realname .)


state 143

    (88) realname -> ID .

    SEMICOLON       reduce using rule 88 (realname -> ID .)
    COMMA           reduce using rule 88 (realname -> ID .)


state 144

    (89) parameterdecl -> PARAMETER param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 292
    COMMA           shift and go to state 293


state 145

    (90) parameterdecl -> PARAMETER width . param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 294
    param_substitution             shift and go to state 147

state 146

    (91) parameterdecl -> PARAMETER INTEGER . param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 295
    param_substitution             shift and go to state 147

state 147

    (96) param_substitution_list -> param_substitution .

    SEMICOLON       reduce using rule 96 (param_substitution_list -> param_substitution .)
    COMMA           reduce using rule 96 (param_substitution_list -> param_substitution .)
    RPAREN          reduce using rule 96 (param_substitution_list -> param_substitution .)


state 148

    (97) param_substitution -> ID . EQUALS rvalue

    EQUALS          shift and go to state 296


state 149

    (92) localparamdecl -> LOCALPARAM param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 297
    COMMA           shift and go to state 293


state 150

    (93) localparamdecl -> LOCALPARAM width . param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 298
    param_substitution             shift and go to state 147

state 151

    (94) localparamdecl -> LOCALPARAM INTEGER . param_substitution_list SEMICOLON
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 299
    param_substitution             shift and go to state 147

state 152

    (314) genvardecl -> GENVAR genvarlist . SEMICOLON
    (315) genvarlist -> genvarlist . COMMA genvar

    SEMICOLON       shift and go to state 300
    COMMA           shift and go to state 301


state 153

    (316) genvarlist -> genvar .

    SEMICOLON       reduce using rule 316 (genvarlist -> genvar .)
    COMMA           reduce using rule 316 (genvarlist -> genvar .)


state 154

    (317) genvar -> ID .

    SEMICOLON       reduce using rule 317 (genvar -> ID .)
    COMMA           reduce using rule 317 (genvar -> ID .)


state 155

    (98) assignment -> ASSIGN lvalue . EQUALS rvalue SEMICOLON

    EQUALS          shift and go to state 302


state 156

    (99) assignment -> ASSIGN delays . lvalue EQUALS delays rvalue SEMICOLON
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    LBRACE          shift and go to state 162
    ID              shift and go to state 81

    lvalue                         shift and go to state 303
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 157

    (114) lvalue -> lpartselect .

    EQUALS          reduce using rule 114 (lvalue -> lpartselect .)
    LE              reduce using rule 114 (lvalue -> lpartselect .)


state 158

    (115) lvalue -> lpointer .

    EQUALS          reduce using rule 115 (lvalue -> lpointer .)
    LE              reduce using rule 115 (lvalue -> lpointer .)


state 159

    (116) lvalue -> lconcat .

    EQUALS          reduce using rule 116 (lvalue -> lconcat .)
    LE              reduce using rule 116 (lvalue -> lconcat .)


state 160

    (117) lvalue -> identifier .
    (103) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (379) scope -> identifier . DOT

    EQUALS          reduce using rule 117 (lvalue -> identifier .)
    LE              reduce using rule 117 (lvalue -> identifier .)
    LBRACKET        shift and go to state 304
    DOT             shift and go to state 262


state 161

    (100) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> pointer .
    (174) pointer -> pointer . LBRACKET expression RBRACKET
    (380) scope -> pointer . DOT

    LBRACKET        shift and go to state 305
    EQUALS          reduce using rule 106 (lpointer -> pointer .)
    LE              reduce using rule 106 (lpointer -> pointer .)
    DOT             shift and go to state 259


state 162

    (107) lconcat -> LBRACE . lconcatlist RBRACE
    (108) lconcatlist -> . lconcatlist COMMA lconcat_one
    (109) lconcatlist -> . lconcat_one
    (110) lconcat_one -> . identifier
    (111) lconcat_one -> . lpartselect
    (112) lconcat_one -> . lpointer
    (113) lconcat_one -> . lconcat
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 81
    LBRACE          shift and go to state 162

    lconcatlist                    shift and go to state 306
    lconcat_one                    shift and go to state 307
    identifier                     shift and go to state 308
    lpartselect                    shift and go to state 309
    lpointer                       shift and go to state 310
    lconcat                        shift and go to state 311
    scope                          shift and go to state 103
    pointer                        shift and go to state 312

state 163

    (188) always -> ALWAYS senslist . always_statement
    (222) always_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    senslist                       shift and go to state 188
    always_statement               shift and go to state 313
    basic_statement                shift and go to state 314
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 164

    (189) senslist -> AT . LPAREN edgesigs RPAREN
    (197) senslist -> AT . levelsig
    (198) senslist -> AT . LPAREN levelsigs RPAREN
    (206) senslist -> AT . TIMES
    (207) senslist -> AT . LPAREN TIMES RPAREN
    (199) levelsig -> . levelsig_base
    (200) levelsig_base -> . identifier
    (201) levelsig_base -> . pointer
    (202) levelsig_base -> . partselect
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    LPAREN          shift and go to state 315
    TIMES           shift and go to state 317
    ID              shift and go to state 81

    levelsig                       shift and go to state 316
    levelsig_base                  shift and go to state 318
    identifier                     shift and go to state 319
    pointer                        shift and go to state 320
    partselect                     shift and go to state 321
    scope                          shift and go to state 103

state 165

    (196) senslist -> empty .

    IF              reduce using rule 196 (senslist -> empty .)
    CASE            reduce using rule 196 (senslist -> empty .)
    CASEX           reduce using rule 196 (senslist -> empty .)
    FOR             reduce using rule 196 (senslist -> empty .)
    WHILE           reduce using rule 196 (senslist -> empty .)
    WAIT            reduce using rule 196 (senslist -> empty .)
    FOREVER         reduce using rule 196 (senslist -> empty .)
    BEGIN           reduce using rule 196 (senslist -> empty .)
    FORK            reduce using rule 196 (senslist -> empty .)
    DELAY           reduce using rule 196 (senslist -> empty .)
    AT              reduce using rule 196 (senslist -> empty .)
    DOLLER          reduce using rule 196 (senslist -> empty .)
    DISABLE         reduce using rule 196 (senslist -> empty .)
    LBRACE          reduce using rule 196 (senslist -> empty .)
    ID              reduce using rule 196 (senslist -> empty .)
    SEMICOLON       reduce using rule 196 (senslist -> empty .)


state 166

    (275) initial -> INITIAL initial_statement .

    ENDMODULE       reduce using rule 275 (initial -> INITIAL initial_statement .)
    GENERATE        reduce using rule 275 (initial -> INITIAL initial_statement .)
    INTEGER         reduce using rule 275 (initial -> INITIAL initial_statement .)
    REAL            reduce using rule 275 (initial -> INITIAL initial_statement .)
    PARAMETER       reduce using rule 275 (initial -> INITIAL initial_statement .)
    LOCALPARAM      reduce using rule 275 (initial -> INITIAL initial_statement .)
    GENVAR          reduce using rule 275 (initial -> INITIAL initial_statement .)
    ASSIGN          reduce using rule 275 (initial -> INITIAL initial_statement .)
    ALWAYS          reduce using rule 275 (initial -> INITIAL initial_statement .)
    INITIAL         reduce using rule 275 (initial -> INITIAL initial_statement .)
    ID              reduce using rule 275 (initial -> INITIAL initial_statement .)
    SENS_OR         reduce using rule 275 (initial -> INITIAL initial_statement .)
    FUNCTION        reduce using rule 275 (initial -> INITIAL initial_statement .)
    TASK            reduce using rule 275 (initial -> INITIAL initial_statement .)
    LPAREN          reduce using rule 275 (initial -> INITIAL initial_statement .)
    INPUT           reduce using rule 275 (initial -> INITIAL initial_statement .)
    OUTPUT          reduce using rule 275 (initial -> INITIAL initial_statement .)
    INOUT           reduce using rule 275 (initial -> INITIAL initial_statement .)
    TRI             reduce using rule 275 (initial -> INITIAL initial_statement .)
    REG             reduce using rule 275 (initial -> INITIAL initial_statement .)
    WIRE            reduce using rule 275 (initial -> INITIAL initial_statement .)
    SIGNED          reduce using rule 275 (initial -> INITIAL initial_statement .)
    SUPPLY0         reduce using rule 275 (initial -> INITIAL initial_statement .)
    SUPPLY1         reduce using rule 275 (initial -> INITIAL initial_statement .)
    ENDGENERATE     reduce using rule 275 (initial -> INITIAL initial_statement .)
    IF              reduce using rule 275 (initial -> INITIAL initial_statement .)
    FOR             reduce using rule 275 (initial -> INITIAL initial_statement .)
    ELSE            reduce using rule 275 (initial -> INITIAL initial_statement .)
    END             reduce using rule 275 (initial -> INITIAL initial_statement .)


state 167

    (276) initial_statement -> basic_statement .

    ENDMODULE       reduce using rule 276 (initial_statement -> basic_statement .)
    GENERATE        reduce using rule 276 (initial_statement -> basic_statement .)
    INTEGER         reduce using rule 276 (initial_statement -> basic_statement .)
    REAL            reduce using rule 276 (initial_statement -> basic_statement .)
    PARAMETER       reduce using rule 276 (initial_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 276 (initial_statement -> basic_statement .)
    GENVAR          reduce using rule 276 (initial_statement -> basic_statement .)
    ASSIGN          reduce using rule 276 (initial_statement -> basic_statement .)
    ALWAYS          reduce using rule 276 (initial_statement -> basic_statement .)
    INITIAL         reduce using rule 276 (initial_statement -> basic_statement .)
    ID              reduce using rule 276 (initial_statement -> basic_statement .)
    SENS_OR         reduce using rule 276 (initial_statement -> basic_statement .)
    FUNCTION        reduce using rule 276 (initial_statement -> basic_statement .)
    TASK            reduce using rule 276 (initial_statement -> basic_statement .)
    LPAREN          reduce using rule 276 (initial_statement -> basic_statement .)
    INPUT           reduce using rule 276 (initial_statement -> basic_statement .)
    OUTPUT          reduce using rule 276 (initial_statement -> basic_statement .)
    INOUT           reduce using rule 276 (initial_statement -> basic_statement .)
    TRI             reduce using rule 276 (initial_statement -> basic_statement .)
    REG             reduce using rule 276 (initial_statement -> basic_statement .)
    WIRE            reduce using rule 276 (initial_statement -> basic_statement .)
    SIGNED          reduce using rule 276 (initial_statement -> basic_statement .)
    SUPPLY0         reduce using rule 276 (initial_statement -> basic_statement .)
    SUPPLY1         reduce using rule 276 (initial_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 276 (initial_statement -> basic_statement .)
    IF              reduce using rule 276 (initial_statement -> basic_statement .)
    FOR             reduce using rule 276 (initial_statement -> basic_statement .)
    ELSE            reduce using rule 276 (initial_statement -> basic_statement .)
    END             reduce using rule 276 (initial_statement -> basic_statement .)


state 168

    (208) basic_statement -> if_statement .

    ENDMODULE       reduce using rule 208 (basic_statement -> if_statement .)
    GENERATE        reduce using rule 208 (basic_statement -> if_statement .)
    INTEGER         reduce using rule 208 (basic_statement -> if_statement .)
    REAL            reduce using rule 208 (basic_statement -> if_statement .)
    PARAMETER       reduce using rule 208 (basic_statement -> if_statement .)
    LOCALPARAM      reduce using rule 208 (basic_statement -> if_statement .)
    GENVAR          reduce using rule 208 (basic_statement -> if_statement .)
    ASSIGN          reduce using rule 208 (basic_statement -> if_statement .)
    ALWAYS          reduce using rule 208 (basic_statement -> if_statement .)
    INITIAL         reduce using rule 208 (basic_statement -> if_statement .)
    ID              reduce using rule 208 (basic_statement -> if_statement .)
    SENS_OR         reduce using rule 208 (basic_statement -> if_statement .)
    FUNCTION        reduce using rule 208 (basic_statement -> if_statement .)
    TASK            reduce using rule 208 (basic_statement -> if_statement .)
    LPAREN          reduce using rule 208 (basic_statement -> if_statement .)
    INPUT           reduce using rule 208 (basic_statement -> if_statement .)
    OUTPUT          reduce using rule 208 (basic_statement -> if_statement .)
    INOUT           reduce using rule 208 (basic_statement -> if_statement .)
    TRI             reduce using rule 208 (basic_statement -> if_statement .)
    REG             reduce using rule 208 (basic_statement -> if_statement .)
    WIRE            reduce using rule 208 (basic_statement -> if_statement .)
    SIGNED          reduce using rule 208 (basic_statement -> if_statement .)
    SUPPLY0         reduce using rule 208 (basic_statement -> if_statement .)
    SUPPLY1         reduce using rule 208 (basic_statement -> if_statement .)
    ENDGENERATE     reduce using rule 208 (basic_statement -> if_statement .)
    IF              reduce using rule 208 (basic_statement -> if_statement .)
    FOR             reduce using rule 208 (basic_statement -> if_statement .)
    ELSE            reduce using rule 208 (basic_statement -> if_statement .)
    END             reduce using rule 208 (basic_statement -> if_statement .)
    CASE            reduce using rule 208 (basic_statement -> if_statement .)
    CASEX           reduce using rule 208 (basic_statement -> if_statement .)
    WHILE           reduce using rule 208 (basic_statement -> if_statement .)
    WAIT            reduce using rule 208 (basic_statement -> if_statement .)
    FOREVER         reduce using rule 208 (basic_statement -> if_statement .)
    BEGIN           reduce using rule 208 (basic_statement -> if_statement .)
    FORK            reduce using rule 208 (basic_statement -> if_statement .)
    DELAY           reduce using rule 208 (basic_statement -> if_statement .)
    AT              reduce using rule 208 (basic_statement -> if_statement .)
    DOLLER          reduce using rule 208 (basic_statement -> if_statement .)
    DISABLE         reduce using rule 208 (basic_statement -> if_statement .)
    LBRACE          reduce using rule 208 (basic_statement -> if_statement .)
    SEMICOLON       reduce using rule 208 (basic_statement -> if_statement .)
    JOIN            reduce using rule 208 (basic_statement -> if_statement .)
    ENDFUNCTION     reduce using rule 208 (basic_statement -> if_statement .)
    ENDTASK         reduce using rule 208 (basic_statement -> if_statement .)
    ENDCASE         reduce using rule 208 (basic_statement -> if_statement .)
    DEFAULT         reduce using rule 208 (basic_statement -> if_statement .)
    MINUS           reduce using rule 208 (basic_statement -> if_statement .)
    PLUS            reduce using rule 208 (basic_statement -> if_statement .)
    LNOT            reduce using rule 208 (basic_statement -> if_statement .)
    NOT             reduce using rule 208 (basic_statement -> if_statement .)
    AND             reduce using rule 208 (basic_statement -> if_statement .)
    NAND            reduce using rule 208 (basic_statement -> if_statement .)
    NOR             reduce using rule 208 (basic_statement -> if_statement .)
    OR              reduce using rule 208 (basic_statement -> if_statement .)
    XOR             reduce using rule 208 (basic_statement -> if_statement .)
    XNOR            reduce using rule 208 (basic_statement -> if_statement .)
    INTNUMBER_DEC   reduce using rule 208 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 208 (basic_statement -> if_statement .)
    INTNUMBER_BIN   reduce using rule 208 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 208 (basic_statement -> if_statement .)
    INTNUMBER_OCT   reduce using rule 208 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 208 (basic_statement -> if_statement .)
    INTNUMBER_HEX   reduce using rule 208 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 208 (basic_statement -> if_statement .)
    FLOATNUMBER     reduce using rule 208 (basic_statement -> if_statement .)
    STRING_LITERAL  reduce using rule 208 (basic_statement -> if_statement .)


state 169

    (209) basic_statement -> case_statement .

    ENDMODULE       reduce using rule 209 (basic_statement -> case_statement .)
    GENERATE        reduce using rule 209 (basic_statement -> case_statement .)
    INTEGER         reduce using rule 209 (basic_statement -> case_statement .)
    REAL            reduce using rule 209 (basic_statement -> case_statement .)
    PARAMETER       reduce using rule 209 (basic_statement -> case_statement .)
    LOCALPARAM      reduce using rule 209 (basic_statement -> case_statement .)
    GENVAR          reduce using rule 209 (basic_statement -> case_statement .)
    ASSIGN          reduce using rule 209 (basic_statement -> case_statement .)
    ALWAYS          reduce using rule 209 (basic_statement -> case_statement .)
    INITIAL         reduce using rule 209 (basic_statement -> case_statement .)
    ID              reduce using rule 209 (basic_statement -> case_statement .)
    SENS_OR         reduce using rule 209 (basic_statement -> case_statement .)
    FUNCTION        reduce using rule 209 (basic_statement -> case_statement .)
    TASK            reduce using rule 209 (basic_statement -> case_statement .)
    LPAREN          reduce using rule 209 (basic_statement -> case_statement .)
    INPUT           reduce using rule 209 (basic_statement -> case_statement .)
    OUTPUT          reduce using rule 209 (basic_statement -> case_statement .)
    INOUT           reduce using rule 209 (basic_statement -> case_statement .)
    TRI             reduce using rule 209 (basic_statement -> case_statement .)
    REG             reduce using rule 209 (basic_statement -> case_statement .)
    WIRE            reduce using rule 209 (basic_statement -> case_statement .)
    SIGNED          reduce using rule 209 (basic_statement -> case_statement .)
    SUPPLY0         reduce using rule 209 (basic_statement -> case_statement .)
    SUPPLY1         reduce using rule 209 (basic_statement -> case_statement .)
    ENDGENERATE     reduce using rule 209 (basic_statement -> case_statement .)
    IF              reduce using rule 209 (basic_statement -> case_statement .)
    FOR             reduce using rule 209 (basic_statement -> case_statement .)
    ELSE            reduce using rule 209 (basic_statement -> case_statement .)
    END             reduce using rule 209 (basic_statement -> case_statement .)
    CASE            reduce using rule 209 (basic_statement -> case_statement .)
    CASEX           reduce using rule 209 (basic_statement -> case_statement .)
    WHILE           reduce using rule 209 (basic_statement -> case_statement .)
    WAIT            reduce using rule 209 (basic_statement -> case_statement .)
    FOREVER         reduce using rule 209 (basic_statement -> case_statement .)
    BEGIN           reduce using rule 209 (basic_statement -> case_statement .)
    FORK            reduce using rule 209 (basic_statement -> case_statement .)
    DELAY           reduce using rule 209 (basic_statement -> case_statement .)
    AT              reduce using rule 209 (basic_statement -> case_statement .)
    DOLLER          reduce using rule 209 (basic_statement -> case_statement .)
    DISABLE         reduce using rule 209 (basic_statement -> case_statement .)
    LBRACE          reduce using rule 209 (basic_statement -> case_statement .)
    SEMICOLON       reduce using rule 209 (basic_statement -> case_statement .)
    JOIN            reduce using rule 209 (basic_statement -> case_statement .)
    ENDFUNCTION     reduce using rule 209 (basic_statement -> case_statement .)
    ENDTASK         reduce using rule 209 (basic_statement -> case_statement .)
    ENDCASE         reduce using rule 209 (basic_statement -> case_statement .)
    DEFAULT         reduce using rule 209 (basic_statement -> case_statement .)
    MINUS           reduce using rule 209 (basic_statement -> case_statement .)
    PLUS            reduce using rule 209 (basic_statement -> case_statement .)
    LNOT            reduce using rule 209 (basic_statement -> case_statement .)
    NOT             reduce using rule 209 (basic_statement -> case_statement .)
    AND             reduce using rule 209 (basic_statement -> case_statement .)
    NAND            reduce using rule 209 (basic_statement -> case_statement .)
    NOR             reduce using rule 209 (basic_statement -> case_statement .)
    OR              reduce using rule 209 (basic_statement -> case_statement .)
    XOR             reduce using rule 209 (basic_statement -> case_statement .)
    XNOR            reduce using rule 209 (basic_statement -> case_statement .)
    INTNUMBER_DEC   reduce using rule 209 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 209 (basic_statement -> case_statement .)
    INTNUMBER_BIN   reduce using rule 209 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 209 (basic_statement -> case_statement .)
    INTNUMBER_OCT   reduce using rule 209 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 209 (basic_statement -> case_statement .)
    INTNUMBER_HEX   reduce using rule 209 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 209 (basic_statement -> case_statement .)
    FLOATNUMBER     reduce using rule 209 (basic_statement -> case_statement .)
    STRING_LITERAL  reduce using rule 209 (basic_statement -> case_statement .)


state 170

    (210) basic_statement -> casex_statement .

    ENDMODULE       reduce using rule 210 (basic_statement -> casex_statement .)
    GENERATE        reduce using rule 210 (basic_statement -> casex_statement .)
    INTEGER         reduce using rule 210 (basic_statement -> casex_statement .)
    REAL            reduce using rule 210 (basic_statement -> casex_statement .)
    PARAMETER       reduce using rule 210 (basic_statement -> casex_statement .)
    LOCALPARAM      reduce using rule 210 (basic_statement -> casex_statement .)
    GENVAR          reduce using rule 210 (basic_statement -> casex_statement .)
    ASSIGN          reduce using rule 210 (basic_statement -> casex_statement .)
    ALWAYS          reduce using rule 210 (basic_statement -> casex_statement .)
    INITIAL         reduce using rule 210 (basic_statement -> casex_statement .)
    ID              reduce using rule 210 (basic_statement -> casex_statement .)
    SENS_OR         reduce using rule 210 (basic_statement -> casex_statement .)
    FUNCTION        reduce using rule 210 (basic_statement -> casex_statement .)
    TASK            reduce using rule 210 (basic_statement -> casex_statement .)
    LPAREN          reduce using rule 210 (basic_statement -> casex_statement .)
    INPUT           reduce using rule 210 (basic_statement -> casex_statement .)
    OUTPUT          reduce using rule 210 (basic_statement -> casex_statement .)
    INOUT           reduce using rule 210 (basic_statement -> casex_statement .)
    TRI             reduce using rule 210 (basic_statement -> casex_statement .)
    REG             reduce using rule 210 (basic_statement -> casex_statement .)
    WIRE            reduce using rule 210 (basic_statement -> casex_statement .)
    SIGNED          reduce using rule 210 (basic_statement -> casex_statement .)
    SUPPLY0         reduce using rule 210 (basic_statement -> casex_statement .)
    SUPPLY1         reduce using rule 210 (basic_statement -> casex_statement .)
    ENDGENERATE     reduce using rule 210 (basic_statement -> casex_statement .)
    IF              reduce using rule 210 (basic_statement -> casex_statement .)
    FOR             reduce using rule 210 (basic_statement -> casex_statement .)
    ELSE            reduce using rule 210 (basic_statement -> casex_statement .)
    END             reduce using rule 210 (basic_statement -> casex_statement .)
    CASE            reduce using rule 210 (basic_statement -> casex_statement .)
    CASEX           reduce using rule 210 (basic_statement -> casex_statement .)
    WHILE           reduce using rule 210 (basic_statement -> casex_statement .)
    WAIT            reduce using rule 210 (basic_statement -> casex_statement .)
    FOREVER         reduce using rule 210 (basic_statement -> casex_statement .)
    BEGIN           reduce using rule 210 (basic_statement -> casex_statement .)
    FORK            reduce using rule 210 (basic_statement -> casex_statement .)
    DELAY           reduce using rule 210 (basic_statement -> casex_statement .)
    AT              reduce using rule 210 (basic_statement -> casex_statement .)
    DOLLER          reduce using rule 210 (basic_statement -> casex_statement .)
    DISABLE         reduce using rule 210 (basic_statement -> casex_statement .)
    LBRACE          reduce using rule 210 (basic_statement -> casex_statement .)
    SEMICOLON       reduce using rule 210 (basic_statement -> casex_statement .)
    JOIN            reduce using rule 210 (basic_statement -> casex_statement .)
    ENDFUNCTION     reduce using rule 210 (basic_statement -> casex_statement .)
    ENDTASK         reduce using rule 210 (basic_statement -> casex_statement .)
    ENDCASE         reduce using rule 210 (basic_statement -> casex_statement .)
    DEFAULT         reduce using rule 210 (basic_statement -> casex_statement .)
    MINUS           reduce using rule 210 (basic_statement -> casex_statement .)
    PLUS            reduce using rule 210 (basic_statement -> casex_statement .)
    LNOT            reduce using rule 210 (basic_statement -> casex_statement .)
    NOT             reduce using rule 210 (basic_statement -> casex_statement .)
    AND             reduce using rule 210 (basic_statement -> casex_statement .)
    NAND            reduce using rule 210 (basic_statement -> casex_statement .)
    NOR             reduce using rule 210 (basic_statement -> casex_statement .)
    OR              reduce using rule 210 (basic_statement -> casex_statement .)
    XOR             reduce using rule 210 (basic_statement -> casex_statement .)
    XNOR            reduce using rule 210 (basic_statement -> casex_statement .)
    INTNUMBER_DEC   reduce using rule 210 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 210 (basic_statement -> casex_statement .)
    INTNUMBER_BIN   reduce using rule 210 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 210 (basic_statement -> casex_statement .)
    INTNUMBER_OCT   reduce using rule 210 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 210 (basic_statement -> casex_statement .)
    INTNUMBER_HEX   reduce using rule 210 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 210 (basic_statement -> casex_statement .)
    FLOATNUMBER     reduce using rule 210 (basic_statement -> casex_statement .)
    STRING_LITERAL  reduce using rule 210 (basic_statement -> casex_statement .)


state 171

    (211) basic_statement -> for_statement .

    ENDMODULE       reduce using rule 211 (basic_statement -> for_statement .)
    GENERATE        reduce using rule 211 (basic_statement -> for_statement .)
    INTEGER         reduce using rule 211 (basic_statement -> for_statement .)
    REAL            reduce using rule 211 (basic_statement -> for_statement .)
    PARAMETER       reduce using rule 211 (basic_statement -> for_statement .)
    LOCALPARAM      reduce using rule 211 (basic_statement -> for_statement .)
    GENVAR          reduce using rule 211 (basic_statement -> for_statement .)
    ASSIGN          reduce using rule 211 (basic_statement -> for_statement .)
    ALWAYS          reduce using rule 211 (basic_statement -> for_statement .)
    INITIAL         reduce using rule 211 (basic_statement -> for_statement .)
    ID              reduce using rule 211 (basic_statement -> for_statement .)
    SENS_OR         reduce using rule 211 (basic_statement -> for_statement .)
    FUNCTION        reduce using rule 211 (basic_statement -> for_statement .)
    TASK            reduce using rule 211 (basic_statement -> for_statement .)
    LPAREN          reduce using rule 211 (basic_statement -> for_statement .)
    INPUT           reduce using rule 211 (basic_statement -> for_statement .)
    OUTPUT          reduce using rule 211 (basic_statement -> for_statement .)
    INOUT           reduce using rule 211 (basic_statement -> for_statement .)
    TRI             reduce using rule 211 (basic_statement -> for_statement .)
    REG             reduce using rule 211 (basic_statement -> for_statement .)
    WIRE            reduce using rule 211 (basic_statement -> for_statement .)
    SIGNED          reduce using rule 211 (basic_statement -> for_statement .)
    SUPPLY0         reduce using rule 211 (basic_statement -> for_statement .)
    SUPPLY1         reduce using rule 211 (basic_statement -> for_statement .)
    ENDGENERATE     reduce using rule 211 (basic_statement -> for_statement .)
    IF              reduce using rule 211 (basic_statement -> for_statement .)
    FOR             reduce using rule 211 (basic_statement -> for_statement .)
    ELSE            reduce using rule 211 (basic_statement -> for_statement .)
    END             reduce using rule 211 (basic_statement -> for_statement .)
    CASE            reduce using rule 211 (basic_statement -> for_statement .)
    CASEX           reduce using rule 211 (basic_statement -> for_statement .)
    WHILE           reduce using rule 211 (basic_statement -> for_statement .)
    WAIT            reduce using rule 211 (basic_statement -> for_statement .)
    FOREVER         reduce using rule 211 (basic_statement -> for_statement .)
    BEGIN           reduce using rule 211 (basic_statement -> for_statement .)
    FORK            reduce using rule 211 (basic_statement -> for_statement .)
    DELAY           reduce using rule 211 (basic_statement -> for_statement .)
    AT              reduce using rule 211 (basic_statement -> for_statement .)
    DOLLER          reduce using rule 211 (basic_statement -> for_statement .)
    DISABLE         reduce using rule 211 (basic_statement -> for_statement .)
    LBRACE          reduce using rule 211 (basic_statement -> for_statement .)
    SEMICOLON       reduce using rule 211 (basic_statement -> for_statement .)
    JOIN            reduce using rule 211 (basic_statement -> for_statement .)
    ENDFUNCTION     reduce using rule 211 (basic_statement -> for_statement .)
    ENDTASK         reduce using rule 211 (basic_statement -> for_statement .)
    ENDCASE         reduce using rule 211 (basic_statement -> for_statement .)
    DEFAULT         reduce using rule 211 (basic_statement -> for_statement .)
    MINUS           reduce using rule 211 (basic_statement -> for_statement .)
    PLUS            reduce using rule 211 (basic_statement -> for_statement .)
    LNOT            reduce using rule 211 (basic_statement -> for_statement .)
    NOT             reduce using rule 211 (basic_statement -> for_statement .)
    AND             reduce using rule 211 (basic_statement -> for_statement .)
    NAND            reduce using rule 211 (basic_statement -> for_statement .)
    NOR             reduce using rule 211 (basic_statement -> for_statement .)
    OR              reduce using rule 211 (basic_statement -> for_statement .)
    XOR             reduce using rule 211 (basic_statement -> for_statement .)
    XNOR            reduce using rule 211 (basic_statement -> for_statement .)
    INTNUMBER_DEC   reduce using rule 211 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 211 (basic_statement -> for_statement .)
    INTNUMBER_BIN   reduce using rule 211 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 211 (basic_statement -> for_statement .)
    INTNUMBER_OCT   reduce using rule 211 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 211 (basic_statement -> for_statement .)
    INTNUMBER_HEX   reduce using rule 211 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 211 (basic_statement -> for_statement .)
    FLOATNUMBER     reduce using rule 211 (basic_statement -> for_statement .)
    STRING_LITERAL  reduce using rule 211 (basic_statement -> for_statement .)


state 172

    (212) basic_statement -> while_statement .

    ENDMODULE       reduce using rule 212 (basic_statement -> while_statement .)
    GENERATE        reduce using rule 212 (basic_statement -> while_statement .)
    INTEGER         reduce using rule 212 (basic_statement -> while_statement .)
    REAL            reduce using rule 212 (basic_statement -> while_statement .)
    PARAMETER       reduce using rule 212 (basic_statement -> while_statement .)
    LOCALPARAM      reduce using rule 212 (basic_statement -> while_statement .)
    GENVAR          reduce using rule 212 (basic_statement -> while_statement .)
    ASSIGN          reduce using rule 212 (basic_statement -> while_statement .)
    ALWAYS          reduce using rule 212 (basic_statement -> while_statement .)
    INITIAL         reduce using rule 212 (basic_statement -> while_statement .)
    ID              reduce using rule 212 (basic_statement -> while_statement .)
    SENS_OR         reduce using rule 212 (basic_statement -> while_statement .)
    FUNCTION        reduce using rule 212 (basic_statement -> while_statement .)
    TASK            reduce using rule 212 (basic_statement -> while_statement .)
    LPAREN          reduce using rule 212 (basic_statement -> while_statement .)
    INPUT           reduce using rule 212 (basic_statement -> while_statement .)
    OUTPUT          reduce using rule 212 (basic_statement -> while_statement .)
    INOUT           reduce using rule 212 (basic_statement -> while_statement .)
    TRI             reduce using rule 212 (basic_statement -> while_statement .)
    REG             reduce using rule 212 (basic_statement -> while_statement .)
    WIRE            reduce using rule 212 (basic_statement -> while_statement .)
    SIGNED          reduce using rule 212 (basic_statement -> while_statement .)
    SUPPLY0         reduce using rule 212 (basic_statement -> while_statement .)
    SUPPLY1         reduce using rule 212 (basic_statement -> while_statement .)
    ENDGENERATE     reduce using rule 212 (basic_statement -> while_statement .)
    IF              reduce using rule 212 (basic_statement -> while_statement .)
    FOR             reduce using rule 212 (basic_statement -> while_statement .)
    ELSE            reduce using rule 212 (basic_statement -> while_statement .)
    END             reduce using rule 212 (basic_statement -> while_statement .)
    CASE            reduce using rule 212 (basic_statement -> while_statement .)
    CASEX           reduce using rule 212 (basic_statement -> while_statement .)
    WHILE           reduce using rule 212 (basic_statement -> while_statement .)
    WAIT            reduce using rule 212 (basic_statement -> while_statement .)
    FOREVER         reduce using rule 212 (basic_statement -> while_statement .)
    BEGIN           reduce using rule 212 (basic_statement -> while_statement .)
    FORK            reduce using rule 212 (basic_statement -> while_statement .)
    DELAY           reduce using rule 212 (basic_statement -> while_statement .)
    AT              reduce using rule 212 (basic_statement -> while_statement .)
    DOLLER          reduce using rule 212 (basic_statement -> while_statement .)
    DISABLE         reduce using rule 212 (basic_statement -> while_statement .)
    LBRACE          reduce using rule 212 (basic_statement -> while_statement .)
    SEMICOLON       reduce using rule 212 (basic_statement -> while_statement .)
    JOIN            reduce using rule 212 (basic_statement -> while_statement .)
    ENDFUNCTION     reduce using rule 212 (basic_statement -> while_statement .)
    ENDTASK         reduce using rule 212 (basic_statement -> while_statement .)
    ENDCASE         reduce using rule 212 (basic_statement -> while_statement .)
    DEFAULT         reduce using rule 212 (basic_statement -> while_statement .)
    MINUS           reduce using rule 212 (basic_statement -> while_statement .)
    PLUS            reduce using rule 212 (basic_statement -> while_statement .)
    LNOT            reduce using rule 212 (basic_statement -> while_statement .)
    NOT             reduce using rule 212 (basic_statement -> while_statement .)
    AND             reduce using rule 212 (basic_statement -> while_statement .)
    NAND            reduce using rule 212 (basic_statement -> while_statement .)
    NOR             reduce using rule 212 (basic_statement -> while_statement .)
    OR              reduce using rule 212 (basic_statement -> while_statement .)
    XOR             reduce using rule 212 (basic_statement -> while_statement .)
    XNOR            reduce using rule 212 (basic_statement -> while_statement .)
    INTNUMBER_DEC   reduce using rule 212 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 212 (basic_statement -> while_statement .)
    INTNUMBER_BIN   reduce using rule 212 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 212 (basic_statement -> while_statement .)
    INTNUMBER_OCT   reduce using rule 212 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 212 (basic_statement -> while_statement .)
    INTNUMBER_HEX   reduce using rule 212 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 212 (basic_statement -> while_statement .)
    FLOATNUMBER     reduce using rule 212 (basic_statement -> while_statement .)
    STRING_LITERAL  reduce using rule 212 (basic_statement -> while_statement .)


state 173

    (213) basic_statement -> event_statement .

    ENDMODULE       reduce using rule 213 (basic_statement -> event_statement .)
    GENERATE        reduce using rule 213 (basic_statement -> event_statement .)
    INTEGER         reduce using rule 213 (basic_statement -> event_statement .)
    REAL            reduce using rule 213 (basic_statement -> event_statement .)
    PARAMETER       reduce using rule 213 (basic_statement -> event_statement .)
    LOCALPARAM      reduce using rule 213 (basic_statement -> event_statement .)
    GENVAR          reduce using rule 213 (basic_statement -> event_statement .)
    ASSIGN          reduce using rule 213 (basic_statement -> event_statement .)
    ALWAYS          reduce using rule 213 (basic_statement -> event_statement .)
    INITIAL         reduce using rule 213 (basic_statement -> event_statement .)
    ID              reduce using rule 213 (basic_statement -> event_statement .)
    SENS_OR         reduce using rule 213 (basic_statement -> event_statement .)
    FUNCTION        reduce using rule 213 (basic_statement -> event_statement .)
    TASK            reduce using rule 213 (basic_statement -> event_statement .)
    LPAREN          reduce using rule 213 (basic_statement -> event_statement .)
    INPUT           reduce using rule 213 (basic_statement -> event_statement .)
    OUTPUT          reduce using rule 213 (basic_statement -> event_statement .)
    INOUT           reduce using rule 213 (basic_statement -> event_statement .)
    TRI             reduce using rule 213 (basic_statement -> event_statement .)
    REG             reduce using rule 213 (basic_statement -> event_statement .)
    WIRE            reduce using rule 213 (basic_statement -> event_statement .)
    SIGNED          reduce using rule 213 (basic_statement -> event_statement .)
    SUPPLY0         reduce using rule 213 (basic_statement -> event_statement .)
    SUPPLY1         reduce using rule 213 (basic_statement -> event_statement .)
    ENDGENERATE     reduce using rule 213 (basic_statement -> event_statement .)
    IF              reduce using rule 213 (basic_statement -> event_statement .)
    FOR             reduce using rule 213 (basic_statement -> event_statement .)
    ELSE            reduce using rule 213 (basic_statement -> event_statement .)
    END             reduce using rule 213 (basic_statement -> event_statement .)
    CASE            reduce using rule 213 (basic_statement -> event_statement .)
    CASEX           reduce using rule 213 (basic_statement -> event_statement .)
    WHILE           reduce using rule 213 (basic_statement -> event_statement .)
    WAIT            reduce using rule 213 (basic_statement -> event_statement .)
    FOREVER         reduce using rule 213 (basic_statement -> event_statement .)
    BEGIN           reduce using rule 213 (basic_statement -> event_statement .)
    FORK            reduce using rule 213 (basic_statement -> event_statement .)
    DELAY           reduce using rule 213 (basic_statement -> event_statement .)
    AT              reduce using rule 213 (basic_statement -> event_statement .)
    DOLLER          reduce using rule 213 (basic_statement -> event_statement .)
    DISABLE         reduce using rule 213 (basic_statement -> event_statement .)
    LBRACE          reduce using rule 213 (basic_statement -> event_statement .)
    SEMICOLON       reduce using rule 213 (basic_statement -> event_statement .)
    JOIN            reduce using rule 213 (basic_statement -> event_statement .)
    ENDFUNCTION     reduce using rule 213 (basic_statement -> event_statement .)
    ENDTASK         reduce using rule 213 (basic_statement -> event_statement .)
    ENDCASE         reduce using rule 213 (basic_statement -> event_statement .)
    DEFAULT         reduce using rule 213 (basic_statement -> event_statement .)
    MINUS           reduce using rule 213 (basic_statement -> event_statement .)
    PLUS            reduce using rule 213 (basic_statement -> event_statement .)
    LNOT            reduce using rule 213 (basic_statement -> event_statement .)
    NOT             reduce using rule 213 (basic_statement -> event_statement .)
    AND             reduce using rule 213 (basic_statement -> event_statement .)
    NAND            reduce using rule 213 (basic_statement -> event_statement .)
    NOR             reduce using rule 213 (basic_statement -> event_statement .)
    OR              reduce using rule 213 (basic_statement -> event_statement .)
    XOR             reduce using rule 213 (basic_statement -> event_statement .)
    XNOR            reduce using rule 213 (basic_statement -> event_statement .)
    INTNUMBER_DEC   reduce using rule 213 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 213 (basic_statement -> event_statement .)
    INTNUMBER_BIN   reduce using rule 213 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 213 (basic_statement -> event_statement .)
    INTNUMBER_OCT   reduce using rule 213 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 213 (basic_statement -> event_statement .)
    INTNUMBER_HEX   reduce using rule 213 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 213 (basic_statement -> event_statement .)
    FLOATNUMBER     reduce using rule 213 (basic_statement -> event_statement .)
    STRING_LITERAL  reduce using rule 213 (basic_statement -> event_statement .)


state 174

    (214) basic_statement -> wait_statement .

    ENDMODULE       reduce using rule 214 (basic_statement -> wait_statement .)
    GENERATE        reduce using rule 214 (basic_statement -> wait_statement .)
    INTEGER         reduce using rule 214 (basic_statement -> wait_statement .)
    REAL            reduce using rule 214 (basic_statement -> wait_statement .)
    PARAMETER       reduce using rule 214 (basic_statement -> wait_statement .)
    LOCALPARAM      reduce using rule 214 (basic_statement -> wait_statement .)
    GENVAR          reduce using rule 214 (basic_statement -> wait_statement .)
    ASSIGN          reduce using rule 214 (basic_statement -> wait_statement .)
    ALWAYS          reduce using rule 214 (basic_statement -> wait_statement .)
    INITIAL         reduce using rule 214 (basic_statement -> wait_statement .)
    ID              reduce using rule 214 (basic_statement -> wait_statement .)
    SENS_OR         reduce using rule 214 (basic_statement -> wait_statement .)
    FUNCTION        reduce using rule 214 (basic_statement -> wait_statement .)
    TASK            reduce using rule 214 (basic_statement -> wait_statement .)
    LPAREN          reduce using rule 214 (basic_statement -> wait_statement .)
    INPUT           reduce using rule 214 (basic_statement -> wait_statement .)
    OUTPUT          reduce using rule 214 (basic_statement -> wait_statement .)
    INOUT           reduce using rule 214 (basic_statement -> wait_statement .)
    TRI             reduce using rule 214 (basic_statement -> wait_statement .)
    REG             reduce using rule 214 (basic_statement -> wait_statement .)
    WIRE            reduce using rule 214 (basic_statement -> wait_statement .)
    SIGNED          reduce using rule 214 (basic_statement -> wait_statement .)
    SUPPLY0         reduce using rule 214 (basic_statement -> wait_statement .)
    SUPPLY1         reduce using rule 214 (basic_statement -> wait_statement .)
    ENDGENERATE     reduce using rule 214 (basic_statement -> wait_statement .)
    IF              reduce using rule 214 (basic_statement -> wait_statement .)
    FOR             reduce using rule 214 (basic_statement -> wait_statement .)
    ELSE            reduce using rule 214 (basic_statement -> wait_statement .)
    END             reduce using rule 214 (basic_statement -> wait_statement .)
    CASE            reduce using rule 214 (basic_statement -> wait_statement .)
    CASEX           reduce using rule 214 (basic_statement -> wait_statement .)
    WHILE           reduce using rule 214 (basic_statement -> wait_statement .)
    WAIT            reduce using rule 214 (basic_statement -> wait_statement .)
    FOREVER         reduce using rule 214 (basic_statement -> wait_statement .)
    BEGIN           reduce using rule 214 (basic_statement -> wait_statement .)
    FORK            reduce using rule 214 (basic_statement -> wait_statement .)
    DELAY           reduce using rule 214 (basic_statement -> wait_statement .)
    AT              reduce using rule 214 (basic_statement -> wait_statement .)
    DOLLER          reduce using rule 214 (basic_statement -> wait_statement .)
    DISABLE         reduce using rule 214 (basic_statement -> wait_statement .)
    LBRACE          reduce using rule 214 (basic_statement -> wait_statement .)
    SEMICOLON       reduce using rule 214 (basic_statement -> wait_statement .)
    JOIN            reduce using rule 214 (basic_statement -> wait_statement .)
    ENDFUNCTION     reduce using rule 214 (basic_statement -> wait_statement .)
    ENDTASK         reduce using rule 214 (basic_statement -> wait_statement .)
    ENDCASE         reduce using rule 214 (basic_statement -> wait_statement .)
    DEFAULT         reduce using rule 214 (basic_statement -> wait_statement .)
    MINUS           reduce using rule 214 (basic_statement -> wait_statement .)
    PLUS            reduce using rule 214 (basic_statement -> wait_statement .)
    LNOT            reduce using rule 214 (basic_statement -> wait_statement .)
    NOT             reduce using rule 214 (basic_statement -> wait_statement .)
    AND             reduce using rule 214 (basic_statement -> wait_statement .)
    NAND            reduce using rule 214 (basic_statement -> wait_statement .)
    NOR             reduce using rule 214 (basic_statement -> wait_statement .)
    OR              reduce using rule 214 (basic_statement -> wait_statement .)
    XOR             reduce using rule 214 (basic_statement -> wait_statement .)
    XNOR            reduce using rule 214 (basic_statement -> wait_statement .)
    INTNUMBER_DEC   reduce using rule 214 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 214 (basic_statement -> wait_statement .)
    INTNUMBER_BIN   reduce using rule 214 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 214 (basic_statement -> wait_statement .)
    INTNUMBER_OCT   reduce using rule 214 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 214 (basic_statement -> wait_statement .)
    INTNUMBER_HEX   reduce using rule 214 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 214 (basic_statement -> wait_statement .)
    FLOATNUMBER     reduce using rule 214 (basic_statement -> wait_statement .)
    STRING_LITERAL  reduce using rule 214 (basic_statement -> wait_statement .)


state 175

    (215) basic_statement -> forever_statement .

    ENDMODULE       reduce using rule 215 (basic_statement -> forever_statement .)
    GENERATE        reduce using rule 215 (basic_statement -> forever_statement .)
    INTEGER         reduce using rule 215 (basic_statement -> forever_statement .)
    REAL            reduce using rule 215 (basic_statement -> forever_statement .)
    PARAMETER       reduce using rule 215 (basic_statement -> forever_statement .)
    LOCALPARAM      reduce using rule 215 (basic_statement -> forever_statement .)
    GENVAR          reduce using rule 215 (basic_statement -> forever_statement .)
    ASSIGN          reduce using rule 215 (basic_statement -> forever_statement .)
    ALWAYS          reduce using rule 215 (basic_statement -> forever_statement .)
    INITIAL         reduce using rule 215 (basic_statement -> forever_statement .)
    ID              reduce using rule 215 (basic_statement -> forever_statement .)
    SENS_OR         reduce using rule 215 (basic_statement -> forever_statement .)
    FUNCTION        reduce using rule 215 (basic_statement -> forever_statement .)
    TASK            reduce using rule 215 (basic_statement -> forever_statement .)
    LPAREN          reduce using rule 215 (basic_statement -> forever_statement .)
    INPUT           reduce using rule 215 (basic_statement -> forever_statement .)
    OUTPUT          reduce using rule 215 (basic_statement -> forever_statement .)
    INOUT           reduce using rule 215 (basic_statement -> forever_statement .)
    TRI             reduce using rule 215 (basic_statement -> forever_statement .)
    REG             reduce using rule 215 (basic_statement -> forever_statement .)
    WIRE            reduce using rule 215 (basic_statement -> forever_statement .)
    SIGNED          reduce using rule 215 (basic_statement -> forever_statement .)
    SUPPLY0         reduce using rule 215 (basic_statement -> forever_statement .)
    SUPPLY1         reduce using rule 215 (basic_statement -> forever_statement .)
    ENDGENERATE     reduce using rule 215 (basic_statement -> forever_statement .)
    IF              reduce using rule 215 (basic_statement -> forever_statement .)
    FOR             reduce using rule 215 (basic_statement -> forever_statement .)
    ELSE            reduce using rule 215 (basic_statement -> forever_statement .)
    END             reduce using rule 215 (basic_statement -> forever_statement .)
    CASE            reduce using rule 215 (basic_statement -> forever_statement .)
    CASEX           reduce using rule 215 (basic_statement -> forever_statement .)
    WHILE           reduce using rule 215 (basic_statement -> forever_statement .)
    WAIT            reduce using rule 215 (basic_statement -> forever_statement .)
    FOREVER         reduce using rule 215 (basic_statement -> forever_statement .)
    BEGIN           reduce using rule 215 (basic_statement -> forever_statement .)
    FORK            reduce using rule 215 (basic_statement -> forever_statement .)
    DELAY           reduce using rule 215 (basic_statement -> forever_statement .)
    AT              reduce using rule 215 (basic_statement -> forever_statement .)
    DOLLER          reduce using rule 215 (basic_statement -> forever_statement .)
    DISABLE         reduce using rule 215 (basic_statement -> forever_statement .)
    LBRACE          reduce using rule 215 (basic_statement -> forever_statement .)
    SEMICOLON       reduce using rule 215 (basic_statement -> forever_statement .)
    JOIN            reduce using rule 215 (basic_statement -> forever_statement .)
    ENDFUNCTION     reduce using rule 215 (basic_statement -> forever_statement .)
    ENDTASK         reduce using rule 215 (basic_statement -> forever_statement .)
    ENDCASE         reduce using rule 215 (basic_statement -> forever_statement .)
    DEFAULT         reduce using rule 215 (basic_statement -> forever_statement .)
    MINUS           reduce using rule 215 (basic_statement -> forever_statement .)
    PLUS            reduce using rule 215 (basic_statement -> forever_statement .)
    LNOT            reduce using rule 215 (basic_statement -> forever_statement .)
    NOT             reduce using rule 215 (basic_statement -> forever_statement .)
    AND             reduce using rule 215 (basic_statement -> forever_statement .)
    NAND            reduce using rule 215 (basic_statement -> forever_statement .)
    NOR             reduce using rule 215 (basic_statement -> forever_statement .)
    OR              reduce using rule 215 (basic_statement -> forever_statement .)
    XOR             reduce using rule 215 (basic_statement -> forever_statement .)
    XNOR            reduce using rule 215 (basic_statement -> forever_statement .)
    INTNUMBER_DEC   reduce using rule 215 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 215 (basic_statement -> forever_statement .)
    INTNUMBER_BIN   reduce using rule 215 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 215 (basic_statement -> forever_statement .)
    INTNUMBER_OCT   reduce using rule 215 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 215 (basic_statement -> forever_statement .)
    INTNUMBER_HEX   reduce using rule 215 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 215 (basic_statement -> forever_statement .)
    FLOATNUMBER     reduce using rule 215 (basic_statement -> forever_statement .)
    STRING_LITERAL  reduce using rule 215 (basic_statement -> forever_statement .)


state 176

    (216) basic_statement -> block .

    ENDMODULE       reduce using rule 216 (basic_statement -> block .)
    GENERATE        reduce using rule 216 (basic_statement -> block .)
    INTEGER         reduce using rule 216 (basic_statement -> block .)
    REAL            reduce using rule 216 (basic_statement -> block .)
    PARAMETER       reduce using rule 216 (basic_statement -> block .)
    LOCALPARAM      reduce using rule 216 (basic_statement -> block .)
    GENVAR          reduce using rule 216 (basic_statement -> block .)
    ASSIGN          reduce using rule 216 (basic_statement -> block .)
    ALWAYS          reduce using rule 216 (basic_statement -> block .)
    INITIAL         reduce using rule 216 (basic_statement -> block .)
    ID              reduce using rule 216 (basic_statement -> block .)
    SENS_OR         reduce using rule 216 (basic_statement -> block .)
    FUNCTION        reduce using rule 216 (basic_statement -> block .)
    TASK            reduce using rule 216 (basic_statement -> block .)
    LPAREN          reduce using rule 216 (basic_statement -> block .)
    INPUT           reduce using rule 216 (basic_statement -> block .)
    OUTPUT          reduce using rule 216 (basic_statement -> block .)
    INOUT           reduce using rule 216 (basic_statement -> block .)
    TRI             reduce using rule 216 (basic_statement -> block .)
    REG             reduce using rule 216 (basic_statement -> block .)
    WIRE            reduce using rule 216 (basic_statement -> block .)
    SIGNED          reduce using rule 216 (basic_statement -> block .)
    SUPPLY0         reduce using rule 216 (basic_statement -> block .)
    SUPPLY1         reduce using rule 216 (basic_statement -> block .)
    ENDGENERATE     reduce using rule 216 (basic_statement -> block .)
    IF              reduce using rule 216 (basic_statement -> block .)
    FOR             reduce using rule 216 (basic_statement -> block .)
    ELSE            reduce using rule 216 (basic_statement -> block .)
    END             reduce using rule 216 (basic_statement -> block .)
    CASE            reduce using rule 216 (basic_statement -> block .)
    CASEX           reduce using rule 216 (basic_statement -> block .)
    WHILE           reduce using rule 216 (basic_statement -> block .)
    WAIT            reduce using rule 216 (basic_statement -> block .)
    FOREVER         reduce using rule 216 (basic_statement -> block .)
    BEGIN           reduce using rule 216 (basic_statement -> block .)
    FORK            reduce using rule 216 (basic_statement -> block .)
    DELAY           reduce using rule 216 (basic_statement -> block .)
    AT              reduce using rule 216 (basic_statement -> block .)
    DOLLER          reduce using rule 216 (basic_statement -> block .)
    DISABLE         reduce using rule 216 (basic_statement -> block .)
    LBRACE          reduce using rule 216 (basic_statement -> block .)
    SEMICOLON       reduce using rule 216 (basic_statement -> block .)
    JOIN            reduce using rule 216 (basic_statement -> block .)
    ENDFUNCTION     reduce using rule 216 (basic_statement -> block .)
    ENDTASK         reduce using rule 216 (basic_statement -> block .)
    ENDCASE         reduce using rule 216 (basic_statement -> block .)
    DEFAULT         reduce using rule 216 (basic_statement -> block .)
    MINUS           reduce using rule 216 (basic_statement -> block .)
    PLUS            reduce using rule 216 (basic_statement -> block .)
    LNOT            reduce using rule 216 (basic_statement -> block .)
    NOT             reduce using rule 216 (basic_statement -> block .)
    AND             reduce using rule 216 (basic_statement -> block .)
    NAND            reduce using rule 216 (basic_statement -> block .)
    NOR             reduce using rule 216 (basic_statement -> block .)
    OR              reduce using rule 216 (basic_statement -> block .)
    XOR             reduce using rule 216 (basic_statement -> block .)
    XNOR            reduce using rule 216 (basic_statement -> block .)
    INTNUMBER_DEC   reduce using rule 216 (basic_statement -> block .)
    SIGNED_INTNUMBER_DEC reduce using rule 216 (basic_statement -> block .)
    INTNUMBER_BIN   reduce using rule 216 (basic_statement -> block .)
    SIGNED_INTNUMBER_BIN reduce using rule 216 (basic_statement -> block .)
    INTNUMBER_OCT   reduce using rule 216 (basic_statement -> block .)
    SIGNED_INTNUMBER_OCT reduce using rule 216 (basic_statement -> block .)
    INTNUMBER_HEX   reduce using rule 216 (basic_statement -> block .)
    SIGNED_INTNUMBER_HEX reduce using rule 216 (basic_statement -> block .)
    FLOATNUMBER     reduce using rule 216 (basic_statement -> block .)
    STRING_LITERAL  reduce using rule 216 (basic_statement -> block .)


state 177

    (217) basic_statement -> namedblock .

    ENDMODULE       reduce using rule 217 (basic_statement -> namedblock .)
    GENERATE        reduce using rule 217 (basic_statement -> namedblock .)
    INTEGER         reduce using rule 217 (basic_statement -> namedblock .)
    REAL            reduce using rule 217 (basic_statement -> namedblock .)
    PARAMETER       reduce using rule 217 (basic_statement -> namedblock .)
    LOCALPARAM      reduce using rule 217 (basic_statement -> namedblock .)
    GENVAR          reduce using rule 217 (basic_statement -> namedblock .)
    ASSIGN          reduce using rule 217 (basic_statement -> namedblock .)
    ALWAYS          reduce using rule 217 (basic_statement -> namedblock .)
    INITIAL         reduce using rule 217 (basic_statement -> namedblock .)
    ID              reduce using rule 217 (basic_statement -> namedblock .)
    SENS_OR         reduce using rule 217 (basic_statement -> namedblock .)
    FUNCTION        reduce using rule 217 (basic_statement -> namedblock .)
    TASK            reduce using rule 217 (basic_statement -> namedblock .)
    LPAREN          reduce using rule 217 (basic_statement -> namedblock .)
    INPUT           reduce using rule 217 (basic_statement -> namedblock .)
    OUTPUT          reduce using rule 217 (basic_statement -> namedblock .)
    INOUT           reduce using rule 217 (basic_statement -> namedblock .)
    TRI             reduce using rule 217 (basic_statement -> namedblock .)
    REG             reduce using rule 217 (basic_statement -> namedblock .)
    WIRE            reduce using rule 217 (basic_statement -> namedblock .)
    SIGNED          reduce using rule 217 (basic_statement -> namedblock .)
    SUPPLY0         reduce using rule 217 (basic_statement -> namedblock .)
    SUPPLY1         reduce using rule 217 (basic_statement -> namedblock .)
    ENDGENERATE     reduce using rule 217 (basic_statement -> namedblock .)
    IF              reduce using rule 217 (basic_statement -> namedblock .)
    FOR             reduce using rule 217 (basic_statement -> namedblock .)
    ELSE            reduce using rule 217 (basic_statement -> namedblock .)
    END             reduce using rule 217 (basic_statement -> namedblock .)
    CASE            reduce using rule 217 (basic_statement -> namedblock .)
    CASEX           reduce using rule 217 (basic_statement -> namedblock .)
    WHILE           reduce using rule 217 (basic_statement -> namedblock .)
    WAIT            reduce using rule 217 (basic_statement -> namedblock .)
    FOREVER         reduce using rule 217 (basic_statement -> namedblock .)
    BEGIN           reduce using rule 217 (basic_statement -> namedblock .)
    FORK            reduce using rule 217 (basic_statement -> namedblock .)
    DELAY           reduce using rule 217 (basic_statement -> namedblock .)
    AT              reduce using rule 217 (basic_statement -> namedblock .)
    DOLLER          reduce using rule 217 (basic_statement -> namedblock .)
    DISABLE         reduce using rule 217 (basic_statement -> namedblock .)
    LBRACE          reduce using rule 217 (basic_statement -> namedblock .)
    SEMICOLON       reduce using rule 217 (basic_statement -> namedblock .)
    JOIN            reduce using rule 217 (basic_statement -> namedblock .)
    ENDFUNCTION     reduce using rule 217 (basic_statement -> namedblock .)
    ENDTASK         reduce using rule 217 (basic_statement -> namedblock .)
    ENDCASE         reduce using rule 217 (basic_statement -> namedblock .)
    DEFAULT         reduce using rule 217 (basic_statement -> namedblock .)
    MINUS           reduce using rule 217 (basic_statement -> namedblock .)
    PLUS            reduce using rule 217 (basic_statement -> namedblock .)
    LNOT            reduce using rule 217 (basic_statement -> namedblock .)
    NOT             reduce using rule 217 (basic_statement -> namedblock .)
    AND             reduce using rule 217 (basic_statement -> namedblock .)
    NAND            reduce using rule 217 (basic_statement -> namedblock .)
    NOR             reduce using rule 217 (basic_statement -> namedblock .)
    OR              reduce using rule 217 (basic_statement -> namedblock .)
    XOR             reduce using rule 217 (basic_statement -> namedblock .)
    XNOR            reduce using rule 217 (basic_statement -> namedblock .)
    INTNUMBER_DEC   reduce using rule 217 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 217 (basic_statement -> namedblock .)
    INTNUMBER_BIN   reduce using rule 217 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 217 (basic_statement -> namedblock .)
    INTNUMBER_OCT   reduce using rule 217 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 217 (basic_statement -> namedblock .)
    INTNUMBER_HEX   reduce using rule 217 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 217 (basic_statement -> namedblock .)
    FLOATNUMBER     reduce using rule 217 (basic_statement -> namedblock .)
    STRING_LITERAL  reduce using rule 217 (basic_statement -> namedblock .)


state 178

    (218) basic_statement -> parallelblock .

    ENDMODULE       reduce using rule 218 (basic_statement -> parallelblock .)
    GENERATE        reduce using rule 218 (basic_statement -> parallelblock .)
    INTEGER         reduce using rule 218 (basic_statement -> parallelblock .)
    REAL            reduce using rule 218 (basic_statement -> parallelblock .)
    PARAMETER       reduce using rule 218 (basic_statement -> parallelblock .)
    LOCALPARAM      reduce using rule 218 (basic_statement -> parallelblock .)
    GENVAR          reduce using rule 218 (basic_statement -> parallelblock .)
    ASSIGN          reduce using rule 218 (basic_statement -> parallelblock .)
    ALWAYS          reduce using rule 218 (basic_statement -> parallelblock .)
    INITIAL         reduce using rule 218 (basic_statement -> parallelblock .)
    ID              reduce using rule 218 (basic_statement -> parallelblock .)
    SENS_OR         reduce using rule 218 (basic_statement -> parallelblock .)
    FUNCTION        reduce using rule 218 (basic_statement -> parallelblock .)
    TASK            reduce using rule 218 (basic_statement -> parallelblock .)
    LPAREN          reduce using rule 218 (basic_statement -> parallelblock .)
    INPUT           reduce using rule 218 (basic_statement -> parallelblock .)
    OUTPUT          reduce using rule 218 (basic_statement -> parallelblock .)
    INOUT           reduce using rule 218 (basic_statement -> parallelblock .)
    TRI             reduce using rule 218 (basic_statement -> parallelblock .)
    REG             reduce using rule 218 (basic_statement -> parallelblock .)
    WIRE            reduce using rule 218 (basic_statement -> parallelblock .)
    SIGNED          reduce using rule 218 (basic_statement -> parallelblock .)
    SUPPLY0         reduce using rule 218 (basic_statement -> parallelblock .)
    SUPPLY1         reduce using rule 218 (basic_statement -> parallelblock .)
    ENDGENERATE     reduce using rule 218 (basic_statement -> parallelblock .)
    IF              reduce using rule 218 (basic_statement -> parallelblock .)
    FOR             reduce using rule 218 (basic_statement -> parallelblock .)
    ELSE            reduce using rule 218 (basic_statement -> parallelblock .)
    END             reduce using rule 218 (basic_statement -> parallelblock .)
    CASE            reduce using rule 218 (basic_statement -> parallelblock .)
    CASEX           reduce using rule 218 (basic_statement -> parallelblock .)
    WHILE           reduce using rule 218 (basic_statement -> parallelblock .)
    WAIT            reduce using rule 218 (basic_statement -> parallelblock .)
    FOREVER         reduce using rule 218 (basic_statement -> parallelblock .)
    BEGIN           reduce using rule 218 (basic_statement -> parallelblock .)
    FORK            reduce using rule 218 (basic_statement -> parallelblock .)
    DELAY           reduce using rule 218 (basic_statement -> parallelblock .)
    AT              reduce using rule 218 (basic_statement -> parallelblock .)
    DOLLER          reduce using rule 218 (basic_statement -> parallelblock .)
    DISABLE         reduce using rule 218 (basic_statement -> parallelblock .)
    LBRACE          reduce using rule 218 (basic_statement -> parallelblock .)
    SEMICOLON       reduce using rule 218 (basic_statement -> parallelblock .)
    JOIN            reduce using rule 218 (basic_statement -> parallelblock .)
    ENDFUNCTION     reduce using rule 218 (basic_statement -> parallelblock .)
    ENDTASK         reduce using rule 218 (basic_statement -> parallelblock .)
    ENDCASE         reduce using rule 218 (basic_statement -> parallelblock .)
    DEFAULT         reduce using rule 218 (basic_statement -> parallelblock .)
    MINUS           reduce using rule 218 (basic_statement -> parallelblock .)
    PLUS            reduce using rule 218 (basic_statement -> parallelblock .)
    LNOT            reduce using rule 218 (basic_statement -> parallelblock .)
    NOT             reduce using rule 218 (basic_statement -> parallelblock .)
    AND             reduce using rule 218 (basic_statement -> parallelblock .)
    NAND            reduce using rule 218 (basic_statement -> parallelblock .)
    NOR             reduce using rule 218 (basic_statement -> parallelblock .)
    OR              reduce using rule 218 (basic_statement -> parallelblock .)
    XOR             reduce using rule 218 (basic_statement -> parallelblock .)
    XNOR            reduce using rule 218 (basic_statement -> parallelblock .)
    INTNUMBER_DEC   reduce using rule 218 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 218 (basic_statement -> parallelblock .)
    INTNUMBER_BIN   reduce using rule 218 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 218 (basic_statement -> parallelblock .)
    INTNUMBER_OCT   reduce using rule 218 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 218 (basic_statement -> parallelblock .)
    INTNUMBER_HEX   reduce using rule 218 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 218 (basic_statement -> parallelblock .)
    FLOATNUMBER     reduce using rule 218 (basic_statement -> parallelblock .)
    STRING_LITERAL  reduce using rule 218 (basic_statement -> parallelblock .)


state 179

    (219) basic_statement -> blocking_substitution .

    ENDMODULE       reduce using rule 219 (basic_statement -> blocking_substitution .)
    GENERATE        reduce using rule 219 (basic_statement -> blocking_substitution .)
    INTEGER         reduce using rule 219 (basic_statement -> blocking_substitution .)
    REAL            reduce using rule 219 (basic_statement -> blocking_substitution .)
    PARAMETER       reduce using rule 219 (basic_statement -> blocking_substitution .)
    LOCALPARAM      reduce using rule 219 (basic_statement -> blocking_substitution .)
    GENVAR          reduce using rule 219 (basic_statement -> blocking_substitution .)
    ASSIGN          reduce using rule 219 (basic_statement -> blocking_substitution .)
    ALWAYS          reduce using rule 219 (basic_statement -> blocking_substitution .)
    INITIAL         reduce using rule 219 (basic_statement -> blocking_substitution .)
    ID              reduce using rule 219 (basic_statement -> blocking_substitution .)
    SENS_OR         reduce using rule 219 (basic_statement -> blocking_substitution .)
    FUNCTION        reduce using rule 219 (basic_statement -> blocking_substitution .)
    TASK            reduce using rule 219 (basic_statement -> blocking_substitution .)
    LPAREN          reduce using rule 219 (basic_statement -> blocking_substitution .)
    INPUT           reduce using rule 219 (basic_statement -> blocking_substitution .)
    OUTPUT          reduce using rule 219 (basic_statement -> blocking_substitution .)
    INOUT           reduce using rule 219 (basic_statement -> blocking_substitution .)
    TRI             reduce using rule 219 (basic_statement -> blocking_substitution .)
    REG             reduce using rule 219 (basic_statement -> blocking_substitution .)
    WIRE            reduce using rule 219 (basic_statement -> blocking_substitution .)
    SIGNED          reduce using rule 219 (basic_statement -> blocking_substitution .)
    SUPPLY0         reduce using rule 219 (basic_statement -> blocking_substitution .)
    SUPPLY1         reduce using rule 219 (basic_statement -> blocking_substitution .)
    ENDGENERATE     reduce using rule 219 (basic_statement -> blocking_substitution .)
    IF              reduce using rule 219 (basic_statement -> blocking_substitution .)
    FOR             reduce using rule 219 (basic_statement -> blocking_substitution .)
    ELSE            reduce using rule 219 (basic_statement -> blocking_substitution .)
    END             reduce using rule 219 (basic_statement -> blocking_substitution .)
    CASE            reduce using rule 219 (basic_statement -> blocking_substitution .)
    CASEX           reduce using rule 219 (basic_statement -> blocking_substitution .)
    WHILE           reduce using rule 219 (basic_statement -> blocking_substitution .)
    WAIT            reduce using rule 219 (basic_statement -> blocking_substitution .)
    FOREVER         reduce using rule 219 (basic_statement -> blocking_substitution .)
    BEGIN           reduce using rule 219 (basic_statement -> blocking_substitution .)
    FORK            reduce using rule 219 (basic_statement -> blocking_substitution .)
    DELAY           reduce using rule 219 (basic_statement -> blocking_substitution .)
    AT              reduce using rule 219 (basic_statement -> blocking_substitution .)
    DOLLER          reduce using rule 219 (basic_statement -> blocking_substitution .)
    DISABLE         reduce using rule 219 (basic_statement -> blocking_substitution .)
    LBRACE          reduce using rule 219 (basic_statement -> blocking_substitution .)
    SEMICOLON       reduce using rule 219 (basic_statement -> blocking_substitution .)
    JOIN            reduce using rule 219 (basic_statement -> blocking_substitution .)
    ENDFUNCTION     reduce using rule 219 (basic_statement -> blocking_substitution .)
    ENDTASK         reduce using rule 219 (basic_statement -> blocking_substitution .)
    ENDCASE         reduce using rule 219 (basic_statement -> blocking_substitution .)
    DEFAULT         reduce using rule 219 (basic_statement -> blocking_substitution .)
    MINUS           reduce using rule 219 (basic_statement -> blocking_substitution .)
    PLUS            reduce using rule 219 (basic_statement -> blocking_substitution .)
    LNOT            reduce using rule 219 (basic_statement -> blocking_substitution .)
    NOT             reduce using rule 219 (basic_statement -> blocking_substitution .)
    AND             reduce using rule 219 (basic_statement -> blocking_substitution .)
    NAND            reduce using rule 219 (basic_statement -> blocking_substitution .)
    NOR             reduce using rule 219 (basic_statement -> blocking_substitution .)
    OR              reduce using rule 219 (basic_statement -> blocking_substitution .)
    XOR             reduce using rule 219 (basic_statement -> blocking_substitution .)
    XNOR            reduce using rule 219 (basic_statement -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 219 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 219 (basic_statement -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 219 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 219 (basic_statement -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 219 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 219 (basic_statement -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 219 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 219 (basic_statement -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 219 (basic_statement -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 219 (basic_statement -> blocking_substitution .)


state 180

    (220) basic_statement -> nonblocking_substitution .

    ENDMODULE       reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    GENERATE        reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INTEGER         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    REAL            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    PARAMETER       reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    LOCALPARAM      reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    GENVAR          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ASSIGN          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ALWAYS          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INITIAL         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ID              reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SENS_OR         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    FUNCTION        reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    TASK            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    LPAREN          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INPUT           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    OUTPUT          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INOUT           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    TRI             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    REG             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    WIRE            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SIGNED          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SUPPLY0         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SUPPLY1         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ENDGENERATE     reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    IF              reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    FOR             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ELSE            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    END             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    CASE            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    CASEX           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    WHILE           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    WAIT            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    FOREVER         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    BEGIN           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    FORK            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    DELAY           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    AT              reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    DOLLER          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    DISABLE         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    LBRACE          reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SEMICOLON       reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    JOIN            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ENDFUNCTION     reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ENDTASK         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    ENDCASE         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    DEFAULT         reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    MINUS           reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    PLUS            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    LNOT            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    NOT             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    AND             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    NAND            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    NOR             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    OR              reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    XOR             reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    XNOR            reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_DEC   reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_BIN   reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_OCT   reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_HEX   reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    FLOATNUMBER     reduce using rule 220 (basic_statement -> nonblocking_substitution .)
    STRING_LITERAL  reduce using rule 220 (basic_statement -> nonblocking_substitution .)


state 181

    (221) basic_statement -> single_statement .

    ENDMODULE       reduce using rule 221 (basic_statement -> single_statement .)
    GENERATE        reduce using rule 221 (basic_statement -> single_statement .)
    INTEGER         reduce using rule 221 (basic_statement -> single_statement .)
    REAL            reduce using rule 221 (basic_statement -> single_statement .)
    PARAMETER       reduce using rule 221 (basic_statement -> single_statement .)
    LOCALPARAM      reduce using rule 221 (basic_statement -> single_statement .)
    GENVAR          reduce using rule 221 (basic_statement -> single_statement .)
    ASSIGN          reduce using rule 221 (basic_statement -> single_statement .)
    ALWAYS          reduce using rule 221 (basic_statement -> single_statement .)
    INITIAL         reduce using rule 221 (basic_statement -> single_statement .)
    ID              reduce using rule 221 (basic_statement -> single_statement .)
    SENS_OR         reduce using rule 221 (basic_statement -> single_statement .)
    FUNCTION        reduce using rule 221 (basic_statement -> single_statement .)
    TASK            reduce using rule 221 (basic_statement -> single_statement .)
    LPAREN          reduce using rule 221 (basic_statement -> single_statement .)
    INPUT           reduce using rule 221 (basic_statement -> single_statement .)
    OUTPUT          reduce using rule 221 (basic_statement -> single_statement .)
    INOUT           reduce using rule 221 (basic_statement -> single_statement .)
    TRI             reduce using rule 221 (basic_statement -> single_statement .)
    REG             reduce using rule 221 (basic_statement -> single_statement .)
    WIRE            reduce using rule 221 (basic_statement -> single_statement .)
    SIGNED          reduce using rule 221 (basic_statement -> single_statement .)
    SUPPLY0         reduce using rule 221 (basic_statement -> single_statement .)
    SUPPLY1         reduce using rule 221 (basic_statement -> single_statement .)
    ENDGENERATE     reduce using rule 221 (basic_statement -> single_statement .)
    IF              reduce using rule 221 (basic_statement -> single_statement .)
    FOR             reduce using rule 221 (basic_statement -> single_statement .)
    ELSE            reduce using rule 221 (basic_statement -> single_statement .)
    END             reduce using rule 221 (basic_statement -> single_statement .)
    CASE            reduce using rule 221 (basic_statement -> single_statement .)
    CASEX           reduce using rule 221 (basic_statement -> single_statement .)
    WHILE           reduce using rule 221 (basic_statement -> single_statement .)
    WAIT            reduce using rule 221 (basic_statement -> single_statement .)
    FOREVER         reduce using rule 221 (basic_statement -> single_statement .)
    BEGIN           reduce using rule 221 (basic_statement -> single_statement .)
    FORK            reduce using rule 221 (basic_statement -> single_statement .)
    DELAY           reduce using rule 221 (basic_statement -> single_statement .)
    AT              reduce using rule 221 (basic_statement -> single_statement .)
    DOLLER          reduce using rule 221 (basic_statement -> single_statement .)
    DISABLE         reduce using rule 221 (basic_statement -> single_statement .)
    LBRACE          reduce using rule 221 (basic_statement -> single_statement .)
    SEMICOLON       reduce using rule 221 (basic_statement -> single_statement .)
    JOIN            reduce using rule 221 (basic_statement -> single_statement .)
    ENDFUNCTION     reduce using rule 221 (basic_statement -> single_statement .)
    ENDTASK         reduce using rule 221 (basic_statement -> single_statement .)
    ENDCASE         reduce using rule 221 (basic_statement -> single_statement .)
    DEFAULT         reduce using rule 221 (basic_statement -> single_statement .)
    MINUS           reduce using rule 221 (basic_statement -> single_statement .)
    PLUS            reduce using rule 221 (basic_statement -> single_statement .)
    LNOT            reduce using rule 221 (basic_statement -> single_statement .)
    NOT             reduce using rule 221 (basic_statement -> single_statement .)
    AND             reduce using rule 221 (basic_statement -> single_statement .)
    NAND            reduce using rule 221 (basic_statement -> single_statement .)
    NOR             reduce using rule 221 (basic_statement -> single_statement .)
    OR              reduce using rule 221 (basic_statement -> single_statement .)
    XOR             reduce using rule 221 (basic_statement -> single_statement .)
    XNOR            reduce using rule 221 (basic_statement -> single_statement .)
    INTNUMBER_DEC   reduce using rule 221 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 221 (basic_statement -> single_statement .)
    INTNUMBER_BIN   reduce using rule 221 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 221 (basic_statement -> single_statement .)
    INTNUMBER_OCT   reduce using rule 221 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 221 (basic_statement -> single_statement .)
    INTNUMBER_HEX   reduce using rule 221 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 221 (basic_statement -> single_statement .)
    FLOATNUMBER     reduce using rule 221 (basic_statement -> single_statement .)
    STRING_LITERAL  reduce using rule 221 (basic_statement -> single_statement .)


state 182

    (248) if_statement -> IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 322


state 183

    (250) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (223) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> delays . lvalue LE delays rvalue SEMICOLON
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    IF              shift and go to state 323
    LBRACE          shift and go to state 162
    ID              shift and go to state 81

    lvalue                         shift and go to state 324
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 184

    (266) case_statement -> CASE . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 325


state 185

    (267) casex_statement -> CASEX . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 326


state 186

    (256) for_statement -> FOR . LPAREN forpre forcond forpost RPAREN forcontent_statement

    LPAREN          shift and go to state 327


state 187

    (264) while_statement -> WHILE . LPAREN cond RPAREN whilecontent_statement

    LPAREN          shift and go to state 328


state 188

    (277) event_statement -> senslist . SEMICOLON

    SEMICOLON       shift and go to state 329


state 189

    (278) wait_statement -> WAIT . LPAREN cond RPAREN waitcontent_statement

    LPAREN          shift and go to state 330


state 190

    (281) forever_statement -> FOREVER . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    basic_statement                shift and go to state 331
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 191

    (231) block -> BEGIN . block_statements END
    (232) block -> BEGIN . END
    (236) namedblock -> BEGIN . COLON ID namedblock_statements END
    (237) namedblock -> BEGIN . COLON ID END
    (233) block_statements -> . block_statements block_statement
    (234) block_statements -> . block_statement
    (235) block_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 333
    COLON           shift and go to state 334
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    block_statements               shift and go to state 332
    block_statement                shift and go to state 335
    basic_statement                shift and go to state 336
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 192

    (246) parallelblock -> FORK . block_statements JOIN
    (247) parallelblock -> FORK . JOIN
    (233) block_statements -> . block_statements block_statement
    (234) block_statements -> . block_statement
    (235) block_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 338
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    block_statements               shift and go to state 337
    block_statement                shift and go to state 335
    basic_statement                shift and go to state 336
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 193

    (382) single_statement -> DELAY . expression SEMICOLON
    (226) delays -> DELAY . LPAREN expression RPAREN
    (227) delays -> DELAY . identifier
    (228) delays -> DELAY . intnumber
    (229) delays -> DELAY . floatnumber
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (187) stringliteral -> . STRING_LITERAL

    LPAREN          shift and go to state 340
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 339
    identifier                     shift and go to state 341
    intnumber                      shift and go to state 342
    floatnumber                    shift and go to state 343
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    stringliteral                  shift and go to state 106

state 194

    (383) single_statement -> systemcall . SEMICOLON

    SEMICOLON       shift and go to state 344


state 195

    (384) single_statement -> disable . SEMICOLON

    SEMICOLON       shift and go to state 345


state 196

    (230) delays -> empty .
    (196) senslist -> empty .

    IF              reduce using rule 230 (delays -> empty .)
    LBRACE          reduce using rule 230 (delays -> empty .)
    ID              reduce using rule 230 (delays -> empty .)
    SEMICOLON       reduce using rule 196 (senslist -> empty .)


state 197

    (381) disable -> DISABLE . ID

    ID              shift and go to state 346


state 198

    (282) instance -> ID parameterlist . instance_bodylist SEMICOLON
    (284) instance_bodylist -> . instance_bodylist COMMA instance_body
    (285) instance_bodylist -> . instance_body
    (286) instance_body -> . ID LPAREN instance_ports RPAREN
    (287) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 347

    instance_bodylist              shift and go to state 348
    instance_body                  shift and go to state 349

state 199

    (288) instance -> ID instance_bodylist_noname . SEMICOLON
    (290) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 350
    COMMA           shift and go to state 351


state 200

    (293) parameterlist -> DELAY . LPAREN param_args RPAREN
    (294) parameterlist -> DELAY . LPAREN param_args_noname RPAREN

    LPAREN          shift and go to state 352


state 201

    (292) instance_body_noname -> LPAREN . instance_ports RPAREN
    (303) instance_ports -> . instance_ports_list
    (304) instance_ports -> . instance_ports_arg
    (305) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (306) instance_ports_list -> . instance_port_list
    (307) instance_ports_list -> . empty
    (309) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (310) instance_ports_arg -> . instance_port_arg
    (308) instance_port_list -> . expression
    (385) empty -> .
    (311) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (312) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (313) instance_port_arg -> . DOT ID LPAREN RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 385 (empty -> .)
    RPAREN          reduce using rule 385 (empty -> .)
    DOT             shift and go to state 360
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    instance_ports                 shift and go to state 353
    instance_ports_list            shift and go to state 354
    instance_ports_arg             shift and go to state 355
    instance_port_list             shift and go to state 356
    empty                          shift and go to state 357
    instance_port_arg              shift and go to state 358
    expression                     shift and go to state 359
    identifier                     shift and go to state 99
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 202

    (295) parameterlist -> empty .

    ID              reduce using rule 295 (parameterlist -> empty .)


state 203

    (291) instance_bodylist_noname -> instance_body_noname .

    SEMICOLON       reduce using rule 291 (instance_bodylist_noname -> instance_body_noname .)
    COMMA           reduce using rule 291 (instance_bodylist_noname -> instance_body_noname .)


state 204

    (283) instance -> SENS_OR parameterlist . instance_bodylist SEMICOLON
    (284) instance_bodylist -> . instance_bodylist COMMA instance_body
    (285) instance_bodylist -> . instance_body
    (286) instance_body -> . ID LPAREN instance_ports RPAREN
    (287) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 347

    instance_bodylist              shift and go to state 361
    instance_body                  shift and go to state 349

state 205

    (289) instance -> SENS_OR instance_bodylist_noname . SEMICOLON
    (290) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 362
    COMMA           shift and go to state 351


state 206

    (343) function -> FUNCTION width . ID SEMICOLON function_statement ENDFUNCTION

    ID              shift and go to state 363


state 207

    (344) function -> FUNCTION ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 364


state 208

    (362) task -> TASK ID . SEMICOLON task_statement ENDTASK

    SEMICOLON       shift and go to state 365


state 209

    (24) portlist -> LPAREN ports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 366


state 210

    (28) ports -> ports COMMA . portname
    (30) portname -> . ID

    ID              shift and go to state 72

    portname                       shift and go to state 367

state 211

    (26) portlist -> LPAREN RPAREN SEMICOLON .

    GENERATE        reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    REAL            reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    GENVAR          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    INITIAL         reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    TASK            reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    INPUT           reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    INOUT           reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    TRI             reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    REG             reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    WIRE            reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    SIGNED          reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 26 (portlist -> LPAREN RPAREN SEMICOLON .)


state 212

    (25) portlist -> LPAREN ioports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 368


state 213

    (42) ioports -> ioports COMMA . ioport
    (44) ioport -> . sigtypes portname
    (45) ioport -> . sigtypes width portname
    (48) ioport -> . portname
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (30) portname -> . ID
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    ID              shift and go to state 72
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    ioport                         shift and go to state 369
    sigtypes                       shift and go to state 370
    portname                       shift and go to state 371
    sigtype                        shift and go to state 58

state 214

    (46) ioport_head -> sigtypes portname .

    RPAREN          reduce using rule 46 (ioport_head -> sigtypes portname .)
    COMMA           reduce using rule 46 (ioport_head -> sigtypes portname .)


state 215

    (47) ioport_head -> sigtypes width . portname
    (30) portname -> . ID

    ID              shift and go to state 72

    portname                       shift and go to state 372

state 216

    (12) paramlist -> DELAY LPAREN params RPAREN .

    LPAREN          reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)


state 217

    (14) params -> params_begin param_end .

    RPAREN          reduce using rule 14 (params -> params_begin param_end .)


state 218

    (15) params_begin -> params_begin param .

    PARAMETER       reduce using rule 15 (params_begin -> params_begin param .)


state 219

    (21) param_end -> PARAMETER param_substitution_list .
    (18) param -> PARAMETER param_substitution_list . COMMA
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 21 (param_end -> PARAMETER param_substitution_list .)
    COMMA           shift and go to state 373


state 220

    (22) param_end -> PARAMETER width . param_substitution_list
    (19) param -> PARAMETER width . param_substitution_list COMMA
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 374
    param_substitution             shift and go to state 147

state 221

    (23) param_end -> PARAMETER INTEGER . param_substitution_list
    (20) param -> PARAMETER INTEGER . param_substitution_list COMMA
    (95) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (96) param_substitution_list -> . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution_list        shift and go to state 375
    param_substitution             shift and go to state 147

state 222

    (154) expression -> LPAREN expression . RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 376
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 223

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES . RPAREN
    (130) expression -> expression TIMES . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 379
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 378
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 224

    (129) expression -> expression POWER . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 380
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 225

    (131) expression -> expression DIVIDE . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 381
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 226

    (132) expression -> expression MOD . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 382
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 227

    (133) expression -> expression PLUS . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 383
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 228

    (134) expression -> expression MINUS . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 384
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 229

    (135) expression -> expression LSHIFT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 385
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 230

    (136) expression -> expression RSHIFT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 386
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 231

    (137) expression -> expression LSHIFTA . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 387
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 232

    (138) expression -> expression RSHIFTA . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 388
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 233

    (139) expression -> expression LT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 389
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 234

    (140) expression -> expression GT . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 390
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 235

    (141) expression -> expression LE . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 391
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 236

    (142) expression -> expression GE . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 392
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 237

    (143) expression -> expression EQ . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 393
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 238

    (144) expression -> expression NE . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 394
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 239

    (145) expression -> expression EQL . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 395
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 240

    (146) expression -> expression NEL . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 396
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 241

    (147) expression -> expression AND . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 397
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 242

    (148) expression -> expression XOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 398
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 243

    (149) expression -> expression XNOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 399
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 244

    (150) expression -> expression OR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 400
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 245

    (151) expression -> expression LAND . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 401
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 246

    (152) expression -> expression LOR . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 402
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 247

    (153) expression -> expression COND . expression COLON expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 403
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 248

    (119) expression -> MINUS expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 119 (expression -> MINUS expression .)
    POWER           reduce using rule 119 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 119 (expression -> MINUS expression .)
    MOD             reduce using rule 119 (expression -> MINUS expression .)
    PLUS            reduce using rule 119 (expression -> MINUS expression .)
    MINUS           reduce using rule 119 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 119 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 119 (expression -> MINUS expression .)
    LSHIFTA         reduce using rule 119 (expression -> MINUS expression .)
    RSHIFTA         reduce using rule 119 (expression -> MINUS expression .)
    LT              reduce using rule 119 (expression -> MINUS expression .)
    GT              reduce using rule 119 (expression -> MINUS expression .)
    LE              reduce using rule 119 (expression -> MINUS expression .)
    GE              reduce using rule 119 (expression -> MINUS expression .)
    EQ              reduce using rule 119 (expression -> MINUS expression .)
    NE              reduce using rule 119 (expression -> MINUS expression .)
    EQL             reduce using rule 119 (expression -> MINUS expression .)
    NEL             reduce using rule 119 (expression -> MINUS expression .)
    AND             reduce using rule 119 (expression -> MINUS expression .)
    XOR             reduce using rule 119 (expression -> MINUS expression .)
    XNOR            reduce using rule 119 (expression -> MINUS expression .)
    OR              reduce using rule 119 (expression -> MINUS expression .)
    LAND            reduce using rule 119 (expression -> MINUS expression .)
    LOR             reduce using rule 119 (expression -> MINUS expression .)
    COND            reduce using rule 119 (expression -> MINUS expression .)
    RPAREN          reduce using rule 119 (expression -> MINUS expression .)
    LBRACE          reduce using rule 119 (expression -> MINUS expression .)
    RBRACE          reduce using rule 119 (expression -> MINUS expression .)
    COMMA           reduce using rule 119 (expression -> MINUS expression .)
    COLON           reduce using rule 119 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 119 (expression -> MINUS expression .)
    PLUSCOLON       reduce using rule 119 (expression -> MINUS expression .)
    MINUSCOLON      reduce using rule 119 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 119 (expression -> MINUS expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 249

    (120) expression -> PLUS expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 120 (expression -> PLUS expression .)
    POWER           reduce using rule 120 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 120 (expression -> PLUS expression .)
    MOD             reduce using rule 120 (expression -> PLUS expression .)
    PLUS            reduce using rule 120 (expression -> PLUS expression .)
    MINUS           reduce using rule 120 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 120 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 120 (expression -> PLUS expression .)
    LSHIFTA         reduce using rule 120 (expression -> PLUS expression .)
    RSHIFTA         reduce using rule 120 (expression -> PLUS expression .)
    LT              reduce using rule 120 (expression -> PLUS expression .)
    GT              reduce using rule 120 (expression -> PLUS expression .)
    LE              reduce using rule 120 (expression -> PLUS expression .)
    GE              reduce using rule 120 (expression -> PLUS expression .)
    EQ              reduce using rule 120 (expression -> PLUS expression .)
    NE              reduce using rule 120 (expression -> PLUS expression .)
    EQL             reduce using rule 120 (expression -> PLUS expression .)
    NEL             reduce using rule 120 (expression -> PLUS expression .)
    AND             reduce using rule 120 (expression -> PLUS expression .)
    XOR             reduce using rule 120 (expression -> PLUS expression .)
    XNOR            reduce using rule 120 (expression -> PLUS expression .)
    OR              reduce using rule 120 (expression -> PLUS expression .)
    LAND            reduce using rule 120 (expression -> PLUS expression .)
    LOR             reduce using rule 120 (expression -> PLUS expression .)
    COND            reduce using rule 120 (expression -> PLUS expression .)
    RPAREN          reduce using rule 120 (expression -> PLUS expression .)
    LBRACE          reduce using rule 120 (expression -> PLUS expression .)
    RBRACE          reduce using rule 120 (expression -> PLUS expression .)
    COMMA           reduce using rule 120 (expression -> PLUS expression .)
    COLON           reduce using rule 120 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 120 (expression -> PLUS expression .)
    PLUSCOLON       reduce using rule 120 (expression -> PLUS expression .)
    MINUSCOLON      reduce using rule 120 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 120 (expression -> PLUS expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 250

    (121) expression -> LNOT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 121 (expression -> LNOT expression .)
    POWER           reduce using rule 121 (expression -> LNOT expression .)
    DIVIDE          reduce using rule 121 (expression -> LNOT expression .)
    MOD             reduce using rule 121 (expression -> LNOT expression .)
    PLUS            reduce using rule 121 (expression -> LNOT expression .)
    MINUS           reduce using rule 121 (expression -> LNOT expression .)
    LSHIFT          reduce using rule 121 (expression -> LNOT expression .)
    RSHIFT          reduce using rule 121 (expression -> LNOT expression .)
    LSHIFTA         reduce using rule 121 (expression -> LNOT expression .)
    RSHIFTA         reduce using rule 121 (expression -> LNOT expression .)
    LT              reduce using rule 121 (expression -> LNOT expression .)
    GT              reduce using rule 121 (expression -> LNOT expression .)
    LE              reduce using rule 121 (expression -> LNOT expression .)
    GE              reduce using rule 121 (expression -> LNOT expression .)
    EQ              reduce using rule 121 (expression -> LNOT expression .)
    NE              reduce using rule 121 (expression -> LNOT expression .)
    EQL             reduce using rule 121 (expression -> LNOT expression .)
    NEL             reduce using rule 121 (expression -> LNOT expression .)
    AND             reduce using rule 121 (expression -> LNOT expression .)
    XOR             reduce using rule 121 (expression -> LNOT expression .)
    XNOR            reduce using rule 121 (expression -> LNOT expression .)
    OR              reduce using rule 121 (expression -> LNOT expression .)
    LAND            reduce using rule 121 (expression -> LNOT expression .)
    LOR             reduce using rule 121 (expression -> LNOT expression .)
    COND            reduce using rule 121 (expression -> LNOT expression .)
    RPAREN          reduce using rule 121 (expression -> LNOT expression .)
    LBRACE          reduce using rule 121 (expression -> LNOT expression .)
    RBRACE          reduce using rule 121 (expression -> LNOT expression .)
    COMMA           reduce using rule 121 (expression -> LNOT expression .)
    COLON           reduce using rule 121 (expression -> LNOT expression .)
    SEMICOLON       reduce using rule 121 (expression -> LNOT expression .)
    PLUSCOLON       reduce using rule 121 (expression -> LNOT expression .)
    MINUSCOLON      reduce using rule 121 (expression -> LNOT expression .)
    RBRACKET        reduce using rule 121 (expression -> LNOT expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 251

    (122) expression -> NOT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 122 (expression -> NOT expression .)
    POWER           reduce using rule 122 (expression -> NOT expression .)
    DIVIDE          reduce using rule 122 (expression -> NOT expression .)
    MOD             reduce using rule 122 (expression -> NOT expression .)
    PLUS            reduce using rule 122 (expression -> NOT expression .)
    MINUS           reduce using rule 122 (expression -> NOT expression .)
    LSHIFT          reduce using rule 122 (expression -> NOT expression .)
    RSHIFT          reduce using rule 122 (expression -> NOT expression .)
    LSHIFTA         reduce using rule 122 (expression -> NOT expression .)
    RSHIFTA         reduce using rule 122 (expression -> NOT expression .)
    LT              reduce using rule 122 (expression -> NOT expression .)
    GT              reduce using rule 122 (expression -> NOT expression .)
    LE              reduce using rule 122 (expression -> NOT expression .)
    GE              reduce using rule 122 (expression -> NOT expression .)
    EQ              reduce using rule 122 (expression -> NOT expression .)
    NE              reduce using rule 122 (expression -> NOT expression .)
    EQL             reduce using rule 122 (expression -> NOT expression .)
    NEL             reduce using rule 122 (expression -> NOT expression .)
    AND             reduce using rule 122 (expression -> NOT expression .)
    XOR             reduce using rule 122 (expression -> NOT expression .)
    XNOR            reduce using rule 122 (expression -> NOT expression .)
    OR              reduce using rule 122 (expression -> NOT expression .)
    LAND            reduce using rule 122 (expression -> NOT expression .)
    LOR             reduce using rule 122 (expression -> NOT expression .)
    COND            reduce using rule 122 (expression -> NOT expression .)
    RPAREN          reduce using rule 122 (expression -> NOT expression .)
    LBRACE          reduce using rule 122 (expression -> NOT expression .)
    RBRACE          reduce using rule 122 (expression -> NOT expression .)
    COMMA           reduce using rule 122 (expression -> NOT expression .)
    COLON           reduce using rule 122 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 122 (expression -> NOT expression .)
    PLUSCOLON       reduce using rule 122 (expression -> NOT expression .)
    MINUSCOLON      reduce using rule 122 (expression -> NOT expression .)
    RBRACKET        reduce using rule 122 (expression -> NOT expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 252

    (123) expression -> AND expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 123 (expression -> AND expression .)
    POWER           reduce using rule 123 (expression -> AND expression .)
    DIVIDE          reduce using rule 123 (expression -> AND expression .)
    MOD             reduce using rule 123 (expression -> AND expression .)
    PLUS            reduce using rule 123 (expression -> AND expression .)
    MINUS           reduce using rule 123 (expression -> AND expression .)
    LSHIFT          reduce using rule 123 (expression -> AND expression .)
    RSHIFT          reduce using rule 123 (expression -> AND expression .)
    LSHIFTA         reduce using rule 123 (expression -> AND expression .)
    RSHIFTA         reduce using rule 123 (expression -> AND expression .)
    LT              reduce using rule 123 (expression -> AND expression .)
    GT              reduce using rule 123 (expression -> AND expression .)
    LE              reduce using rule 123 (expression -> AND expression .)
    GE              reduce using rule 123 (expression -> AND expression .)
    EQ              reduce using rule 123 (expression -> AND expression .)
    NE              reduce using rule 123 (expression -> AND expression .)
    EQL             reduce using rule 123 (expression -> AND expression .)
    NEL             reduce using rule 123 (expression -> AND expression .)
    AND             reduce using rule 123 (expression -> AND expression .)
    XOR             reduce using rule 123 (expression -> AND expression .)
    XNOR            reduce using rule 123 (expression -> AND expression .)
    OR              reduce using rule 123 (expression -> AND expression .)
    LAND            reduce using rule 123 (expression -> AND expression .)
    LOR             reduce using rule 123 (expression -> AND expression .)
    COND            reduce using rule 123 (expression -> AND expression .)
    RPAREN          reduce using rule 123 (expression -> AND expression .)
    LBRACE          reduce using rule 123 (expression -> AND expression .)
    RBRACE          reduce using rule 123 (expression -> AND expression .)
    COMMA           reduce using rule 123 (expression -> AND expression .)
    COLON           reduce using rule 123 (expression -> AND expression .)
    SEMICOLON       reduce using rule 123 (expression -> AND expression .)
    PLUSCOLON       reduce using rule 123 (expression -> AND expression .)
    MINUSCOLON      reduce using rule 123 (expression -> AND expression .)
    RBRACKET        reduce using rule 123 (expression -> AND expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 253

    (124) expression -> NAND expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 124 (expression -> NAND expression .)
    POWER           reduce using rule 124 (expression -> NAND expression .)
    DIVIDE          reduce using rule 124 (expression -> NAND expression .)
    MOD             reduce using rule 124 (expression -> NAND expression .)
    PLUS            reduce using rule 124 (expression -> NAND expression .)
    MINUS           reduce using rule 124 (expression -> NAND expression .)
    LSHIFT          reduce using rule 124 (expression -> NAND expression .)
    RSHIFT          reduce using rule 124 (expression -> NAND expression .)
    LSHIFTA         reduce using rule 124 (expression -> NAND expression .)
    RSHIFTA         reduce using rule 124 (expression -> NAND expression .)
    LT              reduce using rule 124 (expression -> NAND expression .)
    GT              reduce using rule 124 (expression -> NAND expression .)
    LE              reduce using rule 124 (expression -> NAND expression .)
    GE              reduce using rule 124 (expression -> NAND expression .)
    EQ              reduce using rule 124 (expression -> NAND expression .)
    NE              reduce using rule 124 (expression -> NAND expression .)
    EQL             reduce using rule 124 (expression -> NAND expression .)
    NEL             reduce using rule 124 (expression -> NAND expression .)
    AND             reduce using rule 124 (expression -> NAND expression .)
    XOR             reduce using rule 124 (expression -> NAND expression .)
    XNOR            reduce using rule 124 (expression -> NAND expression .)
    OR              reduce using rule 124 (expression -> NAND expression .)
    LAND            reduce using rule 124 (expression -> NAND expression .)
    LOR             reduce using rule 124 (expression -> NAND expression .)
    COND            reduce using rule 124 (expression -> NAND expression .)
    RPAREN          reduce using rule 124 (expression -> NAND expression .)
    LBRACE          reduce using rule 124 (expression -> NAND expression .)
    RBRACE          reduce using rule 124 (expression -> NAND expression .)
    COMMA           reduce using rule 124 (expression -> NAND expression .)
    COLON           reduce using rule 124 (expression -> NAND expression .)
    SEMICOLON       reduce using rule 124 (expression -> NAND expression .)
    PLUSCOLON       reduce using rule 124 (expression -> NAND expression .)
    MINUSCOLON      reduce using rule 124 (expression -> NAND expression .)
    RBRACKET        reduce using rule 124 (expression -> NAND expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 254

    (125) expression -> NOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 125 (expression -> NOR expression .)
    POWER           reduce using rule 125 (expression -> NOR expression .)
    DIVIDE          reduce using rule 125 (expression -> NOR expression .)
    MOD             reduce using rule 125 (expression -> NOR expression .)
    PLUS            reduce using rule 125 (expression -> NOR expression .)
    MINUS           reduce using rule 125 (expression -> NOR expression .)
    LSHIFT          reduce using rule 125 (expression -> NOR expression .)
    RSHIFT          reduce using rule 125 (expression -> NOR expression .)
    LSHIFTA         reduce using rule 125 (expression -> NOR expression .)
    RSHIFTA         reduce using rule 125 (expression -> NOR expression .)
    LT              reduce using rule 125 (expression -> NOR expression .)
    GT              reduce using rule 125 (expression -> NOR expression .)
    LE              reduce using rule 125 (expression -> NOR expression .)
    GE              reduce using rule 125 (expression -> NOR expression .)
    EQ              reduce using rule 125 (expression -> NOR expression .)
    NE              reduce using rule 125 (expression -> NOR expression .)
    EQL             reduce using rule 125 (expression -> NOR expression .)
    NEL             reduce using rule 125 (expression -> NOR expression .)
    AND             reduce using rule 125 (expression -> NOR expression .)
    XOR             reduce using rule 125 (expression -> NOR expression .)
    XNOR            reduce using rule 125 (expression -> NOR expression .)
    OR              reduce using rule 125 (expression -> NOR expression .)
    LAND            reduce using rule 125 (expression -> NOR expression .)
    LOR             reduce using rule 125 (expression -> NOR expression .)
    COND            reduce using rule 125 (expression -> NOR expression .)
    RPAREN          reduce using rule 125 (expression -> NOR expression .)
    LBRACE          reduce using rule 125 (expression -> NOR expression .)
    RBRACE          reduce using rule 125 (expression -> NOR expression .)
    COMMA           reduce using rule 125 (expression -> NOR expression .)
    COLON           reduce using rule 125 (expression -> NOR expression .)
    SEMICOLON       reduce using rule 125 (expression -> NOR expression .)
    PLUSCOLON       reduce using rule 125 (expression -> NOR expression .)
    MINUSCOLON      reduce using rule 125 (expression -> NOR expression .)
    RBRACKET        reduce using rule 125 (expression -> NOR expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 255

    (126) expression -> OR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 126 (expression -> OR expression .)
    POWER           reduce using rule 126 (expression -> OR expression .)
    DIVIDE          reduce using rule 126 (expression -> OR expression .)
    MOD             reduce using rule 126 (expression -> OR expression .)
    PLUS            reduce using rule 126 (expression -> OR expression .)
    MINUS           reduce using rule 126 (expression -> OR expression .)
    LSHIFT          reduce using rule 126 (expression -> OR expression .)
    RSHIFT          reduce using rule 126 (expression -> OR expression .)
    LSHIFTA         reduce using rule 126 (expression -> OR expression .)
    RSHIFTA         reduce using rule 126 (expression -> OR expression .)
    LT              reduce using rule 126 (expression -> OR expression .)
    GT              reduce using rule 126 (expression -> OR expression .)
    LE              reduce using rule 126 (expression -> OR expression .)
    GE              reduce using rule 126 (expression -> OR expression .)
    EQ              reduce using rule 126 (expression -> OR expression .)
    NE              reduce using rule 126 (expression -> OR expression .)
    EQL             reduce using rule 126 (expression -> OR expression .)
    NEL             reduce using rule 126 (expression -> OR expression .)
    AND             reduce using rule 126 (expression -> OR expression .)
    XOR             reduce using rule 126 (expression -> OR expression .)
    XNOR            reduce using rule 126 (expression -> OR expression .)
    OR              reduce using rule 126 (expression -> OR expression .)
    LAND            reduce using rule 126 (expression -> OR expression .)
    LOR             reduce using rule 126 (expression -> OR expression .)
    COND            reduce using rule 126 (expression -> OR expression .)
    RPAREN          reduce using rule 126 (expression -> OR expression .)
    LBRACE          reduce using rule 126 (expression -> OR expression .)
    RBRACE          reduce using rule 126 (expression -> OR expression .)
    COMMA           reduce using rule 126 (expression -> OR expression .)
    COLON           reduce using rule 126 (expression -> OR expression .)
    SEMICOLON       reduce using rule 126 (expression -> OR expression .)
    PLUSCOLON       reduce using rule 126 (expression -> OR expression .)
    MINUSCOLON      reduce using rule 126 (expression -> OR expression .)
    RBRACKET        reduce using rule 126 (expression -> OR expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 256

    (127) expression -> XOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 127 (expression -> XOR expression .)
    POWER           reduce using rule 127 (expression -> XOR expression .)
    DIVIDE          reduce using rule 127 (expression -> XOR expression .)
    MOD             reduce using rule 127 (expression -> XOR expression .)
    PLUS            reduce using rule 127 (expression -> XOR expression .)
    MINUS           reduce using rule 127 (expression -> XOR expression .)
    LSHIFT          reduce using rule 127 (expression -> XOR expression .)
    RSHIFT          reduce using rule 127 (expression -> XOR expression .)
    LSHIFTA         reduce using rule 127 (expression -> XOR expression .)
    RSHIFTA         reduce using rule 127 (expression -> XOR expression .)
    LT              reduce using rule 127 (expression -> XOR expression .)
    GT              reduce using rule 127 (expression -> XOR expression .)
    LE              reduce using rule 127 (expression -> XOR expression .)
    GE              reduce using rule 127 (expression -> XOR expression .)
    EQ              reduce using rule 127 (expression -> XOR expression .)
    NE              reduce using rule 127 (expression -> XOR expression .)
    EQL             reduce using rule 127 (expression -> XOR expression .)
    NEL             reduce using rule 127 (expression -> XOR expression .)
    AND             reduce using rule 127 (expression -> XOR expression .)
    XOR             reduce using rule 127 (expression -> XOR expression .)
    XNOR            reduce using rule 127 (expression -> XOR expression .)
    OR              reduce using rule 127 (expression -> XOR expression .)
    LAND            reduce using rule 127 (expression -> XOR expression .)
    LOR             reduce using rule 127 (expression -> XOR expression .)
    COND            reduce using rule 127 (expression -> XOR expression .)
    RPAREN          reduce using rule 127 (expression -> XOR expression .)
    LBRACE          reduce using rule 127 (expression -> XOR expression .)
    RBRACE          reduce using rule 127 (expression -> XOR expression .)
    COMMA           reduce using rule 127 (expression -> XOR expression .)
    COLON           reduce using rule 127 (expression -> XOR expression .)
    SEMICOLON       reduce using rule 127 (expression -> XOR expression .)
    PLUSCOLON       reduce using rule 127 (expression -> XOR expression .)
    MINUSCOLON      reduce using rule 127 (expression -> XOR expression .)
    RBRACKET        reduce using rule 127 (expression -> XOR expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 257

    (128) expression -> XNOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 128 (expression -> XNOR expression .)
    POWER           reduce using rule 128 (expression -> XNOR expression .)
    DIVIDE          reduce using rule 128 (expression -> XNOR expression .)
    MOD             reduce using rule 128 (expression -> XNOR expression .)
    PLUS            reduce using rule 128 (expression -> XNOR expression .)
    MINUS           reduce using rule 128 (expression -> XNOR expression .)
    LSHIFT          reduce using rule 128 (expression -> XNOR expression .)
    RSHIFT          reduce using rule 128 (expression -> XNOR expression .)
    LSHIFTA         reduce using rule 128 (expression -> XNOR expression .)
    RSHIFTA         reduce using rule 128 (expression -> XNOR expression .)
    LT              reduce using rule 128 (expression -> XNOR expression .)
    GT              reduce using rule 128 (expression -> XNOR expression .)
    LE              reduce using rule 128 (expression -> XNOR expression .)
    GE              reduce using rule 128 (expression -> XNOR expression .)
    EQ              reduce using rule 128 (expression -> XNOR expression .)
    NE              reduce using rule 128 (expression -> XNOR expression .)
    EQL             reduce using rule 128 (expression -> XNOR expression .)
    NEL             reduce using rule 128 (expression -> XNOR expression .)
    AND             reduce using rule 128 (expression -> XNOR expression .)
    XOR             reduce using rule 128 (expression -> XNOR expression .)
    XNOR            reduce using rule 128 (expression -> XNOR expression .)
    OR              reduce using rule 128 (expression -> XNOR expression .)
    LAND            reduce using rule 128 (expression -> XNOR expression .)
    LOR             reduce using rule 128 (expression -> XNOR expression .)
    COND            reduce using rule 128 (expression -> XNOR expression .)
    RPAREN          reduce using rule 128 (expression -> XNOR expression .)
    LBRACE          reduce using rule 128 (expression -> XNOR expression .)
    RBRACE          reduce using rule 128 (expression -> XNOR expression .)
    COMMA           reduce using rule 128 (expression -> XNOR expression .)
    COLON           reduce using rule 128 (expression -> XNOR expression .)
    SEMICOLON       reduce using rule 128 (expression -> XNOR expression .)
    PLUSCOLON       reduce using rule 128 (expression -> XNOR expression .)
    MINUSCOLON      reduce using rule 128 (expression -> XNOR expression .)
    RBRACKET        reduce using rule 128 (expression -> XNOR expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 258

    (170) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (171) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (172) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (174) pointer -> pointer LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 404
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 259

    (380) scope -> pointer DOT .

    ID              reduce using rule 380 (scope -> pointer DOT .)


state 260

    (167) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (168) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 405
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 261

    (358) functioncall -> identifier LPAREN . func_args RPAREN
    (359) func_args -> . func_args COMMA expression
    (360) func_args -> . expression
    (361) func_args -> . empty
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (385) empty -> .
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    RPAREN          reduce using rule 385 (empty -> .)
    COMMA           reduce using rule 385 (empty -> .)
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    func_args                      shift and go to state 406
    expression                     shift and go to state 407
    empty                          shift and go to state 408
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 262

    (379) scope -> identifier DOT .

    ID              reduce using rule 379 (scope -> identifier DOT .)


state 263

    (163) concat -> LBRACE concatlist . RBRACE
    (164) concatlist -> concatlist . COMMA expression

    RBRACE          shift and go to state 409
    COMMA           shift and go to state 410


state 264

    (166) repeat -> LBRACE expression . concat RBRACE
    (165) concatlist -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression
    (163) concat -> . LBRACE concatlist RBRACE

    RBRACE          reduce using rule 165 (concatlist -> expression .)
    COMMA           reduce using rule 165 (concatlist -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247
    LBRACE          shift and go to state 411

    concat                         shift and go to state 412

state 265

    (336) systemcall -> DOLLER ID .
    (337) systemcall -> DOLLER ID . LPAREN sysargs RPAREN

    TIMES           reduce using rule 336 (systemcall -> DOLLER ID .)
    POWER           reduce using rule 336 (systemcall -> DOLLER ID .)
    DIVIDE          reduce using rule 336 (systemcall -> DOLLER ID .)
    MOD             reduce using rule 336 (systemcall -> DOLLER ID .)
    PLUS            reduce using rule 336 (systemcall -> DOLLER ID .)
    MINUS           reduce using rule 336 (systemcall -> DOLLER ID .)
    LSHIFT          reduce using rule 336 (systemcall -> DOLLER ID .)
    RSHIFT          reduce using rule 336 (systemcall -> DOLLER ID .)
    LSHIFTA         reduce using rule 336 (systemcall -> DOLLER ID .)
    RSHIFTA         reduce using rule 336 (systemcall -> DOLLER ID .)
    LT              reduce using rule 336 (systemcall -> DOLLER ID .)
    GT              reduce using rule 336 (systemcall -> DOLLER ID .)
    LE              reduce using rule 336 (systemcall -> DOLLER ID .)
    GE              reduce using rule 336 (systemcall -> DOLLER ID .)
    EQ              reduce using rule 336 (systemcall -> DOLLER ID .)
    NE              reduce using rule 336 (systemcall -> DOLLER ID .)
    EQL             reduce using rule 336 (systemcall -> DOLLER ID .)
    NEL             reduce using rule 336 (systemcall -> DOLLER ID .)
    AND             reduce using rule 336 (systemcall -> DOLLER ID .)
    XOR             reduce using rule 336 (systemcall -> DOLLER ID .)
    XNOR            reduce using rule 336 (systemcall -> DOLLER ID .)
    OR              reduce using rule 336 (systemcall -> DOLLER ID .)
    LAND            reduce using rule 336 (systemcall -> DOLLER ID .)
    LOR             reduce using rule 336 (systemcall -> DOLLER ID .)
    COND            reduce using rule 336 (systemcall -> DOLLER ID .)
    SEMICOLON       reduce using rule 336 (systemcall -> DOLLER ID .)
    RPAREN          reduce using rule 336 (systemcall -> DOLLER ID .)
    LBRACE          reduce using rule 336 (systemcall -> DOLLER ID .)
    RBRACE          reduce using rule 336 (systemcall -> DOLLER ID .)
    COMMA           reduce using rule 336 (systemcall -> DOLLER ID .)
    COLON           reduce using rule 336 (systemcall -> DOLLER ID .)
    PLUSCOLON       reduce using rule 336 (systemcall -> DOLLER ID .)
    MINUSCOLON      reduce using rule 336 (systemcall -> DOLLER ID .)
    RBRACKET        reduce using rule 336 (systemcall -> DOLLER ID .)
    LPAREN          shift and go to state 413


state 266

    (338) systemcall -> DOLLER SIGNED . LPAREN sysargs RPAREN

    LPAREN          shift and go to state 414


state 267

    (378) identifier -> scope ID .

    LBRACKET        reduce using rule 378 (identifier -> scope ID .)
    LPAREN          reduce using rule 378 (identifier -> scope ID .)
    DOT             reduce using rule 378 (identifier -> scope ID .)
    TIMES           reduce using rule 378 (identifier -> scope ID .)
    POWER           reduce using rule 378 (identifier -> scope ID .)
    DIVIDE          reduce using rule 378 (identifier -> scope ID .)
    MOD             reduce using rule 378 (identifier -> scope ID .)
    PLUS            reduce using rule 378 (identifier -> scope ID .)
    MINUS           reduce using rule 378 (identifier -> scope ID .)
    LSHIFT          reduce using rule 378 (identifier -> scope ID .)
    RSHIFT          reduce using rule 378 (identifier -> scope ID .)
    LSHIFTA         reduce using rule 378 (identifier -> scope ID .)
    RSHIFTA         reduce using rule 378 (identifier -> scope ID .)
    LT              reduce using rule 378 (identifier -> scope ID .)
    GT              reduce using rule 378 (identifier -> scope ID .)
    LE              reduce using rule 378 (identifier -> scope ID .)
    GE              reduce using rule 378 (identifier -> scope ID .)
    EQ              reduce using rule 378 (identifier -> scope ID .)
    NE              reduce using rule 378 (identifier -> scope ID .)
    EQL             reduce using rule 378 (identifier -> scope ID .)
    NEL             reduce using rule 378 (identifier -> scope ID .)
    AND             reduce using rule 378 (identifier -> scope ID .)
    XOR             reduce using rule 378 (identifier -> scope ID .)
    XNOR            reduce using rule 378 (identifier -> scope ID .)
    OR              reduce using rule 378 (identifier -> scope ID .)
    LAND            reduce using rule 378 (identifier -> scope ID .)
    LOR             reduce using rule 378 (identifier -> scope ID .)
    COND            reduce using rule 378 (identifier -> scope ID .)
    EQUALS          reduce using rule 378 (identifier -> scope ID .)
    RPAREN          reduce using rule 378 (identifier -> scope ID .)
    LBRACE          reduce using rule 378 (identifier -> scope ID .)
    RBRACE          reduce using rule 378 (identifier -> scope ID .)
    COMMA           reduce using rule 378 (identifier -> scope ID .)
    COLON           reduce using rule 378 (identifier -> scope ID .)
    SEMICOLON       reduce using rule 378 (identifier -> scope ID .)
    PLUSCOLON       reduce using rule 378 (identifier -> scope ID .)
    MINUSCOLON      reduce using rule 378 (identifier -> scope ID .)
    RBRACKET        reduce using rule 378 (identifier -> scope ID .)
    ID              reduce using rule 378 (identifier -> scope ID .)
    LNOT            reduce using rule 378 (identifier -> scope ID .)
    NOT             reduce using rule 378 (identifier -> scope ID .)
    NAND            reduce using rule 378 (identifier -> scope ID .)
    NOR             reduce using rule 378 (identifier -> scope ID .)
    DOLLER          reduce using rule 378 (identifier -> scope ID .)
    INTNUMBER_DEC   reduce using rule 378 (identifier -> scope ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 378 (identifier -> scope ID .)
    INTNUMBER_BIN   reduce using rule 378 (identifier -> scope ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 378 (identifier -> scope ID .)
    INTNUMBER_OCT   reduce using rule 378 (identifier -> scope ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 378 (identifier -> scope ID .)
    INTNUMBER_HEX   reduce using rule 378 (identifier -> scope ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 378 (identifier -> scope ID .)
    FLOATNUMBER     reduce using rule 378 (identifier -> scope ID .)
    STRING_LITERAL  reduce using rule 378 (identifier -> scope ID .)
    IF              reduce using rule 378 (identifier -> scope ID .)
    CASE            reduce using rule 378 (identifier -> scope ID .)
    CASEX           reduce using rule 378 (identifier -> scope ID .)
    FOR             reduce using rule 378 (identifier -> scope ID .)
    WHILE           reduce using rule 378 (identifier -> scope ID .)
    WAIT            reduce using rule 378 (identifier -> scope ID .)
    FOREVER         reduce using rule 378 (identifier -> scope ID .)
    BEGIN           reduce using rule 378 (identifier -> scope ID .)
    FORK            reduce using rule 378 (identifier -> scope ID .)
    DELAY           reduce using rule 378 (identifier -> scope ID .)
    AT              reduce using rule 378 (identifier -> scope ID .)
    DISABLE         reduce using rule 378 (identifier -> scope ID .)
    SENS_OR         reduce using rule 378 (identifier -> scope ID .)


state 268

    (318) generate -> GENERATE generate_items ENDGENERATE .

    ENDMODULE       reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    GENERATE        reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    INTEGER         reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    REAL            reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    PARAMETER       reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    LOCALPARAM      reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    GENVAR          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    ASSIGN          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    INITIAL         reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    ID              reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    SENS_OR         reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    FUNCTION        reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    TASK            reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    LPAREN          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    INPUT           reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    OUTPUT          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    INOUT           reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    TRI             reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    REG             reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    WIRE            reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    SIGNED          reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY0         reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY1         reduce using rule 318 (generate -> GENERATE generate_items ENDGENERATE .)


state 269

    (320) generate_items -> generate_items generate_item .

    ENDGENERATE     reduce using rule 320 (generate_items -> generate_items generate_item .)
    IF              reduce using rule 320 (generate_items -> generate_items generate_item .)
    FOR             reduce using rule 320 (generate_items -> generate_items generate_item .)
    INTEGER         reduce using rule 320 (generate_items -> generate_items generate_item .)
    REAL            reduce using rule 320 (generate_items -> generate_items generate_item .)
    PARAMETER       reduce using rule 320 (generate_items -> generate_items generate_item .)
    LOCALPARAM      reduce using rule 320 (generate_items -> generate_items generate_item .)
    GENVAR          reduce using rule 320 (generate_items -> generate_items generate_item .)
    ASSIGN          reduce using rule 320 (generate_items -> generate_items generate_item .)
    ALWAYS          reduce using rule 320 (generate_items -> generate_items generate_item .)
    INITIAL         reduce using rule 320 (generate_items -> generate_items generate_item .)
    ID              reduce using rule 320 (generate_items -> generate_items generate_item .)
    SENS_OR         reduce using rule 320 (generate_items -> generate_items generate_item .)
    FUNCTION        reduce using rule 320 (generate_items -> generate_items generate_item .)
    TASK            reduce using rule 320 (generate_items -> generate_items generate_item .)
    LPAREN          reduce using rule 320 (generate_items -> generate_items generate_item .)
    INPUT           reduce using rule 320 (generate_items -> generate_items generate_item .)
    OUTPUT          reduce using rule 320 (generate_items -> generate_items generate_item .)
    INOUT           reduce using rule 320 (generate_items -> generate_items generate_item .)
    TRI             reduce using rule 320 (generate_items -> generate_items generate_item .)
    REG             reduce using rule 320 (generate_items -> generate_items generate_item .)
    WIRE            reduce using rule 320 (generate_items -> generate_items generate_item .)
    SIGNED          reduce using rule 320 (generate_items -> generate_items generate_item .)
    SUPPLY0         reduce using rule 320 (generate_items -> generate_items generate_item .)
    SUPPLY1         reduce using rule 320 (generate_items -> generate_items generate_item .)
    END             reduce using rule 320 (generate_items -> generate_items generate_item .)


state 270

    (327) generate_if -> IF LPAREN . cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> IF LPAREN . cond RPAREN gif_true_item
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    cond                           shift and go to state 415
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 271

    (333) generate_for -> FOR LPAREN . forpre forcond forpost RPAREN generate_forcontent
    (257) forpre -> . blocking_substitution
    (258) forpre -> . SEMICOLON
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    SEMICOLON       shift and go to state 419
    DELAY           shift and go to state 135
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)

    forpre                         shift and go to state 417
    blocking_substitution          shift and go to state 418
    delays                         shift and go to state 420
    empty                          shift and go to state 136

state 272

    (70) decl -> sigtypes declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    GENERATE        reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    INTEGER         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    REAL            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    GENVAR          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    INITIAL         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    ID              reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    TASK            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    LPAREN          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    INPUT           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    INOUT           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    TRI             reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    REG             reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    WIRE            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    SIGNED          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    IF              reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    FOR             reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    WHILE           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    CASE            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    CASEX           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    BEGIN           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    DELAY           reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    LBRACE          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    END             reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    WAIT            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    FOREVER         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    FORK            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    AT              reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    DOLLER          reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    DISABLE         reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)
    ELSE            reduce using rule 70 (decl -> sigtypes declnamelist SEMICOLON .)


state 273

    (72) declnamelist -> declnamelist COMMA . declname
    (74) declname -> . ID
    (75) declname -> . ID length

    ID              shift and go to state 422

    declname                       shift and go to state 421

state 274

    (71) decl -> sigtypes width declnamelist . SEMICOLON
    (72) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 423
    COMMA           shift and go to state 273


state 275

    (77) declassign -> sigtypes width declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 424


state 276

    (76) declassign -> sigtypes declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENERATE        reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    INTEGER         reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    REAL            reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENVAR          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    INITIAL         reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    ID              reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    TASK            reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    LPAREN          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    INPUT           reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    INOUT           reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    TRI             reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    REG             reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    WIRE            reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    SIGNED          reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    IF              reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    FOR             reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    ELSE            reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)
    END             reduce using rule 76 (declassign -> sigtypes declassign_element SEMICOLON .)


state 277

    (49) width -> LBRACKET expression . COLON expression RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 425
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 278

    (78) declassign_element -> ID EQUALS . rvalue
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 426
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 279

    (75) declname -> ID length .

    SEMICOLON       reduce using rule 75 (declname -> ID length .)
    COMMA           reduce using rule 75 (declname -> ID length .)


state 280

    (50) length -> LBRACKET . expression COLON expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 428
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 281

    (79) declassign_element -> delays ID . EQUALS delays rvalue

    EQUALS          shift and go to state 429


state 282

    (226) delays -> DELAY LPAREN . expression RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 430
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 283

    (227) delays -> DELAY identifier .
    (379) scope -> identifier . DOT
    (173) pointer -> identifier . LBRACKET expression RBRACKET

    ID              reduce using rule 227 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 227 (delays -> DELAY identifier .)
    MINUS           reduce using rule 227 (delays -> DELAY identifier .)
    PLUS            reduce using rule 227 (delays -> DELAY identifier .)
    LNOT            reduce using rule 227 (delays -> DELAY identifier .)
    NOT             reduce using rule 227 (delays -> DELAY identifier .)
    AND             reduce using rule 227 (delays -> DELAY identifier .)
    NAND            reduce using rule 227 (delays -> DELAY identifier .)
    NOR             reduce using rule 227 (delays -> DELAY identifier .)
    OR              reduce using rule 227 (delays -> DELAY identifier .)
    XOR             reduce using rule 227 (delays -> DELAY identifier .)
    XNOR            reduce using rule 227 (delays -> DELAY identifier .)
    LPAREN          reduce using rule 227 (delays -> DELAY identifier .)
    DOLLER          reduce using rule 227 (delays -> DELAY identifier .)
    INTNUMBER_DEC   reduce using rule 227 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_DEC reduce using rule 227 (delays -> DELAY identifier .)
    INTNUMBER_BIN   reduce using rule 227 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_BIN reduce using rule 227 (delays -> DELAY identifier .)
    INTNUMBER_OCT   reduce using rule 227 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_OCT reduce using rule 227 (delays -> DELAY identifier .)
    INTNUMBER_HEX   reduce using rule 227 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_HEX reduce using rule 227 (delays -> DELAY identifier .)
    FLOATNUMBER     reduce using rule 227 (delays -> DELAY identifier .)
    STRING_LITERAL  reduce using rule 227 (delays -> DELAY identifier .)
    IF              reduce using rule 227 (delays -> DELAY identifier .)
    DOT             shift and go to state 262
    LBRACKET        shift and go to state 431


state 284

    (228) delays -> DELAY intnumber .

    ID              reduce using rule 228 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 228 (delays -> DELAY intnumber .)
    MINUS           reduce using rule 228 (delays -> DELAY intnumber .)
    PLUS            reduce using rule 228 (delays -> DELAY intnumber .)
    LNOT            reduce using rule 228 (delays -> DELAY intnumber .)
    NOT             reduce using rule 228 (delays -> DELAY intnumber .)
    AND             reduce using rule 228 (delays -> DELAY intnumber .)
    NAND            reduce using rule 228 (delays -> DELAY intnumber .)
    NOR             reduce using rule 228 (delays -> DELAY intnumber .)
    OR              reduce using rule 228 (delays -> DELAY intnumber .)
    XOR             reduce using rule 228 (delays -> DELAY intnumber .)
    XNOR            reduce using rule 228 (delays -> DELAY intnumber .)
    LPAREN          reduce using rule 228 (delays -> DELAY intnumber .)
    DOLLER          reduce using rule 228 (delays -> DELAY intnumber .)
    INTNUMBER_DEC   reduce using rule 228 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 228 (delays -> DELAY intnumber .)
    INTNUMBER_BIN   reduce using rule 228 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 228 (delays -> DELAY intnumber .)
    INTNUMBER_OCT   reduce using rule 228 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 228 (delays -> DELAY intnumber .)
    INTNUMBER_HEX   reduce using rule 228 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 228 (delays -> DELAY intnumber .)
    FLOATNUMBER     reduce using rule 228 (delays -> DELAY intnumber .)
    STRING_LITERAL  reduce using rule 228 (delays -> DELAY intnumber .)
    IF              reduce using rule 228 (delays -> DELAY intnumber .)


state 285

    (229) delays -> DELAY floatnumber .

    ID              reduce using rule 229 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 229 (delays -> DELAY floatnumber .)
    MINUS           reduce using rule 229 (delays -> DELAY floatnumber .)
    PLUS            reduce using rule 229 (delays -> DELAY floatnumber .)
    LNOT            reduce using rule 229 (delays -> DELAY floatnumber .)
    NOT             reduce using rule 229 (delays -> DELAY floatnumber .)
    AND             reduce using rule 229 (delays -> DELAY floatnumber .)
    NAND            reduce using rule 229 (delays -> DELAY floatnumber .)
    NOR             reduce using rule 229 (delays -> DELAY floatnumber .)
    OR              reduce using rule 229 (delays -> DELAY floatnumber .)
    XOR             reduce using rule 229 (delays -> DELAY floatnumber .)
    XNOR            reduce using rule 229 (delays -> DELAY floatnumber .)
    LPAREN          reduce using rule 229 (delays -> DELAY floatnumber .)
    DOLLER          reduce using rule 229 (delays -> DELAY floatnumber .)
    INTNUMBER_DEC   reduce using rule 229 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 229 (delays -> DELAY floatnumber .)
    INTNUMBER_BIN   reduce using rule 229 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 229 (delays -> DELAY floatnumber .)
    INTNUMBER_OCT   reduce using rule 229 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 229 (delays -> DELAY floatnumber .)
    INTNUMBER_HEX   reduce using rule 229 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 229 (delays -> DELAY floatnumber .)
    FLOATNUMBER     reduce using rule 229 (delays -> DELAY floatnumber .)
    STRING_LITERAL  reduce using rule 229 (delays -> DELAY floatnumber .)
    IF              reduce using rule 229 (delays -> DELAY floatnumber .)


state 286

    (380) scope -> pointer . DOT
    (174) pointer -> pointer . LBRACKET expression RBRACKET

    DOT             shift and go to state 259
    LBRACKET        shift and go to state 432


state 287

    (80) integerdecl -> INTEGER integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENERATE        reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INTEGER         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REAL            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENVAR          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INITIAL         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ID              reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TASK            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LPAREN          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INPUT           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INOUT           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TRI             reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REG             reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WIRE            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SIGNED          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    IF              reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOR             reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WHILE           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASE            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASEX           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    BEGIN           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DELAY           reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LBRACE          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    END             reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WAIT            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOREVER         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FORK            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    AT              reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DOLLER          reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DISABLE         reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ELSE            reduce using rule 80 (integerdecl -> INTEGER integernamelist SEMICOLON .)


state 288

    (82) integernamelist -> integernamelist COMMA . integername
    (84) integername -> . ID

    ID              shift and go to state 140

    integername                    shift and go to state 433

state 289

    (81) integerdecl -> INTEGER SIGNED integernamelist . SEMICOLON
    (82) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 434
    COMMA           shift and go to state 288


state 290

    (85) realdecl -> REAL realnamelist SEMICOLON .

    ENDMODULE       reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    GENERATE        reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    INTEGER         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    REAL            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    PARAMETER       reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    GENVAR          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    ASSIGN          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    INITIAL         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    ID              reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    SENS_OR         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    FUNCTION        reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    TASK            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    LPAREN          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    INPUT           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    OUTPUT          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    INOUT           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    TRI             reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    REG             reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    WIRE            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    SIGNED          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    IF              reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    FOR             reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    END             reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    CASE            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    CASEX           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    WHILE           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    WAIT            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    FOREVER         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    BEGIN           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    FORK            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    DELAY           reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    AT              reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    DOLLER          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    DISABLE         reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    LBRACE          reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)
    ELSE            reduce using rule 85 (realdecl -> REAL realnamelist SEMICOLON .)


state 291

    (86) realnamelist -> realnamelist COMMA . realname
    (88) realname -> . ID

    ID              shift and go to state 143

    realname                       shift and go to state 435

state 292

    (89) parameterdecl -> PARAMETER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ID              reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REG             reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    IF              reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    END             reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    AT              reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 89 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)


state 293

    (95) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 148

    param_substitution             shift and go to state 436

state 294

    (90) parameterdecl -> PARAMETER width param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 437
    COMMA           shift and go to state 293


state 295

    (91) parameterdecl -> PARAMETER INTEGER param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 438
    COMMA           shift and go to state 293


state 296

    (97) param_substitution -> ID EQUALS . rvalue
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 439
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 297

    (92) localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REAL            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ID              reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TASK            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TRI             reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REG             reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    IF              reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOR             reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    END             reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASE            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FORK            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    AT              reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 92 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)


state 298

    (93) localparamdecl -> LOCALPARAM width param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 440
    COMMA           shift and go to state 293


state 299

    (94) localparamdecl -> LOCALPARAM INTEGER param_substitution_list . SEMICOLON
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 441
    COMMA           shift and go to state 293


state 300

    (314) genvardecl -> GENVAR genvarlist SEMICOLON .

    ENDMODULE       reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENERATE        reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INTEGER         reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REAL            reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    PARAMETER       reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LOCALPARAM      reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENVAR          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ASSIGN          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INITIAL         reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ID              reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SENS_OR         reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FUNCTION        reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TASK            reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LPAREN          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INPUT           reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    OUTPUT          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INOUT           reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TRI             reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REG             reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    WIRE            reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SIGNED          reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY0         reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY1         reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ENDGENERATE     reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    IF              reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FOR             reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ELSE            reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    END             reduce using rule 314 (genvardecl -> GENVAR genvarlist SEMICOLON .)


state 301

    (315) genvarlist -> genvarlist COMMA . genvar
    (317) genvar -> . ID

    ID              shift and go to state 154

    genvar                         shift and go to state 442

state 302

    (98) assignment -> ASSIGN lvalue EQUALS . rvalue SEMICOLON
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 443
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 303

    (99) assignment -> ASSIGN delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 444


state 304

    (103) lpartselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (104) lpartselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 445
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 305

    (100) lpartselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (101) lpartselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (174) pointer -> pointer LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 446
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 306

    (107) lconcat -> LBRACE lconcatlist . RBRACE
    (108) lconcatlist -> lconcatlist . COMMA lconcat_one

    RBRACE          shift and go to state 447
    COMMA           shift and go to state 448


state 307

    (109) lconcatlist -> lconcat_one .

    RBRACE          reduce using rule 109 (lconcatlist -> lconcat_one .)
    COMMA           reduce using rule 109 (lconcatlist -> lconcat_one .)


state 308

    (110) lconcat_one -> identifier .
    (103) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> identifier . DOT
    (173) pointer -> identifier . LBRACKET expression RBRACKET

    RBRACE          reduce using rule 110 (lconcat_one -> identifier .)
    COMMA           reduce using rule 110 (lconcat_one -> identifier .)
    LBRACKET        shift and go to state 304
    DOT             shift and go to state 262


state 309

    (111) lconcat_one -> lpartselect .

    RBRACE          reduce using rule 111 (lconcat_one -> lpartselect .)
    COMMA           reduce using rule 111 (lconcat_one -> lpartselect .)


state 310

    (112) lconcat_one -> lpointer .

    RBRACE          reduce using rule 112 (lconcat_one -> lpointer .)
    COMMA           reduce using rule 112 (lconcat_one -> lpointer .)


state 311

    (113) lconcat_one -> lconcat .

    RBRACE          reduce using rule 113 (lconcat_one -> lconcat .)
    COMMA           reduce using rule 113 (lconcat_one -> lconcat .)


state 312

    (100) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> pointer .
    (380) scope -> pointer . DOT
    (174) pointer -> pointer . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 305
    RBRACE          reduce using rule 106 (lpointer -> pointer .)
    COMMA           reduce using rule 106 (lpointer -> pointer .)
    DOT             shift and go to state 259


state 313

    (188) always -> ALWAYS senslist always_statement .

    ENDMODULE       reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    GENERATE        reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    INTEGER         reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    REAL            reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    PARAMETER       reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    LOCALPARAM      reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    GENVAR          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    ASSIGN          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    ALWAYS          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    INITIAL         reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    ID              reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    SENS_OR         reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    FUNCTION        reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    TASK            reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    LPAREN          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    INPUT           reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    OUTPUT          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    INOUT           reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    TRI             reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    REG             reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    WIRE            reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    SIGNED          reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    SUPPLY0         reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    SUPPLY1         reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    ENDGENERATE     reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    IF              reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    FOR             reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    ELSE            reduce using rule 188 (always -> ALWAYS senslist always_statement .)
    END             reduce using rule 188 (always -> ALWAYS senslist always_statement .)


state 314

    (222) always_statement -> basic_statement .

    ENDMODULE       reduce using rule 222 (always_statement -> basic_statement .)
    GENERATE        reduce using rule 222 (always_statement -> basic_statement .)
    INTEGER         reduce using rule 222 (always_statement -> basic_statement .)
    REAL            reduce using rule 222 (always_statement -> basic_statement .)
    PARAMETER       reduce using rule 222 (always_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 222 (always_statement -> basic_statement .)
    GENVAR          reduce using rule 222 (always_statement -> basic_statement .)
    ASSIGN          reduce using rule 222 (always_statement -> basic_statement .)
    ALWAYS          reduce using rule 222 (always_statement -> basic_statement .)
    INITIAL         reduce using rule 222 (always_statement -> basic_statement .)
    ID              reduce using rule 222 (always_statement -> basic_statement .)
    SENS_OR         reduce using rule 222 (always_statement -> basic_statement .)
    FUNCTION        reduce using rule 222 (always_statement -> basic_statement .)
    TASK            reduce using rule 222 (always_statement -> basic_statement .)
    LPAREN          reduce using rule 222 (always_statement -> basic_statement .)
    INPUT           reduce using rule 222 (always_statement -> basic_statement .)
    OUTPUT          reduce using rule 222 (always_statement -> basic_statement .)
    INOUT           reduce using rule 222 (always_statement -> basic_statement .)
    TRI             reduce using rule 222 (always_statement -> basic_statement .)
    REG             reduce using rule 222 (always_statement -> basic_statement .)
    WIRE            reduce using rule 222 (always_statement -> basic_statement .)
    SIGNED          reduce using rule 222 (always_statement -> basic_statement .)
    SUPPLY0         reduce using rule 222 (always_statement -> basic_statement .)
    SUPPLY1         reduce using rule 222 (always_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 222 (always_statement -> basic_statement .)
    IF              reduce using rule 222 (always_statement -> basic_statement .)
    FOR             reduce using rule 222 (always_statement -> basic_statement .)
    ELSE            reduce using rule 222 (always_statement -> basic_statement .)
    END             reduce using rule 222 (always_statement -> basic_statement .)


state 315

    (189) senslist -> AT LPAREN . edgesigs RPAREN
    (198) senslist -> AT LPAREN . levelsigs RPAREN
    (207) senslist -> AT LPAREN . TIMES RPAREN
    (194) edgesigs -> . edgesigs SENS_OR edgesig
    (195) edgesigs -> . edgesig
    (203) levelsigs -> . levelsigs SENS_OR levelsig
    (204) levelsigs -> . levelsigs COMMA levelsig
    (205) levelsigs -> . levelsig
    (190) edgesig -> . POSEDGE edgesig_base
    (191) edgesig -> . NEGEDGE edgesig_base
    (199) levelsig -> . levelsig_base
    (200) levelsig_base -> . identifier
    (201) levelsig_base -> . pointer
    (202) levelsig_base -> . partselect
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    TIMES           shift and go to state 451
    POSEDGE         shift and go to state 454
    NEGEDGE         shift and go to state 455
    ID              shift and go to state 81

    edgesigs                       shift and go to state 449
    levelsigs                      shift and go to state 450
    edgesig                        shift and go to state 452
    levelsig                       shift and go to state 453
    levelsig_base                  shift and go to state 318
    identifier                     shift and go to state 319
    pointer                        shift and go to state 320
    partselect                     shift and go to state 321
    scope                          shift and go to state 103

state 316

    (197) senslist -> AT levelsig .

    IF              reduce using rule 197 (senslist -> AT levelsig .)
    CASE            reduce using rule 197 (senslist -> AT levelsig .)
    CASEX           reduce using rule 197 (senslist -> AT levelsig .)
    FOR             reduce using rule 197 (senslist -> AT levelsig .)
    WHILE           reduce using rule 197 (senslist -> AT levelsig .)
    WAIT            reduce using rule 197 (senslist -> AT levelsig .)
    FOREVER         reduce using rule 197 (senslist -> AT levelsig .)
    BEGIN           reduce using rule 197 (senslist -> AT levelsig .)
    FORK            reduce using rule 197 (senslist -> AT levelsig .)
    DELAY           reduce using rule 197 (senslist -> AT levelsig .)
    AT              reduce using rule 197 (senslist -> AT levelsig .)
    DOLLER          reduce using rule 197 (senslist -> AT levelsig .)
    DISABLE         reduce using rule 197 (senslist -> AT levelsig .)
    LBRACE          reduce using rule 197 (senslist -> AT levelsig .)
    ID              reduce using rule 197 (senslist -> AT levelsig .)
    SEMICOLON       reduce using rule 197 (senslist -> AT levelsig .)


state 317

    (206) senslist -> AT TIMES .

    IF              reduce using rule 206 (senslist -> AT TIMES .)
    CASE            reduce using rule 206 (senslist -> AT TIMES .)
    CASEX           reduce using rule 206 (senslist -> AT TIMES .)
    FOR             reduce using rule 206 (senslist -> AT TIMES .)
    WHILE           reduce using rule 206 (senslist -> AT TIMES .)
    WAIT            reduce using rule 206 (senslist -> AT TIMES .)
    FOREVER         reduce using rule 206 (senslist -> AT TIMES .)
    BEGIN           reduce using rule 206 (senslist -> AT TIMES .)
    FORK            reduce using rule 206 (senslist -> AT TIMES .)
    DELAY           reduce using rule 206 (senslist -> AT TIMES .)
    AT              reduce using rule 206 (senslist -> AT TIMES .)
    DOLLER          reduce using rule 206 (senslist -> AT TIMES .)
    DISABLE         reduce using rule 206 (senslist -> AT TIMES .)
    LBRACE          reduce using rule 206 (senslist -> AT TIMES .)
    ID              reduce using rule 206 (senslist -> AT TIMES .)
    SEMICOLON       reduce using rule 206 (senslist -> AT TIMES .)


state 318

    (199) levelsig -> levelsig_base .

    IF              reduce using rule 199 (levelsig -> levelsig_base .)
    CASE            reduce using rule 199 (levelsig -> levelsig_base .)
    CASEX           reduce using rule 199 (levelsig -> levelsig_base .)
    FOR             reduce using rule 199 (levelsig -> levelsig_base .)
    WHILE           reduce using rule 199 (levelsig -> levelsig_base .)
    WAIT            reduce using rule 199 (levelsig -> levelsig_base .)
    FOREVER         reduce using rule 199 (levelsig -> levelsig_base .)
    BEGIN           reduce using rule 199 (levelsig -> levelsig_base .)
    FORK            reduce using rule 199 (levelsig -> levelsig_base .)
    DELAY           reduce using rule 199 (levelsig -> levelsig_base .)
    AT              reduce using rule 199 (levelsig -> levelsig_base .)
    DOLLER          reduce using rule 199 (levelsig -> levelsig_base .)
    DISABLE         reduce using rule 199 (levelsig -> levelsig_base .)
    LBRACE          reduce using rule 199 (levelsig -> levelsig_base .)
    ID              reduce using rule 199 (levelsig -> levelsig_base .)
    SEMICOLON       reduce using rule 199 (levelsig -> levelsig_base .)
    RPAREN          reduce using rule 199 (levelsig -> levelsig_base .)
    SENS_OR         reduce using rule 199 (levelsig -> levelsig_base .)
    COMMA           reduce using rule 199 (levelsig -> levelsig_base .)


state 319

    (200) levelsig_base -> identifier .
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (167) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (168) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> identifier . DOT

    IF              reduce using rule 200 (levelsig_base -> identifier .)
    CASE            reduce using rule 200 (levelsig_base -> identifier .)
    CASEX           reduce using rule 200 (levelsig_base -> identifier .)
    FOR             reduce using rule 200 (levelsig_base -> identifier .)
    WHILE           reduce using rule 200 (levelsig_base -> identifier .)
    WAIT            reduce using rule 200 (levelsig_base -> identifier .)
    FOREVER         reduce using rule 200 (levelsig_base -> identifier .)
    BEGIN           reduce using rule 200 (levelsig_base -> identifier .)
    FORK            reduce using rule 200 (levelsig_base -> identifier .)
    DELAY           reduce using rule 200 (levelsig_base -> identifier .)
    AT              reduce using rule 200 (levelsig_base -> identifier .)
    DOLLER          reduce using rule 200 (levelsig_base -> identifier .)
    DISABLE         reduce using rule 200 (levelsig_base -> identifier .)
    LBRACE          reduce using rule 200 (levelsig_base -> identifier .)
    ID              reduce using rule 200 (levelsig_base -> identifier .)
    SEMICOLON       reduce using rule 200 (levelsig_base -> identifier .)
    RPAREN          reduce using rule 200 (levelsig_base -> identifier .)
    SENS_OR         reduce using rule 200 (levelsig_base -> identifier .)
    COMMA           reduce using rule 200 (levelsig_base -> identifier .)
    LBRACKET        shift and go to state 456
    DOT             shift and go to state 262


state 320

    (201) levelsig_base -> pointer .
    (174) pointer -> pointer . LBRACKET expression RBRACKET
    (170) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (171) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (380) scope -> pointer . DOT

    IF              reduce using rule 201 (levelsig_base -> pointer .)
    CASE            reduce using rule 201 (levelsig_base -> pointer .)
    CASEX           reduce using rule 201 (levelsig_base -> pointer .)
    FOR             reduce using rule 201 (levelsig_base -> pointer .)
    WHILE           reduce using rule 201 (levelsig_base -> pointer .)
    WAIT            reduce using rule 201 (levelsig_base -> pointer .)
    FOREVER         reduce using rule 201 (levelsig_base -> pointer .)
    BEGIN           reduce using rule 201 (levelsig_base -> pointer .)
    FORK            reduce using rule 201 (levelsig_base -> pointer .)
    DELAY           reduce using rule 201 (levelsig_base -> pointer .)
    AT              reduce using rule 201 (levelsig_base -> pointer .)
    DOLLER          reduce using rule 201 (levelsig_base -> pointer .)
    DISABLE         reduce using rule 201 (levelsig_base -> pointer .)
    LBRACE          reduce using rule 201 (levelsig_base -> pointer .)
    ID              reduce using rule 201 (levelsig_base -> pointer .)
    SEMICOLON       reduce using rule 201 (levelsig_base -> pointer .)
    RPAREN          reduce using rule 201 (levelsig_base -> pointer .)
    SENS_OR         reduce using rule 201 (levelsig_base -> pointer .)
    COMMA           reduce using rule 201 (levelsig_base -> pointer .)
    LBRACKET        shift and go to state 457
    DOT             shift and go to state 259


state 321

    (202) levelsig_base -> partselect .

    IF              reduce using rule 202 (levelsig_base -> partselect .)
    CASE            reduce using rule 202 (levelsig_base -> partselect .)
    CASEX           reduce using rule 202 (levelsig_base -> partselect .)
    FOR             reduce using rule 202 (levelsig_base -> partselect .)
    WHILE           reduce using rule 202 (levelsig_base -> partselect .)
    WAIT            reduce using rule 202 (levelsig_base -> partselect .)
    FOREVER         reduce using rule 202 (levelsig_base -> partselect .)
    BEGIN           reduce using rule 202 (levelsig_base -> partselect .)
    FORK            reduce using rule 202 (levelsig_base -> partselect .)
    DELAY           reduce using rule 202 (levelsig_base -> partselect .)
    AT              reduce using rule 202 (levelsig_base -> partselect .)
    DOLLER          reduce using rule 202 (levelsig_base -> partselect .)
    DISABLE         reduce using rule 202 (levelsig_base -> partselect .)
    LBRACE          reduce using rule 202 (levelsig_base -> partselect .)
    ID              reduce using rule 202 (levelsig_base -> partselect .)
    SEMICOLON       reduce using rule 202 (levelsig_base -> partselect .)
    RPAREN          reduce using rule 202 (levelsig_base -> partselect .)
    SENS_OR         reduce using rule 202 (levelsig_base -> partselect .)
    COMMA           reduce using rule 202 (levelsig_base -> partselect .)


state 322

    (248) if_statement -> IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> IF LPAREN . cond RPAREN true_statement
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    cond                           shift and go to state 458
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 323

    (250) if_statement -> delays IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> delays IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 459


state 324

    (223) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> delays lvalue . LE delays rvalue SEMICOLON

    EQUALS          shift and go to state 460
    LE              shift and go to state 461


state 325

    (266) case_statement -> CASE LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (268) case_comp -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    case_comp                      shift and go to state 462
    expression                     shift and go to state 463
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 326

    (267) casex_statement -> CASEX LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (268) case_comp -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    case_comp                      shift and go to state 464
    expression                     shift and go to state 463
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 327

    (256) for_statement -> FOR LPAREN . forpre forcond forpost RPAREN forcontent_statement
    (257) forpre -> . blocking_substitution
    (258) forpre -> . SEMICOLON
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    SEMICOLON       shift and go to state 419
    DELAY           shift and go to state 135
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)

    forpre                         shift and go to state 465
    blocking_substitution          shift and go to state 418
    delays                         shift and go to state 420
    empty                          shift and go to state 136

state 328

    (264) while_statement -> WHILE LPAREN . cond RPAREN whilecontent_statement
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    cond                           shift and go to state 466
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 329

    (277) event_statement -> senslist SEMICOLON .

    ENDMODULE       reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    GENERATE        reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INTEGER         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    REAL            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    PARAMETER       reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    LOCALPARAM      reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    GENVAR          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ASSIGN          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ALWAYS          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INITIAL         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ID              reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SENS_OR         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    FUNCTION        reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    TASK            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    LPAREN          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INPUT           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    OUTPUT          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INOUT           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    TRI             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    REG             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    WIRE            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SIGNED          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SUPPLY0         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SUPPLY1         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ENDGENERATE     reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    IF              reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    FOR             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ELSE            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    END             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    CASE            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    CASEX           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    WHILE           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    WAIT            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    FOREVER         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    BEGIN           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    FORK            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    DELAY           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    AT              reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    DOLLER          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    DISABLE         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    LBRACE          reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SEMICOLON       reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    JOIN            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ENDFUNCTION     reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ENDTASK         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    ENDCASE         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    DEFAULT         reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    MINUS           reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    PLUS            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    LNOT            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    NOT             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    AND             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    NAND            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    NOR             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    OR              reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    XOR             reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    XNOR            reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    FLOATNUMBER     reduce using rule 277 (event_statement -> senslist SEMICOLON .)
    STRING_LITERAL  reduce using rule 277 (event_statement -> senslist SEMICOLON .)


state 330

    (278) wait_statement -> WAIT LPAREN . cond RPAREN waitcontent_statement
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    cond                           shift and go to state 467
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 331

    (281) forever_statement -> FOREVER basic_statement .

    ENDMODULE       reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    GENERATE        reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INTEGER         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    REAL            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    PARAMETER       reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    LOCALPARAM      reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    GENVAR          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ASSIGN          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ALWAYS          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INITIAL         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ID              reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SENS_OR         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    FUNCTION        reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    TASK            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    LPAREN          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INPUT           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    OUTPUT          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INOUT           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    TRI             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    REG             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    WIRE            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SIGNED          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SUPPLY0         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SUPPLY1         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ENDGENERATE     reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    IF              reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    FOR             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ELSE            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    END             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    CASE            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    CASEX           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    WHILE           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    WAIT            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    FOREVER         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    BEGIN           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    FORK            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    DELAY           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    AT              reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    DOLLER          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    DISABLE         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    LBRACE          reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SEMICOLON       reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    JOIN            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ENDFUNCTION     reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ENDTASK         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    ENDCASE         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    DEFAULT         reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    MINUS           reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    PLUS            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    LNOT            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    NOT             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    AND             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    NAND            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    NOR             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    OR              reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    XOR             reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    XNOR            reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_DEC   reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_BIN   reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_OCT   reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_HEX   reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    FLOATNUMBER     reduce using rule 281 (forever_statement -> FOREVER basic_statement .)
    STRING_LITERAL  reduce using rule 281 (forever_statement -> FOREVER basic_statement .)


state 332

    (231) block -> BEGIN block_statements . END
    (233) block_statements -> block_statements . block_statement
    (235) block_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 468
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    block_statement                shift and go to state 469
    basic_statement                shift and go to state 336
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 333

    (232) block -> BEGIN END .

    ENDMODULE       reduce using rule 232 (block -> BEGIN END .)
    GENERATE        reduce using rule 232 (block -> BEGIN END .)
    INTEGER         reduce using rule 232 (block -> BEGIN END .)
    REAL            reduce using rule 232 (block -> BEGIN END .)
    PARAMETER       reduce using rule 232 (block -> BEGIN END .)
    LOCALPARAM      reduce using rule 232 (block -> BEGIN END .)
    GENVAR          reduce using rule 232 (block -> BEGIN END .)
    ASSIGN          reduce using rule 232 (block -> BEGIN END .)
    ALWAYS          reduce using rule 232 (block -> BEGIN END .)
    INITIAL         reduce using rule 232 (block -> BEGIN END .)
    ID              reduce using rule 232 (block -> BEGIN END .)
    SENS_OR         reduce using rule 232 (block -> BEGIN END .)
    FUNCTION        reduce using rule 232 (block -> BEGIN END .)
    TASK            reduce using rule 232 (block -> BEGIN END .)
    LPAREN          reduce using rule 232 (block -> BEGIN END .)
    INPUT           reduce using rule 232 (block -> BEGIN END .)
    OUTPUT          reduce using rule 232 (block -> BEGIN END .)
    INOUT           reduce using rule 232 (block -> BEGIN END .)
    TRI             reduce using rule 232 (block -> BEGIN END .)
    REG             reduce using rule 232 (block -> BEGIN END .)
    WIRE            reduce using rule 232 (block -> BEGIN END .)
    SIGNED          reduce using rule 232 (block -> BEGIN END .)
    SUPPLY0         reduce using rule 232 (block -> BEGIN END .)
    SUPPLY1         reduce using rule 232 (block -> BEGIN END .)
    ENDGENERATE     reduce using rule 232 (block -> BEGIN END .)
    IF              reduce using rule 232 (block -> BEGIN END .)
    FOR             reduce using rule 232 (block -> BEGIN END .)
    ELSE            reduce using rule 232 (block -> BEGIN END .)
    END             reduce using rule 232 (block -> BEGIN END .)
    CASE            reduce using rule 232 (block -> BEGIN END .)
    CASEX           reduce using rule 232 (block -> BEGIN END .)
    WHILE           reduce using rule 232 (block -> BEGIN END .)
    WAIT            reduce using rule 232 (block -> BEGIN END .)
    FOREVER         reduce using rule 232 (block -> BEGIN END .)
    BEGIN           reduce using rule 232 (block -> BEGIN END .)
    FORK            reduce using rule 232 (block -> BEGIN END .)
    DELAY           reduce using rule 232 (block -> BEGIN END .)
    AT              reduce using rule 232 (block -> BEGIN END .)
    DOLLER          reduce using rule 232 (block -> BEGIN END .)
    DISABLE         reduce using rule 232 (block -> BEGIN END .)
    LBRACE          reduce using rule 232 (block -> BEGIN END .)
    SEMICOLON       reduce using rule 232 (block -> BEGIN END .)
    JOIN            reduce using rule 232 (block -> BEGIN END .)
    ENDFUNCTION     reduce using rule 232 (block -> BEGIN END .)
    ENDTASK         reduce using rule 232 (block -> BEGIN END .)
    ENDCASE         reduce using rule 232 (block -> BEGIN END .)
    DEFAULT         reduce using rule 232 (block -> BEGIN END .)
    MINUS           reduce using rule 232 (block -> BEGIN END .)
    PLUS            reduce using rule 232 (block -> BEGIN END .)
    LNOT            reduce using rule 232 (block -> BEGIN END .)
    NOT             reduce using rule 232 (block -> BEGIN END .)
    AND             reduce using rule 232 (block -> BEGIN END .)
    NAND            reduce using rule 232 (block -> BEGIN END .)
    NOR             reduce using rule 232 (block -> BEGIN END .)
    OR              reduce using rule 232 (block -> BEGIN END .)
    XOR             reduce using rule 232 (block -> BEGIN END .)
    XNOR            reduce using rule 232 (block -> BEGIN END .)
    INTNUMBER_DEC   reduce using rule 232 (block -> BEGIN END .)
    SIGNED_INTNUMBER_DEC reduce using rule 232 (block -> BEGIN END .)
    INTNUMBER_BIN   reduce using rule 232 (block -> BEGIN END .)
    SIGNED_INTNUMBER_BIN reduce using rule 232 (block -> BEGIN END .)
    INTNUMBER_OCT   reduce using rule 232 (block -> BEGIN END .)
    SIGNED_INTNUMBER_OCT reduce using rule 232 (block -> BEGIN END .)
    INTNUMBER_HEX   reduce using rule 232 (block -> BEGIN END .)
    SIGNED_INTNUMBER_HEX reduce using rule 232 (block -> BEGIN END .)
    FLOATNUMBER     reduce using rule 232 (block -> BEGIN END .)
    STRING_LITERAL  reduce using rule 232 (block -> BEGIN END .)


state 334

    (236) namedblock -> BEGIN COLON . ID namedblock_statements END
    (237) namedblock -> BEGIN COLON . ID END

    ID              shift and go to state 470


state 335

    (234) block_statements -> block_statement .

    END             reduce using rule 234 (block_statements -> block_statement .)
    IF              reduce using rule 234 (block_statements -> block_statement .)
    CASE            reduce using rule 234 (block_statements -> block_statement .)
    CASEX           reduce using rule 234 (block_statements -> block_statement .)
    FOR             reduce using rule 234 (block_statements -> block_statement .)
    WHILE           reduce using rule 234 (block_statements -> block_statement .)
    WAIT            reduce using rule 234 (block_statements -> block_statement .)
    FOREVER         reduce using rule 234 (block_statements -> block_statement .)
    BEGIN           reduce using rule 234 (block_statements -> block_statement .)
    FORK            reduce using rule 234 (block_statements -> block_statement .)
    DELAY           reduce using rule 234 (block_statements -> block_statement .)
    AT              reduce using rule 234 (block_statements -> block_statement .)
    DOLLER          reduce using rule 234 (block_statements -> block_statement .)
    DISABLE         reduce using rule 234 (block_statements -> block_statement .)
    LBRACE          reduce using rule 234 (block_statements -> block_statement .)
    ID              reduce using rule 234 (block_statements -> block_statement .)
    SEMICOLON       reduce using rule 234 (block_statements -> block_statement .)
    JOIN            reduce using rule 234 (block_statements -> block_statement .)


state 336

    (235) block_statement -> basic_statement .

    END             reduce using rule 235 (block_statement -> basic_statement .)
    IF              reduce using rule 235 (block_statement -> basic_statement .)
    CASE            reduce using rule 235 (block_statement -> basic_statement .)
    CASEX           reduce using rule 235 (block_statement -> basic_statement .)
    FOR             reduce using rule 235 (block_statement -> basic_statement .)
    WHILE           reduce using rule 235 (block_statement -> basic_statement .)
    WAIT            reduce using rule 235 (block_statement -> basic_statement .)
    FOREVER         reduce using rule 235 (block_statement -> basic_statement .)
    BEGIN           reduce using rule 235 (block_statement -> basic_statement .)
    FORK            reduce using rule 235 (block_statement -> basic_statement .)
    DELAY           reduce using rule 235 (block_statement -> basic_statement .)
    AT              reduce using rule 235 (block_statement -> basic_statement .)
    DOLLER          reduce using rule 235 (block_statement -> basic_statement .)
    DISABLE         reduce using rule 235 (block_statement -> basic_statement .)
    LBRACE          reduce using rule 235 (block_statement -> basic_statement .)
    ID              reduce using rule 235 (block_statement -> basic_statement .)
    SEMICOLON       reduce using rule 235 (block_statement -> basic_statement .)
    JOIN            reduce using rule 235 (block_statement -> basic_statement .)


state 337

    (246) parallelblock -> FORK block_statements . JOIN
    (233) block_statements -> block_statements . block_statement
    (235) block_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 471
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    block_statement                shift and go to state 469
    basic_statement                shift and go to state 336
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 338

    (247) parallelblock -> FORK JOIN .

    ENDMODULE       reduce using rule 247 (parallelblock -> FORK JOIN .)
    GENERATE        reduce using rule 247 (parallelblock -> FORK JOIN .)
    INTEGER         reduce using rule 247 (parallelblock -> FORK JOIN .)
    REAL            reduce using rule 247 (parallelblock -> FORK JOIN .)
    PARAMETER       reduce using rule 247 (parallelblock -> FORK JOIN .)
    LOCALPARAM      reduce using rule 247 (parallelblock -> FORK JOIN .)
    GENVAR          reduce using rule 247 (parallelblock -> FORK JOIN .)
    ASSIGN          reduce using rule 247 (parallelblock -> FORK JOIN .)
    ALWAYS          reduce using rule 247 (parallelblock -> FORK JOIN .)
    INITIAL         reduce using rule 247 (parallelblock -> FORK JOIN .)
    ID              reduce using rule 247 (parallelblock -> FORK JOIN .)
    SENS_OR         reduce using rule 247 (parallelblock -> FORK JOIN .)
    FUNCTION        reduce using rule 247 (parallelblock -> FORK JOIN .)
    TASK            reduce using rule 247 (parallelblock -> FORK JOIN .)
    LPAREN          reduce using rule 247 (parallelblock -> FORK JOIN .)
    INPUT           reduce using rule 247 (parallelblock -> FORK JOIN .)
    OUTPUT          reduce using rule 247 (parallelblock -> FORK JOIN .)
    INOUT           reduce using rule 247 (parallelblock -> FORK JOIN .)
    TRI             reduce using rule 247 (parallelblock -> FORK JOIN .)
    REG             reduce using rule 247 (parallelblock -> FORK JOIN .)
    WIRE            reduce using rule 247 (parallelblock -> FORK JOIN .)
    SIGNED          reduce using rule 247 (parallelblock -> FORK JOIN .)
    SUPPLY0         reduce using rule 247 (parallelblock -> FORK JOIN .)
    SUPPLY1         reduce using rule 247 (parallelblock -> FORK JOIN .)
    ENDGENERATE     reduce using rule 247 (parallelblock -> FORK JOIN .)
    IF              reduce using rule 247 (parallelblock -> FORK JOIN .)
    FOR             reduce using rule 247 (parallelblock -> FORK JOIN .)
    ELSE            reduce using rule 247 (parallelblock -> FORK JOIN .)
    END             reduce using rule 247 (parallelblock -> FORK JOIN .)
    CASE            reduce using rule 247 (parallelblock -> FORK JOIN .)
    CASEX           reduce using rule 247 (parallelblock -> FORK JOIN .)
    WHILE           reduce using rule 247 (parallelblock -> FORK JOIN .)
    WAIT            reduce using rule 247 (parallelblock -> FORK JOIN .)
    FOREVER         reduce using rule 247 (parallelblock -> FORK JOIN .)
    BEGIN           reduce using rule 247 (parallelblock -> FORK JOIN .)
    FORK            reduce using rule 247 (parallelblock -> FORK JOIN .)
    DELAY           reduce using rule 247 (parallelblock -> FORK JOIN .)
    AT              reduce using rule 247 (parallelblock -> FORK JOIN .)
    DOLLER          reduce using rule 247 (parallelblock -> FORK JOIN .)
    DISABLE         reduce using rule 247 (parallelblock -> FORK JOIN .)
    LBRACE          reduce using rule 247 (parallelblock -> FORK JOIN .)
    SEMICOLON       reduce using rule 247 (parallelblock -> FORK JOIN .)
    JOIN            reduce using rule 247 (parallelblock -> FORK JOIN .)
    ENDFUNCTION     reduce using rule 247 (parallelblock -> FORK JOIN .)
    ENDTASK         reduce using rule 247 (parallelblock -> FORK JOIN .)
    ENDCASE         reduce using rule 247 (parallelblock -> FORK JOIN .)
    DEFAULT         reduce using rule 247 (parallelblock -> FORK JOIN .)
    MINUS           reduce using rule 247 (parallelblock -> FORK JOIN .)
    PLUS            reduce using rule 247 (parallelblock -> FORK JOIN .)
    LNOT            reduce using rule 247 (parallelblock -> FORK JOIN .)
    NOT             reduce using rule 247 (parallelblock -> FORK JOIN .)
    AND             reduce using rule 247 (parallelblock -> FORK JOIN .)
    NAND            reduce using rule 247 (parallelblock -> FORK JOIN .)
    NOR             reduce using rule 247 (parallelblock -> FORK JOIN .)
    OR              reduce using rule 247 (parallelblock -> FORK JOIN .)
    XOR             reduce using rule 247 (parallelblock -> FORK JOIN .)
    XNOR            reduce using rule 247 (parallelblock -> FORK JOIN .)
    INTNUMBER_DEC   reduce using rule 247 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 247 (parallelblock -> FORK JOIN .)
    INTNUMBER_BIN   reduce using rule 247 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 247 (parallelblock -> FORK JOIN .)
    INTNUMBER_OCT   reduce using rule 247 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 247 (parallelblock -> FORK JOIN .)
    INTNUMBER_HEX   reduce using rule 247 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 247 (parallelblock -> FORK JOIN .)
    FLOATNUMBER     reduce using rule 247 (parallelblock -> FORK JOIN .)
    STRING_LITERAL  reduce using rule 247 (parallelblock -> FORK JOIN .)


state 339

    (382) single_statement -> DELAY expression . SEMICOLON
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    SEMICOLON       shift and go to state 472
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 340

    (226) delays -> DELAY LPAREN . expression RPAREN
    (154) expression -> LPAREN . expression RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 473
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 341

    (227) delays -> DELAY identifier .
    (161) expression -> identifier .
    (167) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (168) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (358) functioncall -> identifier . LPAREN func_args RPAREN
    (379) scope -> identifier . DOT

    IF              reduce using rule 227 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 227 (delays -> DELAY identifier .)
    ID              reduce using rule 227 (delays -> DELAY identifier .)
    SEMICOLON       reduce using rule 161 (expression -> identifier .)
    POWER           reduce using rule 161 (expression -> identifier .)
    TIMES           reduce using rule 161 (expression -> identifier .)
    DIVIDE          reduce using rule 161 (expression -> identifier .)
    MOD             reduce using rule 161 (expression -> identifier .)
    PLUS            reduce using rule 161 (expression -> identifier .)
    MINUS           reduce using rule 161 (expression -> identifier .)
    LSHIFT          reduce using rule 161 (expression -> identifier .)
    RSHIFT          reduce using rule 161 (expression -> identifier .)
    LSHIFTA         reduce using rule 161 (expression -> identifier .)
    RSHIFTA         reduce using rule 161 (expression -> identifier .)
    LT              reduce using rule 161 (expression -> identifier .)
    GT              reduce using rule 161 (expression -> identifier .)
    LE              reduce using rule 161 (expression -> identifier .)
    GE              reduce using rule 161 (expression -> identifier .)
    EQ              reduce using rule 161 (expression -> identifier .)
    NE              reduce using rule 161 (expression -> identifier .)
    EQL             reduce using rule 161 (expression -> identifier .)
    NEL             reduce using rule 161 (expression -> identifier .)
    AND             reduce using rule 161 (expression -> identifier .)
    XOR             reduce using rule 161 (expression -> identifier .)
    XNOR            reduce using rule 161 (expression -> identifier .)
    OR              reduce using rule 161 (expression -> identifier .)
    LAND            reduce using rule 161 (expression -> identifier .)
    LOR             reduce using rule 161 (expression -> identifier .)
    COND            reduce using rule 161 (expression -> identifier .)
    LBRACKET        shift and go to state 260
    LPAREN          shift and go to state 261
    DOT             shift and go to state 262


state 342

    (228) delays -> DELAY intnumber .
    (175) const_expression -> intnumber .

    IF              reduce using rule 228 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 228 (delays -> DELAY intnumber .)
    ID              reduce using rule 228 (delays -> DELAY intnumber .)
    SEMICOLON       reduce using rule 175 (const_expression -> intnumber .)
    POWER           reduce using rule 175 (const_expression -> intnumber .)
    TIMES           reduce using rule 175 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 175 (const_expression -> intnumber .)
    MOD             reduce using rule 175 (const_expression -> intnumber .)
    PLUS            reduce using rule 175 (const_expression -> intnumber .)
    MINUS           reduce using rule 175 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 175 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 175 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 175 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 175 (const_expression -> intnumber .)
    LT              reduce using rule 175 (const_expression -> intnumber .)
    GT              reduce using rule 175 (const_expression -> intnumber .)
    LE              reduce using rule 175 (const_expression -> intnumber .)
    GE              reduce using rule 175 (const_expression -> intnumber .)
    EQ              reduce using rule 175 (const_expression -> intnumber .)
    NE              reduce using rule 175 (const_expression -> intnumber .)
    EQL             reduce using rule 175 (const_expression -> intnumber .)
    NEL             reduce using rule 175 (const_expression -> intnumber .)
    AND             reduce using rule 175 (const_expression -> intnumber .)
    XOR             reduce using rule 175 (const_expression -> intnumber .)
    XNOR            reduce using rule 175 (const_expression -> intnumber .)
    OR              reduce using rule 175 (const_expression -> intnumber .)
    LAND            reduce using rule 175 (const_expression -> intnumber .)
    LOR             reduce using rule 175 (const_expression -> intnumber .)
    COND            reduce using rule 175 (const_expression -> intnumber .)


state 343

    (229) delays -> DELAY floatnumber .
    (176) const_expression -> floatnumber .

    IF              reduce using rule 229 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 229 (delays -> DELAY floatnumber .)
    ID              reduce using rule 229 (delays -> DELAY floatnumber .)
    SEMICOLON       reduce using rule 176 (const_expression -> floatnumber .)
    POWER           reduce using rule 176 (const_expression -> floatnumber .)
    TIMES           reduce using rule 176 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 176 (const_expression -> floatnumber .)
    MOD             reduce using rule 176 (const_expression -> floatnumber .)
    PLUS            reduce using rule 176 (const_expression -> floatnumber .)
    MINUS           reduce using rule 176 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 176 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 176 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 176 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 176 (const_expression -> floatnumber .)
    LT              reduce using rule 176 (const_expression -> floatnumber .)
    GT              reduce using rule 176 (const_expression -> floatnumber .)
    LE              reduce using rule 176 (const_expression -> floatnumber .)
    GE              reduce using rule 176 (const_expression -> floatnumber .)
    EQ              reduce using rule 176 (const_expression -> floatnumber .)
    NE              reduce using rule 176 (const_expression -> floatnumber .)
    EQL             reduce using rule 176 (const_expression -> floatnumber .)
    NEL             reduce using rule 176 (const_expression -> floatnumber .)
    AND             reduce using rule 176 (const_expression -> floatnumber .)
    XOR             reduce using rule 176 (const_expression -> floatnumber .)
    XNOR            reduce using rule 176 (const_expression -> floatnumber .)
    OR              reduce using rule 176 (const_expression -> floatnumber .)
    LAND            reduce using rule 176 (const_expression -> floatnumber .)
    LOR             reduce using rule 176 (const_expression -> floatnumber .)
    COND            reduce using rule 176 (const_expression -> floatnumber .)


state 344

    (383) single_statement -> systemcall SEMICOLON .

    ENDMODULE       reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    GENERATE        reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INTEGER         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    REAL            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    PARAMETER       reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    LOCALPARAM      reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    GENVAR          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ASSIGN          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ALWAYS          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INITIAL         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ID              reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SENS_OR         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    FUNCTION        reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    TASK            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    LPAREN          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INPUT           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    OUTPUT          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INOUT           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    TRI             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    REG             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    WIRE            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SIGNED          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SUPPLY0         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SUPPLY1         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ENDGENERATE     reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    IF              reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    FOR             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ELSE            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    END             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    CASE            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    CASEX           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    WHILE           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    WAIT            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    FOREVER         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    BEGIN           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    FORK            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    DELAY           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    AT              reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    DOLLER          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    DISABLE         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    LBRACE          reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SEMICOLON       reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    JOIN            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ENDFUNCTION     reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ENDTASK         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    ENDCASE         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    DEFAULT         reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    MINUS           reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    PLUS            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    LNOT            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    NOT             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    AND             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    NAND            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    NOR             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    OR              reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    XOR             reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    XNOR            reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    FLOATNUMBER     reduce using rule 383 (single_statement -> systemcall SEMICOLON .)
    STRING_LITERAL  reduce using rule 383 (single_statement -> systemcall SEMICOLON .)


state 345

    (384) single_statement -> disable SEMICOLON .

    ENDMODULE       reduce using rule 384 (single_statement -> disable SEMICOLON .)
    GENERATE        reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INTEGER         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    REAL            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    PARAMETER       reduce using rule 384 (single_statement -> disable SEMICOLON .)
    LOCALPARAM      reduce using rule 384 (single_statement -> disable SEMICOLON .)
    GENVAR          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ASSIGN          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ALWAYS          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INITIAL         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ID              reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SENS_OR         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    FUNCTION        reduce using rule 384 (single_statement -> disable SEMICOLON .)
    TASK            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    LPAREN          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INPUT           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    OUTPUT          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INOUT           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    TRI             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    REG             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    WIRE            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SIGNED          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SUPPLY0         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SUPPLY1         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ENDGENERATE     reduce using rule 384 (single_statement -> disable SEMICOLON .)
    IF              reduce using rule 384 (single_statement -> disable SEMICOLON .)
    FOR             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ELSE            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    END             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    CASE            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    CASEX           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    WHILE           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    WAIT            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    FOREVER         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    BEGIN           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    FORK            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    DELAY           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    AT              reduce using rule 384 (single_statement -> disable SEMICOLON .)
    DOLLER          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    DISABLE         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    LBRACE          reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SEMICOLON       reduce using rule 384 (single_statement -> disable SEMICOLON .)
    JOIN            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ENDFUNCTION     reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ENDTASK         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    ENDCASE         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    DEFAULT         reduce using rule 384 (single_statement -> disable SEMICOLON .)
    MINUS           reduce using rule 384 (single_statement -> disable SEMICOLON .)
    PLUS            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    LNOT            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    NOT             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    AND             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    NAND            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    NOR             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    OR              reduce using rule 384 (single_statement -> disable SEMICOLON .)
    XOR             reduce using rule 384 (single_statement -> disable SEMICOLON .)
    XNOR            reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 384 (single_statement -> disable SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 384 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 384 (single_statement -> disable SEMICOLON .)
    FLOATNUMBER     reduce using rule 384 (single_statement -> disable SEMICOLON .)
    STRING_LITERAL  reduce using rule 384 (single_statement -> disable SEMICOLON .)


state 346

    (381) disable -> DISABLE ID .

    SEMICOLON       reduce using rule 381 (disable -> DISABLE ID .)


state 347

    (286) instance_body -> ID . LPAREN instance_ports RPAREN
    (287) instance_body -> ID . width LPAREN instance_ports RPAREN
    (49) width -> . LBRACKET expression COLON expression RBRACKET

    LPAREN          shift and go to state 474
    LBRACKET        shift and go to state 132

    width                          shift and go to state 475

state 348

    (282) instance -> ID parameterlist instance_bodylist . SEMICOLON
    (284) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 476
    COMMA           shift and go to state 477


state 349

    (285) instance_bodylist -> instance_body .

    SEMICOLON       reduce using rule 285 (instance_bodylist -> instance_body .)
    COMMA           reduce using rule 285 (instance_bodylist -> instance_body .)


state 350

    (288) instance -> ID instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 288 (instance -> ID instance_bodylist_noname SEMICOLON .)


state 351

    (290) instance_bodylist_noname -> instance_bodylist_noname COMMA . instance_body_noname
    (292) instance_body_noname -> . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 201

    instance_body_noname           shift and go to state 478

state 352

    (293) parameterlist -> DELAY LPAREN . param_args RPAREN
    (294) parameterlist -> DELAY LPAREN . param_args_noname RPAREN
    (298) param_args -> . param_args COMMA param_arg
    (299) param_args -> . param_arg
    (300) param_args -> . empty
    (296) param_args_noname -> . param_args_noname COMMA param_arg_noname
    (297) param_args_noname -> . param_arg_noname
    (302) param_arg -> . DOT ID LPAREN expression RPAREN
    (385) empty -> .
    (301) param_arg_noname -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    DOT             shift and go to state 484
    RPAREN          reduce using rule 385 (empty -> .)
    COMMA           reduce using rule 385 (empty -> .)
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    param_args                     shift and go to state 479
    param_args_noname              shift and go to state 480
    param_arg                      shift and go to state 481
    empty                          shift and go to state 482
    param_arg_noname               shift and go to state 483
    expression                     shift and go to state 485
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 353

    (292) instance_body_noname -> LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 486


state 354

    (303) instance_ports -> instance_ports_list .
    (305) instance_ports_list -> instance_ports_list . COMMA instance_port_list

    RPAREN          reduce using rule 303 (instance_ports -> instance_ports_list .)
    COMMA           shift and go to state 487


state 355

    (304) instance_ports -> instance_ports_arg .
    (309) instance_ports_arg -> instance_ports_arg . COMMA instance_port_arg

    RPAREN          reduce using rule 304 (instance_ports -> instance_ports_arg .)
    COMMA           shift and go to state 488


state 356

    (306) instance_ports_list -> instance_port_list .

    COMMA           reduce using rule 306 (instance_ports_list -> instance_port_list .)
    RPAREN          reduce using rule 306 (instance_ports_list -> instance_port_list .)


state 357

    (307) instance_ports_list -> empty .

    COMMA           reduce using rule 307 (instance_ports_list -> empty .)
    RPAREN          reduce using rule 307 (instance_ports_list -> empty .)


state 358

    (310) instance_ports_arg -> instance_port_arg .

    COMMA           reduce using rule 310 (instance_ports_arg -> instance_port_arg .)
    RPAREN          reduce using rule 310 (instance_ports_arg -> instance_port_arg .)


state 359

    (308) instance_port_list -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COMMA           reduce using rule 308 (instance_port_list -> expression .)
    RPAREN          reduce using rule 308 (instance_port_list -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 360

    (311) instance_port_arg -> DOT . ID LPAREN identifier RPAREN
    (312) instance_port_arg -> DOT . ID LPAREN expression RPAREN
    (313) instance_port_arg -> DOT . ID LPAREN RPAREN

    ID              shift and go to state 489


state 361

    (283) instance -> SENS_OR parameterlist instance_bodylist . SEMICOLON
    (284) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 490
    COMMA           shift and go to state 477


state 362

    (289) instance -> SENS_OR instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 289 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)


state 363

    (343) function -> FUNCTION width ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 491


state 364

    (344) function -> FUNCTION ID SEMICOLON . function_statement ENDFUNCTION
    (345) function_statement -> . funcvardecls function_calc
    (346) funcvardecls -> . funcvardecls funcvardecl
    (347) funcvardecls -> . funcvardecl
    (348) funcvardecl -> . decl
    (349) funcvardecl -> . integerdecl
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 45
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    function_statement             shift and go to state 492
    funcvardecls                   shift and go to state 493
    funcvardecl                    shift and go to state 494
    decl                           shift and go to state 495
    integerdecl                    shift and go to state 496
    sigtypes                       shift and go to state 497
    sigtype                        shift and go to state 58

state 365

    (362) task -> TASK ID SEMICOLON . task_statement ENDTASK
    (363) task_statement -> . taskvardecls task_calc
    (364) taskvardecls -> . taskvardecls taskvardecl
    (365) taskvardecls -> . taskvardecl
    (366) taskvardecls -> . empty
    (367) taskvardecl -> . decl
    (368) taskvardecl -> . integerdecl
    (385) empty -> .
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    IF              reduce using rule 385 (empty -> .)
    FOR             reduce using rule 385 (empty -> .)
    WHILE           reduce using rule 385 (empty -> .)
    CASE            reduce using rule 385 (empty -> .)
    CASEX           reduce using rule 385 (empty -> .)
    BEGIN           reduce using rule 385 (empty -> .)
    DELAY           reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTEGER         shift and go to state 45
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! INTEGER         [ reduce using rule 385 (empty -> .) ]
  ! INPUT           [ reduce using rule 385 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 385 (empty -> .) ]
  ! INOUT           [ reduce using rule 385 (empty -> .) ]
  ! TRI             [ reduce using rule 385 (empty -> .) ]
  ! REG             [ reduce using rule 385 (empty -> .) ]
  ! WIRE            [ reduce using rule 385 (empty -> .) ]
  ! SIGNED          [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 385 (empty -> .) ]

    task_statement                 shift and go to state 498
    taskvardecls                   shift and go to state 499
    taskvardecl                    shift and go to state 500
    empty                          shift and go to state 501
    decl                           shift and go to state 502
    integerdecl                    shift and go to state 503
    sigtypes                       shift and go to state 497
    sigtype                        shift and go to state 58

state 366

    (24) portlist -> LPAREN ports RPAREN SEMICOLON .

    GENERATE        reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REAL            reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ID              reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TASK            reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INPUT           reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INOUT           reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TRI             reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REG             reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    WIRE            reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 24 (portlist -> LPAREN ports RPAREN SEMICOLON .)


state 367

    (28) ports -> ports COMMA portname .

    RPAREN          reduce using rule 28 (ports -> ports COMMA portname .)
    COMMA           reduce using rule 28 (ports -> ports COMMA portname .)


state 368

    (25) portlist -> LPAREN ioports RPAREN SEMICOLON .

    GENERATE        reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REAL            reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ID              reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TASK            reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INPUT           reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INOUT           reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TRI             reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REG             reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    WIRE            reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 25 (portlist -> LPAREN ioports RPAREN SEMICOLON .)


state 369

    (42) ioports -> ioports COMMA ioport .

    RPAREN          reduce using rule 42 (ioports -> ioports COMMA ioport .)
    COMMA           reduce using rule 42 (ioports -> ioports COMMA ioport .)


state 370

    (44) ioport -> sigtypes . portname
    (45) ioport -> sigtypes . width portname
    (31) sigtypes -> sigtypes . sigtype
    (30) portname -> . ID
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    ID              shift and go to state 72
    LBRACKET        shift and go to state 132
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    portname                       shift and go to state 504
    width                          shift and go to state 505
    sigtype                        shift and go to state 130

state 371

    (48) ioport -> portname .

    RPAREN          reduce using rule 48 (ioport -> portname .)
    COMMA           reduce using rule 48 (ioport -> portname .)


state 372

    (47) ioport_head -> sigtypes width portname .

    RPAREN          reduce using rule 47 (ioport_head -> sigtypes width portname .)
    COMMA           reduce using rule 47 (ioport_head -> sigtypes width portname .)


state 373

    (18) param -> PARAMETER param_substitution_list COMMA .
    (95) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 18 (param -> PARAMETER param_substitution_list COMMA .)
    ID              shift and go to state 148

    param_substitution             shift and go to state 436

state 374

    (22) param_end -> PARAMETER width param_substitution_list .
    (19) param -> PARAMETER width param_substitution_list . COMMA
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 22 (param_end -> PARAMETER width param_substitution_list .)
    COMMA           shift and go to state 506


state 375

    (23) param_end -> PARAMETER INTEGER param_substitution_list .
    (20) param -> PARAMETER INTEGER param_substitution_list . COMMA
    (95) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 23 (param_end -> PARAMETER INTEGER param_substitution_list .)
    COMMA           shift and go to state 507


state 376

    (154) expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    PLUSCOLON       reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    MINUSCOLON      reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 154 (expression -> LPAREN expression RPAREN .)


state 377

    (130) expression -> expression TIMES . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 378
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 378

    (130) expression -> expression TIMES expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 130 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 130 (expression -> expression TIMES expression .)
    MOD             reduce using rule 130 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 130 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 130 (expression -> expression TIMES expression .)
    LSHIFT          reduce using rule 130 (expression -> expression TIMES expression .)
    RSHIFT          reduce using rule 130 (expression -> expression TIMES expression .)
    LSHIFTA         reduce using rule 130 (expression -> expression TIMES expression .)
    RSHIFTA         reduce using rule 130 (expression -> expression TIMES expression .)
    LT              reduce using rule 130 (expression -> expression TIMES expression .)
    GT              reduce using rule 130 (expression -> expression TIMES expression .)
    LE              reduce using rule 130 (expression -> expression TIMES expression .)
    GE              reduce using rule 130 (expression -> expression TIMES expression .)
    EQ              reduce using rule 130 (expression -> expression TIMES expression .)
    NE              reduce using rule 130 (expression -> expression TIMES expression .)
    EQL             reduce using rule 130 (expression -> expression TIMES expression .)
    NEL             reduce using rule 130 (expression -> expression TIMES expression .)
    AND             reduce using rule 130 (expression -> expression TIMES expression .)
    XOR             reduce using rule 130 (expression -> expression TIMES expression .)
    XNOR            reduce using rule 130 (expression -> expression TIMES expression .)
    OR              reduce using rule 130 (expression -> expression TIMES expression .)
    LAND            reduce using rule 130 (expression -> expression TIMES expression .)
    LOR             reduce using rule 130 (expression -> expression TIMES expression .)
    COND            reduce using rule 130 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 130 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 130 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 130 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 130 (expression -> expression TIMES expression .)
    COLON           reduce using rule 130 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 130 (expression -> expression TIMES expression .)
    PLUSCOLON       reduce using rule 130 (expression -> expression TIMES expression .)
    MINUSCOLON      reduce using rule 130 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 130 (expression -> expression TIMES expression .)
    POWER           shift and go to state 224

  ! POWER           [ reduce using rule 130 (expression -> expression TIMES expression .) ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 379

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .

    MODULE          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LPAREN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    $end            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDMODULE       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENERATE        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INTEGER         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REAL            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    PARAMETER       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LOCALPARAM      reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENVAR          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ASSIGN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INITIAL         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ID              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SENS_OR         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FUNCTION        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TASK            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INPUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    OUTPUT          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INOUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TRI             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REG             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    WIRE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SIGNED          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY0         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY1         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDGENERATE     reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    IF              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FOR             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ELSE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    END             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)


state 380

    (129) expression -> expression POWER expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 129 (expression -> expression POWER expression .)
    POWER           reduce using rule 129 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 129 (expression -> expression POWER expression .)
    MOD             reduce using rule 129 (expression -> expression POWER expression .)
    PLUS            reduce using rule 129 (expression -> expression POWER expression .)
    MINUS           reduce using rule 129 (expression -> expression POWER expression .)
    LSHIFT          reduce using rule 129 (expression -> expression POWER expression .)
    RSHIFT          reduce using rule 129 (expression -> expression POWER expression .)
    LSHIFTA         reduce using rule 129 (expression -> expression POWER expression .)
    RSHIFTA         reduce using rule 129 (expression -> expression POWER expression .)
    LT              reduce using rule 129 (expression -> expression POWER expression .)
    GT              reduce using rule 129 (expression -> expression POWER expression .)
    LE              reduce using rule 129 (expression -> expression POWER expression .)
    GE              reduce using rule 129 (expression -> expression POWER expression .)
    EQ              reduce using rule 129 (expression -> expression POWER expression .)
    NE              reduce using rule 129 (expression -> expression POWER expression .)
    EQL             reduce using rule 129 (expression -> expression POWER expression .)
    NEL             reduce using rule 129 (expression -> expression POWER expression .)
    AND             reduce using rule 129 (expression -> expression POWER expression .)
    XOR             reduce using rule 129 (expression -> expression POWER expression .)
    XNOR            reduce using rule 129 (expression -> expression POWER expression .)
    OR              reduce using rule 129 (expression -> expression POWER expression .)
    LAND            reduce using rule 129 (expression -> expression POWER expression .)
    LOR             reduce using rule 129 (expression -> expression POWER expression .)
    COND            reduce using rule 129 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 129 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 129 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 129 (expression -> expression POWER expression .)
    COMMA           reduce using rule 129 (expression -> expression POWER expression .)
    COLON           reduce using rule 129 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 129 (expression -> expression POWER expression .)
    PLUSCOLON       reduce using rule 129 (expression -> expression POWER expression .)
    MINUSCOLON      reduce using rule 129 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 129 (expression -> expression POWER expression .)

  ! POWER           [ shift and go to state 224 ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 381

    (131) expression -> expression DIVIDE expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 131 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 131 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 131 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 131 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 131 (expression -> expression DIVIDE expression .)
    LSHIFT          reduce using rule 131 (expression -> expression DIVIDE expression .)
    RSHIFT          reduce using rule 131 (expression -> expression DIVIDE expression .)
    LSHIFTA         reduce using rule 131 (expression -> expression DIVIDE expression .)
    RSHIFTA         reduce using rule 131 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 131 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 131 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 131 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 131 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 131 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 131 (expression -> expression DIVIDE expression .)
    EQL             reduce using rule 131 (expression -> expression DIVIDE expression .)
    NEL             reduce using rule 131 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 131 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 131 (expression -> expression DIVIDE expression .)
    XNOR            reduce using rule 131 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 131 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 131 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 131 (expression -> expression DIVIDE expression .)
    COND            reduce using rule 131 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 131 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 131 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 131 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 131 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 131 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 131 (expression -> expression DIVIDE expression .)
    PLUSCOLON       reduce using rule 131 (expression -> expression DIVIDE expression .)
    MINUSCOLON      reduce using rule 131 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 131 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 224

  ! POWER           [ reduce using rule 131 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 382

    (132) expression -> expression MOD expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 132 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 132 (expression -> expression MOD expression .)
    MOD             reduce using rule 132 (expression -> expression MOD expression .)
    PLUS            reduce using rule 132 (expression -> expression MOD expression .)
    MINUS           reduce using rule 132 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 132 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 132 (expression -> expression MOD expression .)
    LSHIFTA         reduce using rule 132 (expression -> expression MOD expression .)
    RSHIFTA         reduce using rule 132 (expression -> expression MOD expression .)
    LT              reduce using rule 132 (expression -> expression MOD expression .)
    GT              reduce using rule 132 (expression -> expression MOD expression .)
    LE              reduce using rule 132 (expression -> expression MOD expression .)
    GE              reduce using rule 132 (expression -> expression MOD expression .)
    EQ              reduce using rule 132 (expression -> expression MOD expression .)
    NE              reduce using rule 132 (expression -> expression MOD expression .)
    EQL             reduce using rule 132 (expression -> expression MOD expression .)
    NEL             reduce using rule 132 (expression -> expression MOD expression .)
    AND             reduce using rule 132 (expression -> expression MOD expression .)
    XOR             reduce using rule 132 (expression -> expression MOD expression .)
    XNOR            reduce using rule 132 (expression -> expression MOD expression .)
    OR              reduce using rule 132 (expression -> expression MOD expression .)
    LAND            reduce using rule 132 (expression -> expression MOD expression .)
    LOR             reduce using rule 132 (expression -> expression MOD expression .)
    COND            reduce using rule 132 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 132 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 132 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 132 (expression -> expression MOD expression .)
    COMMA           reduce using rule 132 (expression -> expression MOD expression .)
    COLON           reduce using rule 132 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 132 (expression -> expression MOD expression .)
    PLUSCOLON       reduce using rule 132 (expression -> expression MOD expression .)
    MINUSCOLON      reduce using rule 132 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 132 (expression -> expression MOD expression .)
    POWER           shift and go to state 224

  ! POWER           [ reduce using rule 132 (expression -> expression MOD expression .) ]
  ! TIMES           [ shift and go to state 377 ]
  ! DIVIDE          [ shift and go to state 225 ]
  ! MOD             [ shift and go to state 226 ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 383

    (133) expression -> expression PLUS expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 133 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 133 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 133 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 133 (expression -> expression PLUS expression .)
    LSHIFTA         reduce using rule 133 (expression -> expression PLUS expression .)
    RSHIFTA         reduce using rule 133 (expression -> expression PLUS expression .)
    LT              reduce using rule 133 (expression -> expression PLUS expression .)
    GT              reduce using rule 133 (expression -> expression PLUS expression .)
    LE              reduce using rule 133 (expression -> expression PLUS expression .)
    GE              reduce using rule 133 (expression -> expression PLUS expression .)
    EQ              reduce using rule 133 (expression -> expression PLUS expression .)
    NE              reduce using rule 133 (expression -> expression PLUS expression .)
    EQL             reduce using rule 133 (expression -> expression PLUS expression .)
    NEL             reduce using rule 133 (expression -> expression PLUS expression .)
    AND             reduce using rule 133 (expression -> expression PLUS expression .)
    XOR             reduce using rule 133 (expression -> expression PLUS expression .)
    XNOR            reduce using rule 133 (expression -> expression PLUS expression .)
    OR              reduce using rule 133 (expression -> expression PLUS expression .)
    LAND            reduce using rule 133 (expression -> expression PLUS expression .)
    LOR             reduce using rule 133 (expression -> expression PLUS expression .)
    COND            reduce using rule 133 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 133 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 133 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 133 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 133 (expression -> expression PLUS expression .)
    COLON           reduce using rule 133 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 133 (expression -> expression PLUS expression .)
    PLUSCOLON       reduce using rule 133 (expression -> expression PLUS expression .)
    MINUSCOLON      reduce using rule 133 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 133 (expression -> expression PLUS expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226

  ! TIMES           [ reduce using rule 133 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 133 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 133 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 133 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 384

    (134) expression -> expression MINUS expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 134 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 134 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 134 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 134 (expression -> expression MINUS expression .)
    LSHIFTA         reduce using rule 134 (expression -> expression MINUS expression .)
    RSHIFTA         reduce using rule 134 (expression -> expression MINUS expression .)
    LT              reduce using rule 134 (expression -> expression MINUS expression .)
    GT              reduce using rule 134 (expression -> expression MINUS expression .)
    LE              reduce using rule 134 (expression -> expression MINUS expression .)
    GE              reduce using rule 134 (expression -> expression MINUS expression .)
    EQ              reduce using rule 134 (expression -> expression MINUS expression .)
    NE              reduce using rule 134 (expression -> expression MINUS expression .)
    EQL             reduce using rule 134 (expression -> expression MINUS expression .)
    NEL             reduce using rule 134 (expression -> expression MINUS expression .)
    AND             reduce using rule 134 (expression -> expression MINUS expression .)
    XOR             reduce using rule 134 (expression -> expression MINUS expression .)
    XNOR            reduce using rule 134 (expression -> expression MINUS expression .)
    OR              reduce using rule 134 (expression -> expression MINUS expression .)
    LAND            reduce using rule 134 (expression -> expression MINUS expression .)
    LOR             reduce using rule 134 (expression -> expression MINUS expression .)
    COND            reduce using rule 134 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 134 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 134 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 134 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 134 (expression -> expression MINUS expression .)
    COLON           reduce using rule 134 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 134 (expression -> expression MINUS expression .)
    PLUSCOLON       reduce using rule 134 (expression -> expression MINUS expression .)
    MINUSCOLON      reduce using rule 134 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 134 (expression -> expression MINUS expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226

  ! TIMES           [ reduce using rule 134 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 134 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 134 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 134 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 227 ]
  ! MINUS           [ shift and go to state 228 ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 385

    (135) expression -> expression LSHIFT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 135 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 135 (expression -> expression LSHIFT expression .)
    LSHIFTA         reduce using rule 135 (expression -> expression LSHIFT expression .)
    RSHIFTA         reduce using rule 135 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 135 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 135 (expression -> expression LSHIFT expression .)
    LE              reduce using rule 135 (expression -> expression LSHIFT expression .)
    GE              reduce using rule 135 (expression -> expression LSHIFT expression .)
    EQ              reduce using rule 135 (expression -> expression LSHIFT expression .)
    NE              reduce using rule 135 (expression -> expression LSHIFT expression .)
    EQL             reduce using rule 135 (expression -> expression LSHIFT expression .)
    NEL             reduce using rule 135 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 135 (expression -> expression LSHIFT expression .)
    XOR             reduce using rule 135 (expression -> expression LSHIFT expression .)
    XNOR            reduce using rule 135 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 135 (expression -> expression LSHIFT expression .)
    LAND            reduce using rule 135 (expression -> expression LSHIFT expression .)
    LOR             reduce using rule 135 (expression -> expression LSHIFT expression .)
    COND            reduce using rule 135 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 135 (expression -> expression LSHIFT expression .)
    LBRACE          reduce using rule 135 (expression -> expression LSHIFT expression .)
    RBRACE          reduce using rule 135 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 135 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 135 (expression -> expression LSHIFT expression .)
    SEMICOLON       reduce using rule 135 (expression -> expression LSHIFT expression .)
    PLUSCOLON       reduce using rule 135 (expression -> expression LSHIFT expression .)
    MINUSCOLON      reduce using rule 135 (expression -> expression LSHIFT expression .)
    RBRACKET        reduce using rule 135 (expression -> expression LSHIFT expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228

  ! TIMES           [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! POWER           [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! PLUS            [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 135 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 386

    (136) expression -> expression RSHIFT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 136 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 136 (expression -> expression RSHIFT expression .)
    LSHIFTA         reduce using rule 136 (expression -> expression RSHIFT expression .)
    RSHIFTA         reduce using rule 136 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 136 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 136 (expression -> expression RSHIFT expression .)
    LE              reduce using rule 136 (expression -> expression RSHIFT expression .)
    GE              reduce using rule 136 (expression -> expression RSHIFT expression .)
    EQ              reduce using rule 136 (expression -> expression RSHIFT expression .)
    NE              reduce using rule 136 (expression -> expression RSHIFT expression .)
    EQL             reduce using rule 136 (expression -> expression RSHIFT expression .)
    NEL             reduce using rule 136 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 136 (expression -> expression RSHIFT expression .)
    XOR             reduce using rule 136 (expression -> expression RSHIFT expression .)
    XNOR            reduce using rule 136 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 136 (expression -> expression RSHIFT expression .)
    LAND            reduce using rule 136 (expression -> expression RSHIFT expression .)
    LOR             reduce using rule 136 (expression -> expression RSHIFT expression .)
    COND            reduce using rule 136 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 136 (expression -> expression RSHIFT expression .)
    LBRACE          reduce using rule 136 (expression -> expression RSHIFT expression .)
    RBRACE          reduce using rule 136 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 136 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 136 (expression -> expression RSHIFT expression .)
    SEMICOLON       reduce using rule 136 (expression -> expression RSHIFT expression .)
    PLUSCOLON       reduce using rule 136 (expression -> expression RSHIFT expression .)
    MINUSCOLON      reduce using rule 136 (expression -> expression RSHIFT expression .)
    RBRACKET        reduce using rule 136 (expression -> expression RSHIFT expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228

  ! TIMES           [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! POWER           [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! PLUS            [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 136 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 387

    (137) expression -> expression LSHIFTA expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 137 (expression -> expression LSHIFTA expression .)
    RSHIFT          reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LSHIFTA         reduce using rule 137 (expression -> expression LSHIFTA expression .)
    RSHIFTA         reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LT              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    GT              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LE              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    GE              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    EQ              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    NE              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    EQL             reduce using rule 137 (expression -> expression LSHIFTA expression .)
    NEL             reduce using rule 137 (expression -> expression LSHIFTA expression .)
    AND             reduce using rule 137 (expression -> expression LSHIFTA expression .)
    XOR             reduce using rule 137 (expression -> expression LSHIFTA expression .)
    XNOR            reduce using rule 137 (expression -> expression LSHIFTA expression .)
    OR              reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LAND            reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LOR             reduce using rule 137 (expression -> expression LSHIFTA expression .)
    COND            reduce using rule 137 (expression -> expression LSHIFTA expression .)
    RPAREN          reduce using rule 137 (expression -> expression LSHIFTA expression .)
    LBRACE          reduce using rule 137 (expression -> expression LSHIFTA expression .)
    RBRACE          reduce using rule 137 (expression -> expression LSHIFTA expression .)
    COMMA           reduce using rule 137 (expression -> expression LSHIFTA expression .)
    COLON           reduce using rule 137 (expression -> expression LSHIFTA expression .)
    SEMICOLON       reduce using rule 137 (expression -> expression LSHIFTA expression .)
    PLUSCOLON       reduce using rule 137 (expression -> expression LSHIFTA expression .)
    MINUSCOLON      reduce using rule 137 (expression -> expression LSHIFTA expression .)
    RBRACKET        reduce using rule 137 (expression -> expression LSHIFTA expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228

  ! TIMES           [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! POWER           [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! MOD             [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 137 (expression -> expression LSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 388

    (138) expression -> expression RSHIFTA expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 138 (expression -> expression RSHIFTA expression .)
    RSHIFT          reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LSHIFTA         reduce using rule 138 (expression -> expression RSHIFTA expression .)
    RSHIFTA         reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LT              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    GT              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LE              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    GE              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    EQ              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    NE              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    EQL             reduce using rule 138 (expression -> expression RSHIFTA expression .)
    NEL             reduce using rule 138 (expression -> expression RSHIFTA expression .)
    AND             reduce using rule 138 (expression -> expression RSHIFTA expression .)
    XOR             reduce using rule 138 (expression -> expression RSHIFTA expression .)
    XNOR            reduce using rule 138 (expression -> expression RSHIFTA expression .)
    OR              reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LAND            reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LOR             reduce using rule 138 (expression -> expression RSHIFTA expression .)
    COND            reduce using rule 138 (expression -> expression RSHIFTA expression .)
    RPAREN          reduce using rule 138 (expression -> expression RSHIFTA expression .)
    LBRACE          reduce using rule 138 (expression -> expression RSHIFTA expression .)
    RBRACE          reduce using rule 138 (expression -> expression RSHIFTA expression .)
    COMMA           reduce using rule 138 (expression -> expression RSHIFTA expression .)
    COLON           reduce using rule 138 (expression -> expression RSHIFTA expression .)
    SEMICOLON       reduce using rule 138 (expression -> expression RSHIFTA expression .)
    PLUSCOLON       reduce using rule 138 (expression -> expression RSHIFTA expression .)
    MINUSCOLON      reduce using rule 138 (expression -> expression RSHIFTA expression .)
    RBRACKET        reduce using rule 138 (expression -> expression RSHIFTA expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228

  ! TIMES           [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! POWER           [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! MOD             [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 138 (expression -> expression RSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 229 ]
  ! RSHIFT          [ shift and go to state 230 ]
  ! LSHIFTA         [ shift and go to state 231 ]
  ! RSHIFTA         [ shift and go to state 232 ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 389

    (139) expression -> expression LT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LT              reduce using rule 139 (expression -> expression LT expression .)
    GT              reduce using rule 139 (expression -> expression LT expression .)
    LE              reduce using rule 139 (expression -> expression LT expression .)
    GE              reduce using rule 139 (expression -> expression LT expression .)
    EQ              reduce using rule 139 (expression -> expression LT expression .)
    NE              reduce using rule 139 (expression -> expression LT expression .)
    EQL             reduce using rule 139 (expression -> expression LT expression .)
    NEL             reduce using rule 139 (expression -> expression LT expression .)
    AND             reduce using rule 139 (expression -> expression LT expression .)
    XOR             reduce using rule 139 (expression -> expression LT expression .)
    XNOR            reduce using rule 139 (expression -> expression LT expression .)
    OR              reduce using rule 139 (expression -> expression LT expression .)
    LAND            reduce using rule 139 (expression -> expression LT expression .)
    LOR             reduce using rule 139 (expression -> expression LT expression .)
    COND            reduce using rule 139 (expression -> expression LT expression .)
    RPAREN          reduce using rule 139 (expression -> expression LT expression .)
    LBRACE          reduce using rule 139 (expression -> expression LT expression .)
    RBRACE          reduce using rule 139 (expression -> expression LT expression .)
    COMMA           reduce using rule 139 (expression -> expression LT expression .)
    COLON           reduce using rule 139 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 139 (expression -> expression LT expression .)
    PLUSCOLON       reduce using rule 139 (expression -> expression LT expression .)
    MINUSCOLON      reduce using rule 139 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 139 (expression -> expression LT expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232

  ! TIMES           [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! POWER           [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! LSHIFTA         [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! RSHIFTA         [ reduce using rule 139 (expression -> expression LT expression .) ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 390

    (140) expression -> expression GT expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LT              reduce using rule 140 (expression -> expression GT expression .)
    GT              reduce using rule 140 (expression -> expression GT expression .)
    LE              reduce using rule 140 (expression -> expression GT expression .)
    GE              reduce using rule 140 (expression -> expression GT expression .)
    EQ              reduce using rule 140 (expression -> expression GT expression .)
    NE              reduce using rule 140 (expression -> expression GT expression .)
    EQL             reduce using rule 140 (expression -> expression GT expression .)
    NEL             reduce using rule 140 (expression -> expression GT expression .)
    AND             reduce using rule 140 (expression -> expression GT expression .)
    XOR             reduce using rule 140 (expression -> expression GT expression .)
    XNOR            reduce using rule 140 (expression -> expression GT expression .)
    OR              reduce using rule 140 (expression -> expression GT expression .)
    LAND            reduce using rule 140 (expression -> expression GT expression .)
    LOR             reduce using rule 140 (expression -> expression GT expression .)
    COND            reduce using rule 140 (expression -> expression GT expression .)
    RPAREN          reduce using rule 140 (expression -> expression GT expression .)
    LBRACE          reduce using rule 140 (expression -> expression GT expression .)
    RBRACE          reduce using rule 140 (expression -> expression GT expression .)
    COMMA           reduce using rule 140 (expression -> expression GT expression .)
    COLON           reduce using rule 140 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 140 (expression -> expression GT expression .)
    PLUSCOLON       reduce using rule 140 (expression -> expression GT expression .)
    MINUSCOLON      reduce using rule 140 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 140 (expression -> expression GT expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232

  ! TIMES           [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! POWER           [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! LSHIFTA         [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! RSHIFTA         [ reduce using rule 140 (expression -> expression GT expression .) ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 391

    (141) expression -> expression LE expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LT              reduce using rule 141 (expression -> expression LE expression .)
    GT              reduce using rule 141 (expression -> expression LE expression .)
    LE              reduce using rule 141 (expression -> expression LE expression .)
    GE              reduce using rule 141 (expression -> expression LE expression .)
    EQ              reduce using rule 141 (expression -> expression LE expression .)
    NE              reduce using rule 141 (expression -> expression LE expression .)
    EQL             reduce using rule 141 (expression -> expression LE expression .)
    NEL             reduce using rule 141 (expression -> expression LE expression .)
    AND             reduce using rule 141 (expression -> expression LE expression .)
    XOR             reduce using rule 141 (expression -> expression LE expression .)
    XNOR            reduce using rule 141 (expression -> expression LE expression .)
    OR              reduce using rule 141 (expression -> expression LE expression .)
    LAND            reduce using rule 141 (expression -> expression LE expression .)
    LOR             reduce using rule 141 (expression -> expression LE expression .)
    COND            reduce using rule 141 (expression -> expression LE expression .)
    RPAREN          reduce using rule 141 (expression -> expression LE expression .)
    LBRACE          reduce using rule 141 (expression -> expression LE expression .)
    RBRACE          reduce using rule 141 (expression -> expression LE expression .)
    COMMA           reduce using rule 141 (expression -> expression LE expression .)
    COLON           reduce using rule 141 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 141 (expression -> expression LE expression .)
    PLUSCOLON       reduce using rule 141 (expression -> expression LE expression .)
    MINUSCOLON      reduce using rule 141 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 141 (expression -> expression LE expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232

  ! TIMES           [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! POWER           [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! LSHIFT          [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! RSHIFT          [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! LSHIFTA         [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! RSHIFTA         [ reduce using rule 141 (expression -> expression LE expression .) ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 392

    (142) expression -> expression GE expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LT              reduce using rule 142 (expression -> expression GE expression .)
    GT              reduce using rule 142 (expression -> expression GE expression .)
    LE              reduce using rule 142 (expression -> expression GE expression .)
    GE              reduce using rule 142 (expression -> expression GE expression .)
    EQ              reduce using rule 142 (expression -> expression GE expression .)
    NE              reduce using rule 142 (expression -> expression GE expression .)
    EQL             reduce using rule 142 (expression -> expression GE expression .)
    NEL             reduce using rule 142 (expression -> expression GE expression .)
    AND             reduce using rule 142 (expression -> expression GE expression .)
    XOR             reduce using rule 142 (expression -> expression GE expression .)
    XNOR            reduce using rule 142 (expression -> expression GE expression .)
    OR              reduce using rule 142 (expression -> expression GE expression .)
    LAND            reduce using rule 142 (expression -> expression GE expression .)
    LOR             reduce using rule 142 (expression -> expression GE expression .)
    COND            reduce using rule 142 (expression -> expression GE expression .)
    RPAREN          reduce using rule 142 (expression -> expression GE expression .)
    LBRACE          reduce using rule 142 (expression -> expression GE expression .)
    RBRACE          reduce using rule 142 (expression -> expression GE expression .)
    COMMA           reduce using rule 142 (expression -> expression GE expression .)
    COLON           reduce using rule 142 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 142 (expression -> expression GE expression .)
    PLUSCOLON       reduce using rule 142 (expression -> expression GE expression .)
    MINUSCOLON      reduce using rule 142 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 142 (expression -> expression GE expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232

  ! TIMES           [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! POWER           [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! LSHIFT          [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! RSHIFT          [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! LSHIFTA         [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! RSHIFTA         [ reduce using rule 142 (expression -> expression GE expression .) ]
  ! LT              [ shift and go to state 233 ]
  ! GT              [ shift and go to state 234 ]
  ! LE              [ shift and go to state 235 ]
  ! GE              [ shift and go to state 236 ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 393

    (143) expression -> expression EQ expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 143 (expression -> expression EQ expression .)
    NE              reduce using rule 143 (expression -> expression EQ expression .)
    EQL             reduce using rule 143 (expression -> expression EQ expression .)
    NEL             reduce using rule 143 (expression -> expression EQ expression .)
    AND             reduce using rule 143 (expression -> expression EQ expression .)
    XOR             reduce using rule 143 (expression -> expression EQ expression .)
    XNOR            reduce using rule 143 (expression -> expression EQ expression .)
    OR              reduce using rule 143 (expression -> expression EQ expression .)
    LAND            reduce using rule 143 (expression -> expression EQ expression .)
    LOR             reduce using rule 143 (expression -> expression EQ expression .)
    COND            reduce using rule 143 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 143 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 143 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 143 (expression -> expression EQ expression .)
    COMMA           reduce using rule 143 (expression -> expression EQ expression .)
    COLON           reduce using rule 143 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 143 (expression -> expression EQ expression .)
    PLUSCOLON       reduce using rule 143 (expression -> expression EQ expression .)
    MINUSCOLON      reduce using rule 143 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 143 (expression -> expression EQ expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236

  ! TIMES           [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! LSHIFTA         [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! RSHIFTA         [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 143 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 394

    (144) expression -> expression NE expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 144 (expression -> expression NE expression .)
    NE              reduce using rule 144 (expression -> expression NE expression .)
    EQL             reduce using rule 144 (expression -> expression NE expression .)
    NEL             reduce using rule 144 (expression -> expression NE expression .)
    AND             reduce using rule 144 (expression -> expression NE expression .)
    XOR             reduce using rule 144 (expression -> expression NE expression .)
    XNOR            reduce using rule 144 (expression -> expression NE expression .)
    OR              reduce using rule 144 (expression -> expression NE expression .)
    LAND            reduce using rule 144 (expression -> expression NE expression .)
    LOR             reduce using rule 144 (expression -> expression NE expression .)
    COND            reduce using rule 144 (expression -> expression NE expression .)
    RPAREN          reduce using rule 144 (expression -> expression NE expression .)
    LBRACE          reduce using rule 144 (expression -> expression NE expression .)
    RBRACE          reduce using rule 144 (expression -> expression NE expression .)
    COMMA           reduce using rule 144 (expression -> expression NE expression .)
    COLON           reduce using rule 144 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 144 (expression -> expression NE expression .)
    PLUSCOLON       reduce using rule 144 (expression -> expression NE expression .)
    MINUSCOLON      reduce using rule 144 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 144 (expression -> expression NE expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236

  ! TIMES           [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! POWER           [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! LSHIFT          [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! RSHIFT          [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! LSHIFTA         [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! RSHIFTA         [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 144 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 395

    (145) expression -> expression EQL expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 145 (expression -> expression EQL expression .)
    NE              reduce using rule 145 (expression -> expression EQL expression .)
    EQL             reduce using rule 145 (expression -> expression EQL expression .)
    NEL             reduce using rule 145 (expression -> expression EQL expression .)
    AND             reduce using rule 145 (expression -> expression EQL expression .)
    XOR             reduce using rule 145 (expression -> expression EQL expression .)
    XNOR            reduce using rule 145 (expression -> expression EQL expression .)
    OR              reduce using rule 145 (expression -> expression EQL expression .)
    LAND            reduce using rule 145 (expression -> expression EQL expression .)
    LOR             reduce using rule 145 (expression -> expression EQL expression .)
    COND            reduce using rule 145 (expression -> expression EQL expression .)
    RPAREN          reduce using rule 145 (expression -> expression EQL expression .)
    LBRACE          reduce using rule 145 (expression -> expression EQL expression .)
    RBRACE          reduce using rule 145 (expression -> expression EQL expression .)
    COMMA           reduce using rule 145 (expression -> expression EQL expression .)
    COLON           reduce using rule 145 (expression -> expression EQL expression .)
    SEMICOLON       reduce using rule 145 (expression -> expression EQL expression .)
    PLUSCOLON       reduce using rule 145 (expression -> expression EQL expression .)
    MINUSCOLON      reduce using rule 145 (expression -> expression EQL expression .)
    RBRACKET        reduce using rule 145 (expression -> expression EQL expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236

  ! TIMES           [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! POWER           [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! DIVIDE          [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! MOD             [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! PLUS            [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! MINUS           [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! LSHIFT          [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! RSHIFT          [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! LSHIFTA         [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! RSHIFTA         [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! LT              [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! GT              [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! LE              [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! GE              [ reduce using rule 145 (expression -> expression EQL expression .) ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 396

    (146) expression -> expression NEL expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 146 (expression -> expression NEL expression .)
    NE              reduce using rule 146 (expression -> expression NEL expression .)
    EQL             reduce using rule 146 (expression -> expression NEL expression .)
    NEL             reduce using rule 146 (expression -> expression NEL expression .)
    AND             reduce using rule 146 (expression -> expression NEL expression .)
    XOR             reduce using rule 146 (expression -> expression NEL expression .)
    XNOR            reduce using rule 146 (expression -> expression NEL expression .)
    OR              reduce using rule 146 (expression -> expression NEL expression .)
    LAND            reduce using rule 146 (expression -> expression NEL expression .)
    LOR             reduce using rule 146 (expression -> expression NEL expression .)
    COND            reduce using rule 146 (expression -> expression NEL expression .)
    RPAREN          reduce using rule 146 (expression -> expression NEL expression .)
    LBRACE          reduce using rule 146 (expression -> expression NEL expression .)
    RBRACE          reduce using rule 146 (expression -> expression NEL expression .)
    COMMA           reduce using rule 146 (expression -> expression NEL expression .)
    COLON           reduce using rule 146 (expression -> expression NEL expression .)
    SEMICOLON       reduce using rule 146 (expression -> expression NEL expression .)
    PLUSCOLON       reduce using rule 146 (expression -> expression NEL expression .)
    MINUSCOLON      reduce using rule 146 (expression -> expression NEL expression .)
    RBRACKET        reduce using rule 146 (expression -> expression NEL expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236

  ! TIMES           [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! POWER           [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! DIVIDE          [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! MOD             [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! PLUS            [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! MINUS           [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! LSHIFT          [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! RSHIFT          [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! LSHIFTA         [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! RSHIFTA         [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! LT              [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! GT              [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! LE              [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! GE              [ reduce using rule 146 (expression -> expression NEL expression .) ]
  ! EQ              [ shift and go to state 237 ]
  ! NE              [ shift and go to state 238 ]
  ! EQL             [ shift and go to state 239 ]
  ! NEL             [ shift and go to state 240 ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 397

    (147) expression -> expression AND expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    AND             reduce using rule 147 (expression -> expression AND expression .)
    XOR             reduce using rule 147 (expression -> expression AND expression .)
    XNOR            reduce using rule 147 (expression -> expression AND expression .)
    OR              reduce using rule 147 (expression -> expression AND expression .)
    LAND            reduce using rule 147 (expression -> expression AND expression .)
    LOR             reduce using rule 147 (expression -> expression AND expression .)
    COND            reduce using rule 147 (expression -> expression AND expression .)
    RPAREN          reduce using rule 147 (expression -> expression AND expression .)
    LBRACE          reduce using rule 147 (expression -> expression AND expression .)
    RBRACE          reduce using rule 147 (expression -> expression AND expression .)
    COMMA           reduce using rule 147 (expression -> expression AND expression .)
    COLON           reduce using rule 147 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 147 (expression -> expression AND expression .)
    PLUSCOLON       reduce using rule 147 (expression -> expression AND expression .)
    MINUSCOLON      reduce using rule 147 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 147 (expression -> expression AND expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240

  ! TIMES           [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! LSHIFTA         [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! RSHIFTA         [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! EQL             [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! NEL             [ reduce using rule 147 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 398

    (148) expression -> expression XOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    AND             reduce using rule 148 (expression -> expression XOR expression .)
    XOR             reduce using rule 148 (expression -> expression XOR expression .)
    XNOR            reduce using rule 148 (expression -> expression XOR expression .)
    OR              reduce using rule 148 (expression -> expression XOR expression .)
    LAND            reduce using rule 148 (expression -> expression XOR expression .)
    LOR             reduce using rule 148 (expression -> expression XOR expression .)
    COND            reduce using rule 148 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 148 (expression -> expression XOR expression .)
    LBRACE          reduce using rule 148 (expression -> expression XOR expression .)
    RBRACE          reduce using rule 148 (expression -> expression XOR expression .)
    COMMA           reduce using rule 148 (expression -> expression XOR expression .)
    COLON           reduce using rule 148 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 148 (expression -> expression XOR expression .)
    PLUSCOLON       reduce using rule 148 (expression -> expression XOR expression .)
    MINUSCOLON      reduce using rule 148 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 148 (expression -> expression XOR expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240

  ! TIMES           [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! POWER           [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! LSHIFT          [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! RSHIFT          [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! LSHIFTA         [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! RSHIFTA         [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! NE              [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! EQL             [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! NEL             [ reduce using rule 148 (expression -> expression XOR expression .) ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 399

    (149) expression -> expression XNOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    AND             reduce using rule 149 (expression -> expression XNOR expression .)
    XOR             reduce using rule 149 (expression -> expression XNOR expression .)
    XNOR            reduce using rule 149 (expression -> expression XNOR expression .)
    OR              reduce using rule 149 (expression -> expression XNOR expression .)
    LAND            reduce using rule 149 (expression -> expression XNOR expression .)
    LOR             reduce using rule 149 (expression -> expression XNOR expression .)
    COND            reduce using rule 149 (expression -> expression XNOR expression .)
    RPAREN          reduce using rule 149 (expression -> expression XNOR expression .)
    LBRACE          reduce using rule 149 (expression -> expression XNOR expression .)
    RBRACE          reduce using rule 149 (expression -> expression XNOR expression .)
    COMMA           reduce using rule 149 (expression -> expression XNOR expression .)
    COLON           reduce using rule 149 (expression -> expression XNOR expression .)
    SEMICOLON       reduce using rule 149 (expression -> expression XNOR expression .)
    PLUSCOLON       reduce using rule 149 (expression -> expression XNOR expression .)
    MINUSCOLON      reduce using rule 149 (expression -> expression XNOR expression .)
    RBRACKET        reduce using rule 149 (expression -> expression XNOR expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240

  ! TIMES           [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! POWER           [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! DIVIDE          [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! MOD             [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! PLUS            [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! MINUS           [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! LSHIFT          [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! RSHIFT          [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! LSHIFTA         [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! RSHIFTA         [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! LT              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! GT              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! LE              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! GE              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! EQ              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! NE              [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! EQL             [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! NEL             [ reduce using rule 149 (expression -> expression XNOR expression .) ]
  ! AND             [ shift and go to state 241 ]
  ! XOR             [ shift and go to state 242 ]
  ! XNOR            [ shift and go to state 243 ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 400

    (150) expression -> expression OR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    OR              reduce using rule 150 (expression -> expression OR expression .)
    LAND            reduce using rule 150 (expression -> expression OR expression .)
    LOR             reduce using rule 150 (expression -> expression OR expression .)
    COND            reduce using rule 150 (expression -> expression OR expression .)
    RPAREN          reduce using rule 150 (expression -> expression OR expression .)
    LBRACE          reduce using rule 150 (expression -> expression OR expression .)
    RBRACE          reduce using rule 150 (expression -> expression OR expression .)
    COMMA           reduce using rule 150 (expression -> expression OR expression .)
    COLON           reduce using rule 150 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 150 (expression -> expression OR expression .)
    PLUSCOLON       reduce using rule 150 (expression -> expression OR expression .)
    MINUSCOLON      reduce using rule 150 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 150 (expression -> expression OR expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243

  ! TIMES           [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! LSHIFTA         [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! RSHIFTA         [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! EQL             [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! NEL             [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! XNOR            [ reduce using rule 150 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 244 ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 401

    (151) expression -> expression LAND expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LAND            reduce using rule 151 (expression -> expression LAND expression .)
    LOR             reduce using rule 151 (expression -> expression LAND expression .)
    COND            reduce using rule 151 (expression -> expression LAND expression .)
    RPAREN          reduce using rule 151 (expression -> expression LAND expression .)
    LBRACE          reduce using rule 151 (expression -> expression LAND expression .)
    RBRACE          reduce using rule 151 (expression -> expression LAND expression .)
    COMMA           reduce using rule 151 (expression -> expression LAND expression .)
    COLON           reduce using rule 151 (expression -> expression LAND expression .)
    SEMICOLON       reduce using rule 151 (expression -> expression LAND expression .)
    PLUSCOLON       reduce using rule 151 (expression -> expression LAND expression .)
    MINUSCOLON      reduce using rule 151 (expression -> expression LAND expression .)
    RBRACKET        reduce using rule 151 (expression -> expression LAND expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244

  ! TIMES           [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! POWER           [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! DIVIDE          [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! MOD             [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! PLUS            [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! MINUS           [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! LSHIFT          [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! RSHIFT          [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! LSHIFTA         [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! RSHIFTA         [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! LT              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! GT              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! LE              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! GE              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! EQ              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! NE              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! EQL             [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! NEL             [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! AND             [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! XOR             [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! XNOR            [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! OR              [ reduce using rule 151 (expression -> expression LAND expression .) ]
  ! LAND            [ shift and go to state 245 ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 402

    (152) expression -> expression LOR expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    LOR             reduce using rule 152 (expression -> expression LOR expression .)
    COND            reduce using rule 152 (expression -> expression LOR expression .)
    RPAREN          reduce using rule 152 (expression -> expression LOR expression .)
    LBRACE          reduce using rule 152 (expression -> expression LOR expression .)
    RBRACE          reduce using rule 152 (expression -> expression LOR expression .)
    COMMA           reduce using rule 152 (expression -> expression LOR expression .)
    COLON           reduce using rule 152 (expression -> expression LOR expression .)
    SEMICOLON       reduce using rule 152 (expression -> expression LOR expression .)
    PLUSCOLON       reduce using rule 152 (expression -> expression LOR expression .)
    MINUSCOLON      reduce using rule 152 (expression -> expression LOR expression .)
    RBRACKET        reduce using rule 152 (expression -> expression LOR expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245

  ! TIMES           [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! POWER           [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! DIVIDE          [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! MOD             [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! PLUS            [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! MINUS           [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LSHIFT          [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! RSHIFT          [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LSHIFTA         [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! RSHIFTA         [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LT              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! GT              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LE              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! GE              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! EQ              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! NE              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! EQL             [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! NEL             [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! AND             [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! XOR             [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! XNOR            [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! OR              [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LAND            [ reduce using rule 152 (expression -> expression LOR expression .) ]
  ! LOR             [ shift and go to state 246 ]
  ! COND            [ shift and go to state 247 ]


state 403

    (153) expression -> expression COND expression . COLON expression
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 508
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 404

    (170) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (171) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (172) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (174) pointer -> pointer LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 509
    PLUSCOLON       shift and go to state 511
    MINUSCOLON      shift and go to state 512
    RBRACKET        shift and go to state 510
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 405

    (167) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (168) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (169) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (173) pointer -> identifier LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 513
    PLUSCOLON       shift and go to state 515
    MINUSCOLON      shift and go to state 516
    RBRACKET        shift and go to state 514
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 406

    (358) functioncall -> identifier LPAREN func_args . RPAREN
    (359) func_args -> func_args . COMMA expression

    RPAREN          shift and go to state 517
    COMMA           shift and go to state 518


state 407

    (360) func_args -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 360 (func_args -> expression .)
    COMMA           reduce using rule 360 (func_args -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 408

    (361) func_args -> empty .

    RPAREN          reduce using rule 361 (func_args -> empty .)
    COMMA           reduce using rule 361 (func_args -> empty .)


state 409

    (163) concat -> LBRACE concatlist RBRACE .

    TIMES           reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    POWER           reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    DIVIDE          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    MOD             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    PLUS            reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    MINUS           reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LSHIFT          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    RSHIFT          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LSHIFTA         reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    RSHIFTA         reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LT              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    GT              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LE              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    GE              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    EQ              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    NE              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    EQL             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    NEL             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    AND             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    XOR             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    XNOR            reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    OR              reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LAND            reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LOR             reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    COND            reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    RPAREN          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    LBRACE          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    RBRACE          reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    COMMA           reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    COLON           reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    SEMICOLON       reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    PLUSCOLON       reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    MINUSCOLON      reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)
    RBRACKET        reduce using rule 163 (concat -> LBRACE concatlist RBRACE .)


state 410

    (164) concatlist -> concatlist COMMA . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 519
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 411

    (163) concat -> LBRACE . concatlist RBRACE
    (164) concatlist -> . concatlist COMMA expression
    (165) concatlist -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    concatlist                     shift and go to state 263
    expression                     shift and go to state 520
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 412

    (166) repeat -> LBRACE expression concat . RBRACE

    RBRACE          shift and go to state 521


state 413

    (337) systemcall -> DOLLER ID LPAREN . sysargs RPAREN
    (339) sysargs -> . sysargs COMMA sysarg
    (340) sysargs -> . sysarg
    (341) sysargs -> . empty
    (342) sysarg -> . expression
    (385) empty -> .
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 385 (empty -> .)
    COMMA           reduce using rule 385 (empty -> .)
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    sysargs                        shift and go to state 522
    sysarg                         shift and go to state 523
    empty                          shift and go to state 524
    expression                     shift and go to state 525
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 414

    (338) systemcall -> DOLLER SIGNED LPAREN . sysargs RPAREN
    (339) sysargs -> . sysargs COMMA sysarg
    (340) sysargs -> . sysarg
    (341) sysargs -> . empty
    (342) sysarg -> . expression
    (385) empty -> .
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 385 (empty -> .)
    COMMA           reduce using rule 385 (empty -> .)
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    sysargs                        shift and go to state 526
    sysarg                         shift and go to state 523
    empty                          shift and go to state 524
    expression                     shift and go to state 525
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 415

    (327) generate_if -> IF LPAREN cond . RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> IF LPAREN cond . RPAREN gif_true_item

    RPAREN          shift and go to state 527


state 416

    (252) cond -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 252 (cond -> expression .)
    SEMICOLON       reduce using rule 252 (cond -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 417

    (333) generate_for -> FOR LPAREN forpre . forcond forpost RPAREN generate_forcontent
    (259) forcond -> . cond SEMICOLON
    (260) forcond -> . SEMICOLON
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 530
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    forcond                        shift and go to state 528
    cond                           shift and go to state 529
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 418

    (257) forpre -> blocking_substitution .

    SEMICOLON       reduce using rule 257 (forpre -> blocking_substitution .)
    MINUS           reduce using rule 257 (forpre -> blocking_substitution .)
    PLUS            reduce using rule 257 (forpre -> blocking_substitution .)
    LNOT            reduce using rule 257 (forpre -> blocking_substitution .)
    NOT             reduce using rule 257 (forpre -> blocking_substitution .)
    AND             reduce using rule 257 (forpre -> blocking_substitution .)
    NAND            reduce using rule 257 (forpre -> blocking_substitution .)
    NOR             reduce using rule 257 (forpre -> blocking_substitution .)
    OR              reduce using rule 257 (forpre -> blocking_substitution .)
    XOR             reduce using rule 257 (forpre -> blocking_substitution .)
    XNOR            reduce using rule 257 (forpre -> blocking_substitution .)
    LPAREN          reduce using rule 257 (forpre -> blocking_substitution .)
    LBRACE          reduce using rule 257 (forpre -> blocking_substitution .)
    DOLLER          reduce using rule 257 (forpre -> blocking_substitution .)
    ID              reduce using rule 257 (forpre -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 257 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 257 (forpre -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 257 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 257 (forpre -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 257 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 257 (forpre -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 257 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 257 (forpre -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 257 (forpre -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 257 (forpre -> blocking_substitution .)


state 419

    (258) forpre -> SEMICOLON .

    SEMICOLON       reduce using rule 258 (forpre -> SEMICOLON .)
    MINUS           reduce using rule 258 (forpre -> SEMICOLON .)
    PLUS            reduce using rule 258 (forpre -> SEMICOLON .)
    LNOT            reduce using rule 258 (forpre -> SEMICOLON .)
    NOT             reduce using rule 258 (forpre -> SEMICOLON .)
    AND             reduce using rule 258 (forpre -> SEMICOLON .)
    NAND            reduce using rule 258 (forpre -> SEMICOLON .)
    NOR             reduce using rule 258 (forpre -> SEMICOLON .)
    OR              reduce using rule 258 (forpre -> SEMICOLON .)
    XOR             reduce using rule 258 (forpre -> SEMICOLON .)
    XNOR            reduce using rule 258 (forpre -> SEMICOLON .)
    LPAREN          reduce using rule 258 (forpre -> SEMICOLON .)
    LBRACE          reduce using rule 258 (forpre -> SEMICOLON .)
    DOLLER          reduce using rule 258 (forpre -> SEMICOLON .)
    ID              reduce using rule 258 (forpre -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 258 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 258 (forpre -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 258 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 258 (forpre -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 258 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 258 (forpre -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 258 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 258 (forpre -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 258 (forpre -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 258 (forpre -> SEMICOLON .)


state 420

    (223) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    LBRACE          shift and go to state 162
    ID              shift and go to state 81

    lvalue                         shift and go to state 531
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 421

    (72) declnamelist -> declnamelist COMMA declname .

    SEMICOLON       reduce using rule 72 (declnamelist -> declnamelist COMMA declname .)
    COMMA           reduce using rule 72 (declnamelist -> declnamelist COMMA declname .)


state 422

    (74) declname -> ID .
    (75) declname -> ID . length
    (50) length -> . LBRACKET expression COLON expression RBRACKET

    SEMICOLON       reduce using rule 74 (declname -> ID .)
    COMMA           reduce using rule 74 (declname -> ID .)
    LBRACKET        shift and go to state 280

    length                         shift and go to state 279

state 423

    (71) decl -> sigtypes width declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENERATE        reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    INTEGER         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    REAL            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENVAR          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    INITIAL         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    ID              reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    TASK            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    LPAREN          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    INPUT           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    INOUT           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    TRI             reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    REG             reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    WIRE            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    SIGNED          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    IF              reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOR             reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    WHILE           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASE            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASEX           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    BEGIN           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    DELAY           reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    LBRACE          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    END             reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    WAIT            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOREVER         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    FORK            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    AT              reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    DOLLER          reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    DISABLE         reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)
    ELSE            reduce using rule 71 (decl -> sigtypes width declnamelist SEMICOLON .)


state 424

    (77) declassign -> sigtypes width declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENERATE        reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INTEGER         reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REAL            reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENVAR          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INITIAL         reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ID              reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TASK            reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LPAREN          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INPUT           reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INOUT           reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TRI             reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REG             reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    WIRE            reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SIGNED          reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    IF              reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FOR             reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ELSE            reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)
    END             reduce using rule 77 (declassign -> sigtypes width declassign_element SEMICOLON .)


state 425

    (49) width -> LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 532
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 426

    (78) declassign_element -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 78 (declassign_element -> ID EQUALS rvalue .)


state 427

    (118) rvalue -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    SEMICOLON       reduce using rule 118 (rvalue -> expression .)
    COMMA           reduce using rule 118 (rvalue -> expression .)
    RPAREN          reduce using rule 118 (rvalue -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 428

    (50) length -> LBRACKET expression . COLON expression RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 533
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 429

    (79) declassign_element -> delays ID EQUALS . delays rvalue
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    DELAY           shift and go to state 135
    MINUS           reduce using rule 385 (empty -> .)
    PLUS            reduce using rule 385 (empty -> .)
    LNOT            reduce using rule 385 (empty -> .)
    NOT             reduce using rule 385 (empty -> .)
    AND             reduce using rule 385 (empty -> .)
    NAND            reduce using rule 385 (empty -> .)
    NOR             reduce using rule 385 (empty -> .)
    OR              reduce using rule 385 (empty -> .)
    XOR             reduce using rule 385 (empty -> .)
    XNOR            reduce using rule 385 (empty -> .)
    LPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTNUMBER_DEC   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 385 (empty -> .)
    INTNUMBER_BIN   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 385 (empty -> .)
    INTNUMBER_OCT   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 385 (empty -> .)
    INTNUMBER_HEX   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 385 (empty -> .)
    FLOATNUMBER     reduce using rule 385 (empty -> .)
    STRING_LITERAL  reduce using rule 385 (empty -> .)

    delays                         shift and go to state 534
    empty                          shift and go to state 136

state 430

    (226) delays -> DELAY LPAREN expression . RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 535
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 431

    (173) pointer -> identifier LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 536
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 432

    (174) pointer -> pointer LBRACKET . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 537
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 433

    (82) integernamelist -> integernamelist COMMA integername .

    SEMICOLON       reduce using rule 82 (integernamelist -> integernamelist COMMA integername .)
    COMMA           reduce using rule 82 (integernamelist -> integernamelist COMMA integername .)


state 434

    (81) integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENERATE        reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INTEGER         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REAL            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENVAR          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INITIAL         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ID              reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TASK            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LPAREN          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INPUT           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INOUT           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TRI             reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REG             reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WIRE            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SIGNED          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    IF              reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOR             reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WHILE           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASE            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASEX           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    BEGIN           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DELAY           reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LBRACE          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    END             reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WAIT            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOREVER         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FORK            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    AT              reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DOLLER          reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DISABLE         reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ELSE            reduce using rule 81 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)


state 435

    (86) realnamelist -> realnamelist COMMA realname .

    SEMICOLON       reduce using rule 86 (realnamelist -> realnamelist COMMA realname .)
    COMMA           reduce using rule 86 (realnamelist -> realnamelist COMMA realname .)


state 436

    (95) param_substitution_list -> param_substitution_list COMMA param_substitution .

    SEMICOLON       reduce using rule 95 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    COMMA           reduce using rule 95 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    RPAREN          reduce using rule 95 (param_substitution_list -> param_substitution_list COMMA param_substitution .)


state 437

    (90) parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ID              reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REG             reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    IF              reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    END             reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    AT              reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 90 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)


state 438

    (91) parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 91 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)


state 439

    (97) param_substitution -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 97 (param_substitution -> ID EQUALS rvalue .)
    COMMA           reduce using rule 97 (param_substitution -> ID EQUALS rvalue .)
    RPAREN          reduce using rule 97 (param_substitution -> ID EQUALS rvalue .)


state 440

    (93) localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ID              reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REG             reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    IF              reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    END             reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    AT              reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 93 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)


state 441

    (94) localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 94 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)


state 442

    (315) genvarlist -> genvarlist COMMA genvar .

    SEMICOLON       reduce using rule 315 (genvarlist -> genvarlist COMMA genvar .)
    COMMA           reduce using rule 315 (genvarlist -> genvarlist COMMA genvar .)


state 443

    (98) assignment -> ASSIGN lvalue EQUALS rvalue . SEMICOLON

    SEMICOLON       shift and go to state 538


state 444

    (99) assignment -> ASSIGN delays lvalue EQUALS . delays rvalue SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    DELAY           shift and go to state 135
    MINUS           reduce using rule 385 (empty -> .)
    PLUS            reduce using rule 385 (empty -> .)
    LNOT            reduce using rule 385 (empty -> .)
    NOT             reduce using rule 385 (empty -> .)
    AND             reduce using rule 385 (empty -> .)
    NAND            reduce using rule 385 (empty -> .)
    NOR             reduce using rule 385 (empty -> .)
    OR              reduce using rule 385 (empty -> .)
    XOR             reduce using rule 385 (empty -> .)
    XNOR            reduce using rule 385 (empty -> .)
    LPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTNUMBER_DEC   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 385 (empty -> .)
    INTNUMBER_BIN   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 385 (empty -> .)
    INTNUMBER_OCT   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 385 (empty -> .)
    INTNUMBER_HEX   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 385 (empty -> .)
    FLOATNUMBER     reduce using rule 385 (empty -> .)
    STRING_LITERAL  reduce using rule 385 (empty -> .)

    delays                         shift and go to state 539
    empty                          shift and go to state 136

state 445

    (103) lpartselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (104) lpartselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (105) lpartselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (173) pointer -> identifier LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 540
    PLUSCOLON       shift and go to state 541
    MINUSCOLON      shift and go to state 542
    RBRACKET        shift and go to state 514
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 446

    (100) lpartselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (101) lpartselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (102) lpartselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (174) pointer -> pointer LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 543
    PLUSCOLON       shift and go to state 544
    MINUSCOLON      shift and go to state 545
    RBRACKET        shift and go to state 510
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 447

    (107) lconcat -> LBRACE lconcatlist RBRACE .

    EQUALS          reduce using rule 107 (lconcat -> LBRACE lconcatlist RBRACE .)
    RBRACE          reduce using rule 107 (lconcat -> LBRACE lconcatlist RBRACE .)
    COMMA           reduce using rule 107 (lconcat -> LBRACE lconcatlist RBRACE .)
    LE              reduce using rule 107 (lconcat -> LBRACE lconcatlist RBRACE .)


state 448

    (108) lconcatlist -> lconcatlist COMMA . lconcat_one
    (110) lconcat_one -> . identifier
    (111) lconcat_one -> . lpartselect
    (112) lconcat_one -> . lpointer
    (113) lconcat_one -> . lconcat
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 81
    LBRACE          shift and go to state 162

    lconcat_one                    shift and go to state 546
    identifier                     shift and go to state 308
    lpartselect                    shift and go to state 309
    lpointer                       shift and go to state 310
    lconcat                        shift and go to state 311
    scope                          shift and go to state 103
    pointer                        shift and go to state 312

state 449

    (189) senslist -> AT LPAREN edgesigs . RPAREN
    (194) edgesigs -> edgesigs . SENS_OR edgesig

    RPAREN          shift and go to state 547
    SENS_OR         shift and go to state 548


state 450

    (198) senslist -> AT LPAREN levelsigs . RPAREN
    (203) levelsigs -> levelsigs . SENS_OR levelsig
    (204) levelsigs -> levelsigs . COMMA levelsig

    RPAREN          shift and go to state 549
    SENS_OR         shift and go to state 550
    COMMA           shift and go to state 551


state 451

    (207) senslist -> AT LPAREN TIMES . RPAREN

    RPAREN          shift and go to state 552


state 452

    (195) edgesigs -> edgesig .

    RPAREN          reduce using rule 195 (edgesigs -> edgesig .)
    SENS_OR         reduce using rule 195 (edgesigs -> edgesig .)


state 453

    (205) levelsigs -> levelsig .

    RPAREN          reduce using rule 205 (levelsigs -> levelsig .)
    SENS_OR         reduce using rule 205 (levelsigs -> levelsig .)
    COMMA           reduce using rule 205 (levelsigs -> levelsig .)


state 454

    (190) edgesig -> POSEDGE . edgesig_base
    (192) edgesig_base -> . identifier
    (193) edgesig_base -> . pointer
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    ID              shift and go to state 81

    edgesig_base                   shift and go to state 553
    identifier                     shift and go to state 554
    pointer                        shift and go to state 555
    scope                          shift and go to state 103

state 455

    (191) edgesig -> NEGEDGE . edgesig_base
    (192) edgesig_base -> . identifier
    (193) edgesig_base -> . pointer
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    ID              shift and go to state 81

    edgesig_base                   shift and go to state 556
    identifier                     shift and go to state 554
    pointer                        shift and go to state 555
    scope                          shift and go to state 103

state 456

    (173) pointer -> identifier LBRACKET . expression RBRACKET
    (167) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (168) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 557
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 457

    (174) pointer -> pointer LBRACKET . expression RBRACKET
    (170) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (171) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (172) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 558
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 458

    (248) if_statement -> IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (249) if_statement -> IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 559


state 459

    (250) if_statement -> delays IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> delays IF LPAREN . cond RPAREN true_statement
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    cond                           shift and go to state 560
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 460

    (223) blocking_substitution -> delays lvalue EQUALS . delays rvalue SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    DELAY           shift and go to state 135
    MINUS           reduce using rule 385 (empty -> .)
    PLUS            reduce using rule 385 (empty -> .)
    LNOT            reduce using rule 385 (empty -> .)
    NOT             reduce using rule 385 (empty -> .)
    AND             reduce using rule 385 (empty -> .)
    NAND            reduce using rule 385 (empty -> .)
    NOR             reduce using rule 385 (empty -> .)
    OR              reduce using rule 385 (empty -> .)
    XOR             reduce using rule 385 (empty -> .)
    XNOR            reduce using rule 385 (empty -> .)
    LPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTNUMBER_DEC   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 385 (empty -> .)
    INTNUMBER_BIN   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 385 (empty -> .)
    INTNUMBER_OCT   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 385 (empty -> .)
    INTNUMBER_HEX   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 385 (empty -> .)
    FLOATNUMBER     reduce using rule 385 (empty -> .)
    STRING_LITERAL  reduce using rule 385 (empty -> .)

    delays                         shift and go to state 561
    empty                          shift and go to state 136

state 461

    (225) nonblocking_substitution -> delays lvalue LE . delays rvalue SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    DELAY           shift and go to state 135
    MINUS           reduce using rule 385 (empty -> .)
    PLUS            reduce using rule 385 (empty -> .)
    LNOT            reduce using rule 385 (empty -> .)
    NOT             reduce using rule 385 (empty -> .)
    AND             reduce using rule 385 (empty -> .)
    NAND            reduce using rule 385 (empty -> .)
    NOR             reduce using rule 385 (empty -> .)
    OR              reduce using rule 385 (empty -> .)
    XOR             reduce using rule 385 (empty -> .)
    XNOR            reduce using rule 385 (empty -> .)
    LPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTNUMBER_DEC   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 385 (empty -> .)
    INTNUMBER_BIN   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 385 (empty -> .)
    INTNUMBER_OCT   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 385 (empty -> .)
    INTNUMBER_HEX   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 385 (empty -> .)
    FLOATNUMBER     reduce using rule 385 (empty -> .)
    STRING_LITERAL  reduce using rule 385 (empty -> .)

    delays                         shift and go to state 562
    empty                          shift and go to state 136

state 462

    (266) case_statement -> CASE LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 563


state 463

    (268) case_comp -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 268 (case_comp -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 464

    (267) casex_statement -> CASEX LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 564


state 465

    (256) for_statement -> FOR LPAREN forpre . forcond forpost RPAREN forcontent_statement
    (259) forcond -> . cond SEMICOLON
    (260) forcond -> . SEMICOLON
    (252) cond -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 530
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    forcond                        shift and go to state 565
    cond                           shift and go to state 529
    expression                     shift and go to state 416
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 466

    (264) while_statement -> WHILE LPAREN cond . RPAREN whilecontent_statement

    RPAREN          shift and go to state 566


state 467

    (278) wait_statement -> WAIT LPAREN cond . RPAREN waitcontent_statement

    RPAREN          shift and go to state 567


state 468

    (231) block -> BEGIN block_statements END .

    ENDMODULE       reduce using rule 231 (block -> BEGIN block_statements END .)
    GENERATE        reduce using rule 231 (block -> BEGIN block_statements END .)
    INTEGER         reduce using rule 231 (block -> BEGIN block_statements END .)
    REAL            reduce using rule 231 (block -> BEGIN block_statements END .)
    PARAMETER       reduce using rule 231 (block -> BEGIN block_statements END .)
    LOCALPARAM      reduce using rule 231 (block -> BEGIN block_statements END .)
    GENVAR          reduce using rule 231 (block -> BEGIN block_statements END .)
    ASSIGN          reduce using rule 231 (block -> BEGIN block_statements END .)
    ALWAYS          reduce using rule 231 (block -> BEGIN block_statements END .)
    INITIAL         reduce using rule 231 (block -> BEGIN block_statements END .)
    ID              reduce using rule 231 (block -> BEGIN block_statements END .)
    SENS_OR         reduce using rule 231 (block -> BEGIN block_statements END .)
    FUNCTION        reduce using rule 231 (block -> BEGIN block_statements END .)
    TASK            reduce using rule 231 (block -> BEGIN block_statements END .)
    LPAREN          reduce using rule 231 (block -> BEGIN block_statements END .)
    INPUT           reduce using rule 231 (block -> BEGIN block_statements END .)
    OUTPUT          reduce using rule 231 (block -> BEGIN block_statements END .)
    INOUT           reduce using rule 231 (block -> BEGIN block_statements END .)
    TRI             reduce using rule 231 (block -> BEGIN block_statements END .)
    REG             reduce using rule 231 (block -> BEGIN block_statements END .)
    WIRE            reduce using rule 231 (block -> BEGIN block_statements END .)
    SIGNED          reduce using rule 231 (block -> BEGIN block_statements END .)
    SUPPLY0         reduce using rule 231 (block -> BEGIN block_statements END .)
    SUPPLY1         reduce using rule 231 (block -> BEGIN block_statements END .)
    ENDGENERATE     reduce using rule 231 (block -> BEGIN block_statements END .)
    IF              reduce using rule 231 (block -> BEGIN block_statements END .)
    FOR             reduce using rule 231 (block -> BEGIN block_statements END .)
    ELSE            reduce using rule 231 (block -> BEGIN block_statements END .)
    END             reduce using rule 231 (block -> BEGIN block_statements END .)
    CASE            reduce using rule 231 (block -> BEGIN block_statements END .)
    CASEX           reduce using rule 231 (block -> BEGIN block_statements END .)
    WHILE           reduce using rule 231 (block -> BEGIN block_statements END .)
    WAIT            reduce using rule 231 (block -> BEGIN block_statements END .)
    FOREVER         reduce using rule 231 (block -> BEGIN block_statements END .)
    BEGIN           reduce using rule 231 (block -> BEGIN block_statements END .)
    FORK            reduce using rule 231 (block -> BEGIN block_statements END .)
    DELAY           reduce using rule 231 (block -> BEGIN block_statements END .)
    AT              reduce using rule 231 (block -> BEGIN block_statements END .)
    DOLLER          reduce using rule 231 (block -> BEGIN block_statements END .)
    DISABLE         reduce using rule 231 (block -> BEGIN block_statements END .)
    LBRACE          reduce using rule 231 (block -> BEGIN block_statements END .)
    SEMICOLON       reduce using rule 231 (block -> BEGIN block_statements END .)
    JOIN            reduce using rule 231 (block -> BEGIN block_statements END .)
    ENDFUNCTION     reduce using rule 231 (block -> BEGIN block_statements END .)
    ENDTASK         reduce using rule 231 (block -> BEGIN block_statements END .)
    ENDCASE         reduce using rule 231 (block -> BEGIN block_statements END .)
    DEFAULT         reduce using rule 231 (block -> BEGIN block_statements END .)
    MINUS           reduce using rule 231 (block -> BEGIN block_statements END .)
    PLUS            reduce using rule 231 (block -> BEGIN block_statements END .)
    LNOT            reduce using rule 231 (block -> BEGIN block_statements END .)
    NOT             reduce using rule 231 (block -> BEGIN block_statements END .)
    AND             reduce using rule 231 (block -> BEGIN block_statements END .)
    NAND            reduce using rule 231 (block -> BEGIN block_statements END .)
    NOR             reduce using rule 231 (block -> BEGIN block_statements END .)
    OR              reduce using rule 231 (block -> BEGIN block_statements END .)
    XOR             reduce using rule 231 (block -> BEGIN block_statements END .)
    XNOR            reduce using rule 231 (block -> BEGIN block_statements END .)
    INTNUMBER_DEC   reduce using rule 231 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 231 (block -> BEGIN block_statements END .)
    INTNUMBER_BIN   reduce using rule 231 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 231 (block -> BEGIN block_statements END .)
    INTNUMBER_OCT   reduce using rule 231 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 231 (block -> BEGIN block_statements END .)
    INTNUMBER_HEX   reduce using rule 231 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 231 (block -> BEGIN block_statements END .)
    FLOATNUMBER     reduce using rule 231 (block -> BEGIN block_statements END .)
    STRING_LITERAL  reduce using rule 231 (block -> BEGIN block_statements END .)


state 469

    (233) block_statements -> block_statements block_statement .

    END             reduce using rule 233 (block_statements -> block_statements block_statement .)
    IF              reduce using rule 233 (block_statements -> block_statements block_statement .)
    CASE            reduce using rule 233 (block_statements -> block_statements block_statement .)
    CASEX           reduce using rule 233 (block_statements -> block_statements block_statement .)
    FOR             reduce using rule 233 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 233 (block_statements -> block_statements block_statement .)
    WAIT            reduce using rule 233 (block_statements -> block_statements block_statement .)
    FOREVER         reduce using rule 233 (block_statements -> block_statements block_statement .)
    BEGIN           reduce using rule 233 (block_statements -> block_statements block_statement .)
    FORK            reduce using rule 233 (block_statements -> block_statements block_statement .)
    DELAY           reduce using rule 233 (block_statements -> block_statements block_statement .)
    AT              reduce using rule 233 (block_statements -> block_statements block_statement .)
    DOLLER          reduce using rule 233 (block_statements -> block_statements block_statement .)
    DISABLE         reduce using rule 233 (block_statements -> block_statements block_statement .)
    LBRACE          reduce using rule 233 (block_statements -> block_statements block_statement .)
    ID              reduce using rule 233 (block_statements -> block_statements block_statement .)
    SEMICOLON       reduce using rule 233 (block_statements -> block_statements block_statement .)
    JOIN            reduce using rule 233 (block_statements -> block_statements block_statement .)


state 470

    (236) namedblock -> BEGIN COLON ID . namedblock_statements END
    (237) namedblock -> BEGIN COLON ID . END
    (238) namedblock_statements -> . namedblock_statements namedblock_statement
    (239) namedblock_statements -> . namedblock_statement
    (240) namedblock_statement -> . basic_statement
    (241) namedblock_statement -> . decl
    (242) namedblock_statement -> . integerdecl
    (243) namedblock_statement -> . realdecl
    (244) namedblock_statement -> . parameterdecl
    (245) namedblock_statement -> . localparamdecl
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 569
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    namedblock_statements          shift and go to state 568
    namedblock_statement           shift and go to state 570
    basic_statement                shift and go to state 571
    decl                           shift and go to state 572
    integerdecl                    shift and go to state 573
    realdecl                       shift and go to state 574
    parameterdecl                  shift and go to state 575
    localparamdecl                 shift and go to state 576
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    sigtypes                       shift and go to state 497
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    sigtype                        shift and go to state 58
    empty                          shift and go to state 196

state 471

    (246) parallelblock -> FORK block_statements JOIN .

    ENDMODULE       reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    GENERATE        reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INTEGER         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    REAL            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    PARAMETER       reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    LOCALPARAM      reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    GENVAR          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ASSIGN          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INITIAL         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ID              reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SENS_OR         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    FUNCTION        reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    TASK            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    LPAREN          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INPUT           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    OUTPUT          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INOUT           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    TRI             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    REG             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    WIRE            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SIGNED          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY0         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY1         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ENDGENERATE     reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    IF              reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    FOR             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ELSE            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    END             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    CASE            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    CASEX           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    WHILE           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    WAIT            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    FOREVER         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    BEGIN           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    FORK            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    DELAY           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    AT              reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    DOLLER          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    DISABLE         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    LBRACE          reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SEMICOLON       reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    JOIN            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ENDFUNCTION     reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ENDTASK         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    ENDCASE         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    DEFAULT         reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    MINUS           reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    PLUS            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    LNOT            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    NOT             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    AND             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    NAND            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    NOR             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    OR              reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    XOR             reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    XNOR            reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_DEC   reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_BIN   reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_OCT   reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_HEX   reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    FLOATNUMBER     reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)
    STRING_LITERAL  reduce using rule 246 (parallelblock -> FORK block_statements JOIN .)


state 472

    (382) single_statement -> DELAY expression SEMICOLON .

    ENDMODULE       reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    GENERATE        reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INTEGER         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    REAL            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    PARAMETER       reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    LOCALPARAM      reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    GENVAR          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ASSIGN          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INITIAL         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ID              reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SENS_OR         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    FUNCTION        reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    TASK            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    LPAREN          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INPUT           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    OUTPUT          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INOUT           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    TRI             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    REG             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    WIRE            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY0         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY1         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ENDGENERATE     reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    IF              reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    FOR             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ELSE            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    END             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    CASE            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    CASEX           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    WHILE           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    WAIT            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    FOREVER         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    BEGIN           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    FORK            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    DELAY           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    AT              reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    DOLLER          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    DISABLE         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    LBRACE          reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SEMICOLON       reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    JOIN            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ENDFUNCTION     reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ENDTASK         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    ENDCASE         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    DEFAULT         reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    MINUS           reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    PLUS            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    LNOT            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    NOT             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    AND             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    NAND            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    NOR             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    OR              reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    XOR             reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    XNOR            reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    FLOATNUMBER     reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 382 (single_statement -> DELAY expression SEMICOLON .)


state 473

    (226) delays -> DELAY LPAREN expression . RPAREN
    (154) expression -> LPAREN expression . RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 577
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 474

    (286) instance_body -> ID LPAREN . instance_ports RPAREN
    (303) instance_ports -> . instance_ports_list
    (304) instance_ports -> . instance_ports_arg
    (305) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (306) instance_ports_list -> . instance_port_list
    (307) instance_ports_list -> . empty
    (309) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (310) instance_ports_arg -> . instance_port_arg
    (308) instance_port_list -> . expression
    (385) empty -> .
    (311) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (312) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (313) instance_port_arg -> . DOT ID LPAREN RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 385 (empty -> .)
    RPAREN          reduce using rule 385 (empty -> .)
    DOT             shift and go to state 360
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    instance_ports                 shift and go to state 578
    instance_ports_list            shift and go to state 354
    instance_ports_arg             shift and go to state 355
    instance_port_list             shift and go to state 356
    empty                          shift and go to state 357
    instance_port_arg              shift and go to state 358
    expression                     shift and go to state 359
    identifier                     shift and go to state 99
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 475

    (287) instance_body -> ID width . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 579


state 476

    (282) instance -> ID parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 282 (instance -> ID parameterlist instance_bodylist SEMICOLON .)


state 477

    (284) instance_bodylist -> instance_bodylist COMMA . instance_body
    (286) instance_body -> . ID LPAREN instance_ports RPAREN
    (287) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 347

    instance_body                  shift and go to state 580

state 478

    (290) instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .

    SEMICOLON       reduce using rule 290 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)
    COMMA           reduce using rule 290 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)


state 479

    (293) parameterlist -> DELAY LPAREN param_args . RPAREN
    (298) param_args -> param_args . COMMA param_arg

    RPAREN          shift and go to state 581
    COMMA           shift and go to state 582


state 480

    (294) parameterlist -> DELAY LPAREN param_args_noname . RPAREN
    (296) param_args_noname -> param_args_noname . COMMA param_arg_noname

    RPAREN          shift and go to state 583
    COMMA           shift and go to state 584


state 481

    (299) param_args -> param_arg .

    RPAREN          reduce using rule 299 (param_args -> param_arg .)
    COMMA           reduce using rule 299 (param_args -> param_arg .)


state 482

    (300) param_args -> empty .

    RPAREN          reduce using rule 300 (param_args -> empty .)
    COMMA           reduce using rule 300 (param_args -> empty .)


state 483

    (297) param_args_noname -> param_arg_noname .

    RPAREN          reduce using rule 297 (param_args_noname -> param_arg_noname .)
    COMMA           reduce using rule 297 (param_args_noname -> param_arg_noname .)


state 484

    (302) param_arg -> DOT . ID LPAREN expression RPAREN

    ID              shift and go to state 585


state 485

    (301) param_arg_noname -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 301 (param_arg_noname -> expression .)
    COMMA           reduce using rule 301 (param_arg_noname -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 486

    (292) instance_body_noname -> LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 292 (instance_body_noname -> LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 292 (instance_body_noname -> LPAREN instance_ports RPAREN .)


state 487

    (305) instance_ports_list -> instance_ports_list COMMA . instance_port_list
    (308) instance_port_list -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    instance_port_list             shift and go to state 586
    expression                     shift and go to state 359
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 488

    (309) instance_ports_arg -> instance_ports_arg COMMA . instance_port_arg
    (311) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (312) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (313) instance_port_arg -> . DOT ID LPAREN RPAREN

    DOT             shift and go to state 360

    instance_port_arg              shift and go to state 587

state 489

    (311) instance_port_arg -> DOT ID . LPAREN identifier RPAREN
    (312) instance_port_arg -> DOT ID . LPAREN expression RPAREN
    (313) instance_port_arg -> DOT ID . LPAREN RPAREN

    LPAREN          shift and go to state 588


state 490

    (283) instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 283 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)


state 491

    (343) function -> FUNCTION width ID SEMICOLON . function_statement ENDFUNCTION
    (345) function_statement -> . funcvardecls function_calc
    (346) funcvardecls -> . funcvardecls funcvardecl
    (347) funcvardecls -> . funcvardecl
    (348) funcvardecl -> . decl
    (349) funcvardecl -> . integerdecl
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 45
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    function_statement             shift and go to state 589
    funcvardecls                   shift and go to state 493
    funcvardecl                    shift and go to state 494
    decl                           shift and go to state 495
    integerdecl                    shift and go to state 496
    sigtypes                       shift and go to state 497
    sigtype                        shift and go to state 58

state 492

    (344) function -> FUNCTION ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 590


state 493

    (345) function_statement -> funcvardecls . function_calc
    (346) funcvardecls -> funcvardecls . funcvardecl
    (350) function_calc -> . blocking_substitution
    (351) function_calc -> . if_statement
    (352) function_calc -> . for_statement
    (353) function_calc -> . while_statement
    (354) function_calc -> . case_statement
    (355) function_calc -> . casex_statement
    (356) function_calc -> . block
    (357) function_calc -> . namedblock
    (348) funcvardecl -> . decl
    (349) funcvardecl -> . integerdecl
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (385) empty -> .
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    BEGIN           shift and go to state 191
    INTEGER         shift and go to state 45
    DELAY           shift and go to state 135
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! IF              [ reduce using rule 385 (empty -> .) ]

    function_calc                  shift and go to state 591
    funcvardecl                    shift and go to state 592
    blocking_substitution          shift and go to state 593
    if_statement                   shift and go to state 594
    for_statement                  shift and go to state 595
    while_statement                shift and go to state 596
    case_statement                 shift and go to state 597
    casex_statement                shift and go to state 598
    block                          shift and go to state 599
    namedblock                     shift and go to state 600
    decl                           shift and go to state 495
    integerdecl                    shift and go to state 496
    delays                         shift and go to state 601
    sigtypes                       shift and go to state 497
    empty                          shift and go to state 136
    sigtype                        shift and go to state 58

state 494

    (347) funcvardecls -> funcvardecl .

    IF              reduce using rule 347 (funcvardecls -> funcvardecl .)
    FOR             reduce using rule 347 (funcvardecls -> funcvardecl .)
    WHILE           reduce using rule 347 (funcvardecls -> funcvardecl .)
    CASE            reduce using rule 347 (funcvardecls -> funcvardecl .)
    CASEX           reduce using rule 347 (funcvardecls -> funcvardecl .)
    BEGIN           reduce using rule 347 (funcvardecls -> funcvardecl .)
    INTEGER         reduce using rule 347 (funcvardecls -> funcvardecl .)
    DELAY           reduce using rule 347 (funcvardecls -> funcvardecl .)
    INPUT           reduce using rule 347 (funcvardecls -> funcvardecl .)
    OUTPUT          reduce using rule 347 (funcvardecls -> funcvardecl .)
    INOUT           reduce using rule 347 (funcvardecls -> funcvardecl .)
    TRI             reduce using rule 347 (funcvardecls -> funcvardecl .)
    REG             reduce using rule 347 (funcvardecls -> funcvardecl .)
    WIRE            reduce using rule 347 (funcvardecls -> funcvardecl .)
    SIGNED          reduce using rule 347 (funcvardecls -> funcvardecl .)
    SUPPLY0         reduce using rule 347 (funcvardecls -> funcvardecl .)
    SUPPLY1         reduce using rule 347 (funcvardecls -> funcvardecl .)
    LBRACE          reduce using rule 347 (funcvardecls -> funcvardecl .)
    ID              reduce using rule 347 (funcvardecls -> funcvardecl .)


state 495

    (348) funcvardecl -> decl .

    IF              reduce using rule 348 (funcvardecl -> decl .)
    FOR             reduce using rule 348 (funcvardecl -> decl .)
    WHILE           reduce using rule 348 (funcvardecl -> decl .)
    CASE            reduce using rule 348 (funcvardecl -> decl .)
    CASEX           reduce using rule 348 (funcvardecl -> decl .)
    BEGIN           reduce using rule 348 (funcvardecl -> decl .)
    INTEGER         reduce using rule 348 (funcvardecl -> decl .)
    DELAY           reduce using rule 348 (funcvardecl -> decl .)
    INPUT           reduce using rule 348 (funcvardecl -> decl .)
    OUTPUT          reduce using rule 348 (funcvardecl -> decl .)
    INOUT           reduce using rule 348 (funcvardecl -> decl .)
    TRI             reduce using rule 348 (funcvardecl -> decl .)
    REG             reduce using rule 348 (funcvardecl -> decl .)
    WIRE            reduce using rule 348 (funcvardecl -> decl .)
    SIGNED          reduce using rule 348 (funcvardecl -> decl .)
    SUPPLY0         reduce using rule 348 (funcvardecl -> decl .)
    SUPPLY1         reduce using rule 348 (funcvardecl -> decl .)
    LBRACE          reduce using rule 348 (funcvardecl -> decl .)
    ID              reduce using rule 348 (funcvardecl -> decl .)


state 496

    (349) funcvardecl -> integerdecl .

    IF              reduce using rule 349 (funcvardecl -> integerdecl .)
    FOR             reduce using rule 349 (funcvardecl -> integerdecl .)
    WHILE           reduce using rule 349 (funcvardecl -> integerdecl .)
    CASE            reduce using rule 349 (funcvardecl -> integerdecl .)
    CASEX           reduce using rule 349 (funcvardecl -> integerdecl .)
    BEGIN           reduce using rule 349 (funcvardecl -> integerdecl .)
    INTEGER         reduce using rule 349 (funcvardecl -> integerdecl .)
    DELAY           reduce using rule 349 (funcvardecl -> integerdecl .)
    INPUT           reduce using rule 349 (funcvardecl -> integerdecl .)
    OUTPUT          reduce using rule 349 (funcvardecl -> integerdecl .)
    INOUT           reduce using rule 349 (funcvardecl -> integerdecl .)
    TRI             reduce using rule 349 (funcvardecl -> integerdecl .)
    REG             reduce using rule 349 (funcvardecl -> integerdecl .)
    WIRE            reduce using rule 349 (funcvardecl -> integerdecl .)
    SIGNED          reduce using rule 349 (funcvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 349 (funcvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 349 (funcvardecl -> integerdecl .)
    LBRACE          reduce using rule 349 (funcvardecl -> integerdecl .)
    ID              reduce using rule 349 (funcvardecl -> integerdecl .)


state 497

    (70) decl -> sigtypes . declnamelist SEMICOLON
    (71) decl -> sigtypes . width declnamelist SEMICOLON
    (31) sigtypes -> sigtypes . sigtype
    (72) declnamelist -> . declnamelist COMMA declname
    (73) declnamelist -> . declname
    (49) width -> . LBRACKET expression COLON expression RBRACKET
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1
    (74) declname -> . ID
    (75) declname -> . ID length

    LBRACKET        shift and go to state 132
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66
    ID              shift and go to state 422

    declnamelist                   shift and go to state 127
    width                          shift and go to state 602
    sigtype                        shift and go to state 130
    declname                       shift and go to state 131

state 498

    (362) task -> TASK ID SEMICOLON task_statement . ENDTASK

    ENDTASK         shift and go to state 603


state 499

    (363) task_statement -> taskvardecls . task_calc
    (364) taskvardecls -> taskvardecls . taskvardecl
    (369) task_calc -> . blocking_substitution
    (370) task_calc -> . if_statement
    (371) task_calc -> . for_statement
    (372) task_calc -> . while_statement
    (373) task_calc -> . case_statement
    (374) task_calc -> . casex_statement
    (375) task_calc -> . block
    (376) task_calc -> . namedblock
    (367) taskvardecl -> . decl
    (368) taskvardecl -> . integerdecl
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (385) empty -> .
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    BEGIN           shift and go to state 191
    INTEGER         shift and go to state 45
    DELAY           shift and go to state 135
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! IF              [ reduce using rule 385 (empty -> .) ]

    task_calc                      shift and go to state 604
    taskvardecl                    shift and go to state 605
    blocking_substitution          shift and go to state 606
    if_statement                   shift and go to state 607
    for_statement                  shift and go to state 608
    while_statement                shift and go to state 609
    case_statement                 shift and go to state 610
    casex_statement                shift and go to state 611
    block                          shift and go to state 612
    namedblock                     shift and go to state 613
    decl                           shift and go to state 502
    integerdecl                    shift and go to state 503
    delays                         shift and go to state 601
    sigtypes                       shift and go to state 497
    empty                          shift and go to state 136
    sigtype                        shift and go to state 58

state 500

    (365) taskvardecls -> taskvardecl .

    IF              reduce using rule 365 (taskvardecls -> taskvardecl .)
    FOR             reduce using rule 365 (taskvardecls -> taskvardecl .)
    WHILE           reduce using rule 365 (taskvardecls -> taskvardecl .)
    CASE            reduce using rule 365 (taskvardecls -> taskvardecl .)
    CASEX           reduce using rule 365 (taskvardecls -> taskvardecl .)
    BEGIN           reduce using rule 365 (taskvardecls -> taskvardecl .)
    INTEGER         reduce using rule 365 (taskvardecls -> taskvardecl .)
    DELAY           reduce using rule 365 (taskvardecls -> taskvardecl .)
    INPUT           reduce using rule 365 (taskvardecls -> taskvardecl .)
    OUTPUT          reduce using rule 365 (taskvardecls -> taskvardecl .)
    INOUT           reduce using rule 365 (taskvardecls -> taskvardecl .)
    TRI             reduce using rule 365 (taskvardecls -> taskvardecl .)
    REG             reduce using rule 365 (taskvardecls -> taskvardecl .)
    WIRE            reduce using rule 365 (taskvardecls -> taskvardecl .)
    SIGNED          reduce using rule 365 (taskvardecls -> taskvardecl .)
    SUPPLY0         reduce using rule 365 (taskvardecls -> taskvardecl .)
    SUPPLY1         reduce using rule 365 (taskvardecls -> taskvardecl .)
    LBRACE          reduce using rule 365 (taskvardecls -> taskvardecl .)
    ID              reduce using rule 365 (taskvardecls -> taskvardecl .)


state 501

    (366) taskvardecls -> empty .

    IF              reduce using rule 366 (taskvardecls -> empty .)
    FOR             reduce using rule 366 (taskvardecls -> empty .)
    WHILE           reduce using rule 366 (taskvardecls -> empty .)
    CASE            reduce using rule 366 (taskvardecls -> empty .)
    CASEX           reduce using rule 366 (taskvardecls -> empty .)
    BEGIN           reduce using rule 366 (taskvardecls -> empty .)
    INTEGER         reduce using rule 366 (taskvardecls -> empty .)
    DELAY           reduce using rule 366 (taskvardecls -> empty .)
    INPUT           reduce using rule 366 (taskvardecls -> empty .)
    OUTPUT          reduce using rule 366 (taskvardecls -> empty .)
    INOUT           reduce using rule 366 (taskvardecls -> empty .)
    TRI             reduce using rule 366 (taskvardecls -> empty .)
    REG             reduce using rule 366 (taskvardecls -> empty .)
    WIRE            reduce using rule 366 (taskvardecls -> empty .)
    SIGNED          reduce using rule 366 (taskvardecls -> empty .)
    SUPPLY0         reduce using rule 366 (taskvardecls -> empty .)
    SUPPLY1         reduce using rule 366 (taskvardecls -> empty .)
    LBRACE          reduce using rule 366 (taskvardecls -> empty .)
    ID              reduce using rule 366 (taskvardecls -> empty .)


state 502

    (367) taskvardecl -> decl .

    IF              reduce using rule 367 (taskvardecl -> decl .)
    FOR             reduce using rule 367 (taskvardecl -> decl .)
    WHILE           reduce using rule 367 (taskvardecl -> decl .)
    CASE            reduce using rule 367 (taskvardecl -> decl .)
    CASEX           reduce using rule 367 (taskvardecl -> decl .)
    BEGIN           reduce using rule 367 (taskvardecl -> decl .)
    INTEGER         reduce using rule 367 (taskvardecl -> decl .)
    DELAY           reduce using rule 367 (taskvardecl -> decl .)
    INPUT           reduce using rule 367 (taskvardecl -> decl .)
    OUTPUT          reduce using rule 367 (taskvardecl -> decl .)
    INOUT           reduce using rule 367 (taskvardecl -> decl .)
    TRI             reduce using rule 367 (taskvardecl -> decl .)
    REG             reduce using rule 367 (taskvardecl -> decl .)
    WIRE            reduce using rule 367 (taskvardecl -> decl .)
    SIGNED          reduce using rule 367 (taskvardecl -> decl .)
    SUPPLY0         reduce using rule 367 (taskvardecl -> decl .)
    SUPPLY1         reduce using rule 367 (taskvardecl -> decl .)
    LBRACE          reduce using rule 367 (taskvardecl -> decl .)
    ID              reduce using rule 367 (taskvardecl -> decl .)


state 503

    (368) taskvardecl -> integerdecl .

    IF              reduce using rule 368 (taskvardecl -> integerdecl .)
    FOR             reduce using rule 368 (taskvardecl -> integerdecl .)
    WHILE           reduce using rule 368 (taskvardecl -> integerdecl .)
    CASE            reduce using rule 368 (taskvardecl -> integerdecl .)
    CASEX           reduce using rule 368 (taskvardecl -> integerdecl .)
    BEGIN           reduce using rule 368 (taskvardecl -> integerdecl .)
    INTEGER         reduce using rule 368 (taskvardecl -> integerdecl .)
    DELAY           reduce using rule 368 (taskvardecl -> integerdecl .)
    INPUT           reduce using rule 368 (taskvardecl -> integerdecl .)
    OUTPUT          reduce using rule 368 (taskvardecl -> integerdecl .)
    INOUT           reduce using rule 368 (taskvardecl -> integerdecl .)
    TRI             reduce using rule 368 (taskvardecl -> integerdecl .)
    REG             reduce using rule 368 (taskvardecl -> integerdecl .)
    WIRE            reduce using rule 368 (taskvardecl -> integerdecl .)
    SIGNED          reduce using rule 368 (taskvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 368 (taskvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 368 (taskvardecl -> integerdecl .)
    LBRACE          reduce using rule 368 (taskvardecl -> integerdecl .)
    ID              reduce using rule 368 (taskvardecl -> integerdecl .)


state 504

    (44) ioport -> sigtypes portname .

    RPAREN          reduce using rule 44 (ioport -> sigtypes portname .)
    COMMA           reduce using rule 44 (ioport -> sigtypes portname .)


state 505

    (45) ioport -> sigtypes width . portname
    (30) portname -> . ID

    ID              shift and go to state 72

    portname                       shift and go to state 614

state 506

    (19) param -> PARAMETER width param_substitution_list COMMA .
    (95) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 19 (param -> PARAMETER width param_substitution_list COMMA .)
    ID              shift and go to state 148

    param_substitution             shift and go to state 436

state 507

    (20) param -> PARAMETER INTEGER param_substitution_list COMMA .
    (95) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (97) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 20 (param -> PARAMETER INTEGER param_substitution_list COMMA .)
    ID              shift and go to state 148

    param_substitution             shift and go to state 436

state 508

    (153) expression -> expression COND expression COLON . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 615
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 509

    (170) partselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 616
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 510

    (174) pointer -> pointer LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOT             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    POWER           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    MOD             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LT              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    GT              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LE              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    GE              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQ              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    NE              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQL             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    NEL             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    AND             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    XOR             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    OR              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LAND            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LOR             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    COND            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    COLON           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    IF              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASE            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOR             reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    FORK            reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    AT              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    ID              reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 174 (pointer -> pointer LBRACKET expression RBRACKET .)


state 511

    (171) partselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 617
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 512

    (172) partselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 618
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 513

    (167) partselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 619
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 514

    (173) pointer -> identifier LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOT             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    POWER           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    MOD             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LT              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    GT              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LE              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    GE              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQ              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    NE              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQL             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    NEL             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    XOR             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LAND            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LOR             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    COND            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    IF              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASE            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOR             reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    FORK            reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    AT              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    ID              reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 173 (pointer -> identifier LBRACKET expression RBRACKET .)


state 515

    (168) partselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 620
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 516

    (169) partselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 621
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 517

    (358) functioncall -> identifier LPAREN func_args RPAREN .

    TIMES           reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    POWER           reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    DIVIDE          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    MOD             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUS            reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUS           reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFT          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFT          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFTA         reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFTA         reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LT              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    GT              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LE              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    GE              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQ              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    NE              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQL             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    NEL             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    AND             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    XOR             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    XNOR            reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    OR              reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LAND            reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LOR             reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    COND            reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    RPAREN          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    LBRACE          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACE          reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    COMMA           reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    COLON           reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    SEMICOLON       reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUSCOLON       reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUSCOLON      reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACKET        reduce using rule 358 (functioncall -> identifier LPAREN func_args RPAREN .)


state 518

    (359) func_args -> func_args COMMA . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 622
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 519

    (164) concatlist -> concatlist COMMA expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 164 (concatlist -> concatlist COMMA expression .)
    COMMA           reduce using rule 164 (concatlist -> concatlist COMMA expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 520

    (165) concatlist -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 165 (concatlist -> expression .)
    COMMA           reduce using rule 165 (concatlist -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 521

    (166) repeat -> LBRACE expression concat RBRACE .

    TIMES           reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    POWER           reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    DIVIDE          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    MOD             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    PLUS            reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    MINUS           reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFT          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFT          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFTA         reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFTA         reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LT              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    GT              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LE              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    GE              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    EQ              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    NE              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    EQL             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    NEL             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    AND             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    XOR             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    XNOR            reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    OR              reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LAND            reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LOR             reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    COND            reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    RPAREN          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    LBRACE          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    RBRACE          reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    COMMA           reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    COLON           reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    SEMICOLON       reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    PLUSCOLON       reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    MINUSCOLON      reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)
    RBRACKET        reduce using rule 166 (repeat -> LBRACE expression concat RBRACE .)


state 522

    (337) systemcall -> DOLLER ID LPAREN sysargs . RPAREN
    (339) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 623
    COMMA           shift and go to state 624


state 523

    (340) sysargs -> sysarg .

    RPAREN          reduce using rule 340 (sysargs -> sysarg .)
    COMMA           reduce using rule 340 (sysargs -> sysarg .)


state 524

    (341) sysargs -> empty .

    RPAREN          reduce using rule 341 (sysargs -> empty .)
    COMMA           reduce using rule 341 (sysargs -> empty .)


state 525

    (342) sysarg -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 342 (sysarg -> expression .)
    COMMA           reduce using rule 342 (sysarg -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 526

    (338) systemcall -> DOLLER SIGNED LPAREN sysargs . RPAREN
    (339) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 625
    COMMA           shift and go to state 624


state 527

    (327) generate_if -> IF LPAREN cond RPAREN . gif_true_item ELSE gif_false_item
    (328) generate_if -> IF LPAREN cond RPAREN . gif_true_item
    (329) gif_true_item -> . generate_item
    (330) gif_true_item -> . generate_block
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (325) generate_block -> . BEGIN generate_items END
    (326) generate_block -> . BEGIN COLON ID generate_items END
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 629
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    gif_true_item                  shift and go to state 626
    generate_item                  shift and go to state 627
    generate_block                 shift and go to state 628
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 528

    (333) generate_for -> FOR LPAREN forpre forcond . forpost RPAREN generate_forcontent
    (261) forpost -> . blocking_substitution_base
    (262) forpost -> . empty
    (224) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (385) empty -> .
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty

    RPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    DELAY           shift and go to state 135

    forpost                        shift and go to state 630
    blocking_substitution_base     shift and go to state 631
    empty                          shift and go to state 632
    delays                         shift and go to state 633

state 529

    (259) forcond -> cond . SEMICOLON

    SEMICOLON       shift and go to state 634


state 530

    (260) forcond -> SEMICOLON .

    DELAY           reduce using rule 260 (forcond -> SEMICOLON .)
    RPAREN          reduce using rule 260 (forcond -> SEMICOLON .)
    LBRACE          reduce using rule 260 (forcond -> SEMICOLON .)
    ID              reduce using rule 260 (forcond -> SEMICOLON .)


state 531

    (223) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 460


state 532

    (49) width -> LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 635
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 533

    (50) length -> LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 636
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 534

    (79) declassign_element -> delays ID EQUALS delays . rvalue
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 637
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 535

    (226) delays -> DELAY LPAREN expression RPAREN .

    ID              reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    MINUS           reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    PLUS            reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    LNOT            reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    NOT             reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    AND             reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    NAND            reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    NOR             reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    OR              reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    XOR             reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    XNOR            reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    LPAREN          reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    DOLLER          reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_DEC   reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_DEC reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_BIN   reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_BIN reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_OCT   reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_OCT reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_HEX   reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_HEX reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    IF              reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)


state 536

    (173) pointer -> identifier LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 514
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 537

    (174) pointer -> pointer LBRACKET expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 510
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 538

    (98) assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .

    ENDMODULE       reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENERATE        reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INTEGER         reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REAL            reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    PARAMETER       reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENVAR          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ASSIGN          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INITIAL         reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ID              reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SENS_OR         reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FUNCTION        reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TASK            reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LPAREN          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INPUT           reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    OUTPUT          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INOUT           reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TRI             reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REG             reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    WIRE            reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SIGNED          reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    IF              reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FOR             reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ELSE            reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    END             reduce using rule 98 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)


state 539

    (99) assignment -> ASSIGN delays lvalue EQUALS delays . rvalue SEMICOLON
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 638
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 540

    (103) lpartselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 639
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 541

    (104) lpartselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 640
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 542

    (105) lpartselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 99
    expression                     shift and go to state 641
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 543

    (100) lpartselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 642
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 544

    (101) lpartselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 643
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 545

    (102) lpartselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    pointer                        shift and go to state 96
    expression                     shift and go to state 644
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 546

    (108) lconcatlist -> lconcatlist COMMA lconcat_one .

    RBRACE          reduce using rule 108 (lconcatlist -> lconcatlist COMMA lconcat_one .)
    COMMA           reduce using rule 108 (lconcatlist -> lconcatlist COMMA lconcat_one .)


state 547

    (189) senslist -> AT LPAREN edgesigs RPAREN .

    IF              reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASE            reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASEX           reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOR             reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    WHILE           reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    WAIT            reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOREVER         reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    BEGIN           reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    FORK            reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    DELAY           reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    AT              reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    DOLLER          reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    DISABLE         reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    LBRACE          reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    ID              reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)
    SEMICOLON       reduce using rule 189 (senslist -> AT LPAREN edgesigs RPAREN .)


state 548

    (194) edgesigs -> edgesigs SENS_OR . edgesig
    (190) edgesig -> . POSEDGE edgesig_base
    (191) edgesig -> . NEGEDGE edgesig_base

    POSEDGE         shift and go to state 454
    NEGEDGE         shift and go to state 455

    edgesig                        shift and go to state 645

state 549

    (198) senslist -> AT LPAREN levelsigs RPAREN .

    IF              reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASE            reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASEX           reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOR             reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    WHILE           reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    WAIT            reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOREVER         reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    BEGIN           reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    FORK            reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    DELAY           reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    AT              reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    DOLLER          reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    DISABLE         reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    LBRACE          reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    ID              reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)
    SEMICOLON       reduce using rule 198 (senslist -> AT LPAREN levelsigs RPAREN .)


state 550

    (203) levelsigs -> levelsigs SENS_OR . levelsig
    (199) levelsig -> . levelsig_base
    (200) levelsig_base -> . identifier
    (201) levelsig_base -> . pointer
    (202) levelsig_base -> . partselect
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    ID              shift and go to state 81

    levelsig                       shift and go to state 646
    levelsig_base                  shift and go to state 318
    identifier                     shift and go to state 319
    pointer                        shift and go to state 320
    partselect                     shift and go to state 321
    scope                          shift and go to state 103

state 551

    (204) levelsigs -> levelsigs COMMA . levelsig
    (199) levelsig -> . levelsig_base
    (200) levelsig_base -> . identifier
    (201) levelsig_base -> . pointer
    (202) levelsig_base -> . partselect
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    ID              shift and go to state 81

    levelsig                       shift and go to state 647
    levelsig_base                  shift and go to state 318
    identifier                     shift and go to state 319
    pointer                        shift and go to state 320
    partselect                     shift and go to state 321
    scope                          shift and go to state 103

state 552

    (207) senslist -> AT LPAREN TIMES RPAREN .

    IF              reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    CASE            reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    CASEX           reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    FOR             reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    WHILE           reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    WAIT            reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    FOREVER         reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    BEGIN           reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    FORK            reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    DELAY           reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    AT              reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    DOLLER          reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    DISABLE         reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    LBRACE          reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    ID              reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)
    SEMICOLON       reduce using rule 207 (senslist -> AT LPAREN TIMES RPAREN .)


state 553

    (190) edgesig -> POSEDGE edgesig_base .

    RPAREN          reduce using rule 190 (edgesig -> POSEDGE edgesig_base .)
    SENS_OR         reduce using rule 190 (edgesig -> POSEDGE edgesig_base .)


state 554

    (192) edgesig_base -> identifier .
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (379) scope -> identifier . DOT

    RPAREN          reduce using rule 192 (edgesig_base -> identifier .)
    SENS_OR         reduce using rule 192 (edgesig_base -> identifier .)
    LBRACKET        shift and go to state 431
    DOT             shift and go to state 262


state 555

    (193) edgesig_base -> pointer .
    (174) pointer -> pointer . LBRACKET expression RBRACKET
    (380) scope -> pointer . DOT

    RPAREN          reduce using rule 193 (edgesig_base -> pointer .)
    SENS_OR         reduce using rule 193 (edgesig_base -> pointer .)
    LBRACKET        shift and go to state 432
    DOT             shift and go to state 259


state 556

    (191) edgesig -> NEGEDGE edgesig_base .

    RPAREN          reduce using rule 191 (edgesig -> NEGEDGE edgesig_base .)
    SENS_OR         reduce using rule 191 (edgesig -> NEGEDGE edgesig_base .)


state 557

    (173) pointer -> identifier LBRACKET expression . RBRACKET
    (167) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (168) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (169) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 514
    COLON           shift and go to state 513
    PLUSCOLON       shift and go to state 515
    MINUSCOLON      shift and go to state 516
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 558

    (174) pointer -> pointer LBRACKET expression . RBRACKET
    (170) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (171) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (172) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 510
    COLON           shift and go to state 509
    PLUSCOLON       shift and go to state 511
    MINUSCOLON      shift and go to state 512
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 559

    (248) if_statement -> IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (249) if_statement -> IF LPAREN cond RPAREN . true_statement
    (254) true_statement -> . ifcontent_statement
    (253) ifcontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    true_statement                 shift and go to state 648
    ifcontent_statement            shift and go to state 649
    basic_statement                shift and go to state 650
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 560

    (250) if_statement -> delays IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (251) if_statement -> delays IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 651


state 561

    (223) blocking_substitution -> delays lvalue EQUALS delays . rvalue SEMICOLON
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 652
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 562

    (225) nonblocking_substitution -> delays lvalue LE delays . rvalue SEMICOLON
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 653
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 563

    (266) case_statement -> CASE LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (269) casecontent_statements -> . casecontent_statements casecontent_statement
    (270) casecontent_statements -> . casecontent_statement
    (271) casecontent_statement -> . casecontent_condition COLON basic_statement
    (274) casecontent_statement -> . DEFAULT COLON basic_statement
    (272) casecontent_condition -> . casecontent_condition COMMA expression
    (273) casecontent_condition -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 657
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    casecontent_statements         shift and go to state 654
    casecontent_statement          shift and go to state 655
    casecontent_condition          shift and go to state 656
    expression                     shift and go to state 658
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 564

    (267) casex_statement -> CASEX LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (269) casecontent_statements -> . casecontent_statements casecontent_statement
    (270) casecontent_statements -> . casecontent_statement
    (271) casecontent_statement -> . casecontent_condition COLON basic_statement
    (274) casecontent_statement -> . DEFAULT COLON basic_statement
    (272) casecontent_condition -> . casecontent_condition COMMA expression
    (273) casecontent_condition -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 657
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    casecontent_statements         shift and go to state 659
    casecontent_statement          shift and go to state 655
    casecontent_condition          shift and go to state 656
    expression                     shift and go to state 658
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 565

    (256) for_statement -> FOR LPAREN forpre forcond . forpost RPAREN forcontent_statement
    (261) forpost -> . blocking_substitution_base
    (262) forpost -> . empty
    (224) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (385) empty -> .
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty

    RPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    DELAY           shift and go to state 135

    forpost                        shift and go to state 660
    blocking_substitution_base     shift and go to state 631
    empty                          shift and go to state 632
    delays                         shift and go to state 633

state 566

    (264) while_statement -> WHILE LPAREN cond RPAREN . whilecontent_statement
    (265) whilecontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    whilecontent_statement         shift and go to state 661
    basic_statement                shift and go to state 662
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 567

    (278) wait_statement -> WAIT LPAREN cond RPAREN . waitcontent_statement
    (279) waitcontent_statement -> . basic_statement
    (280) waitcontent_statement -> . SEMICOLON
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 665
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 385 (empty -> .) ]

    waitcontent_statement          shift and go to state 663
    basic_statement                shift and go to state 664
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 568

    (236) namedblock -> BEGIN COLON ID namedblock_statements . END
    (238) namedblock_statements -> namedblock_statements . namedblock_statement
    (240) namedblock_statement -> . basic_statement
    (241) namedblock_statement -> . decl
    (242) namedblock_statement -> . integerdecl
    (243) namedblock_statement -> . realdecl
    (244) namedblock_statement -> . parameterdecl
    (245) namedblock_statement -> . localparamdecl
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 666
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    namedblock_statement           shift and go to state 667
    basic_statement                shift and go to state 571
    decl                           shift and go to state 572
    integerdecl                    shift and go to state 573
    realdecl                       shift and go to state 574
    parameterdecl                  shift and go to state 575
    localparamdecl                 shift and go to state 576
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    sigtypes                       shift and go to state 497
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    sigtype                        shift and go to state 58
    empty                          shift and go to state 196

state 569

    (237) namedblock -> BEGIN COLON ID END .

    ENDMODULE       reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    GENERATE        reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INTEGER         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    REAL            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    PARAMETER       reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    LOCALPARAM      reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    GENVAR          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ASSIGN          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ALWAYS          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INITIAL         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ID              reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SENS_OR         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    FUNCTION        reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    TASK            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    LPAREN          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INPUT           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    OUTPUT          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INOUT           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    TRI             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    REG             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    WIRE            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SIGNED          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SUPPLY0         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SUPPLY1         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ENDGENERATE     reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    IF              reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    FOR             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ELSE            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    END             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    CASE            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    CASEX           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    WHILE           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    WAIT            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    FOREVER         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    BEGIN           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    FORK            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    DELAY           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    AT              reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    DOLLER          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    DISABLE         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    LBRACE          reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SEMICOLON       reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    JOIN            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ENDFUNCTION     reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ENDTASK         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    ENDCASE         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    DEFAULT         reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    MINUS           reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    PLUS            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    LNOT            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    NOT             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    AND             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    NAND            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    NOR             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    OR              reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    XOR             reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    XNOR            reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_DEC   reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_DEC reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_BIN   reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_BIN reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_OCT   reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_OCT reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_HEX   reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_HEX reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    FLOATNUMBER     reduce using rule 237 (namedblock -> BEGIN COLON ID END .)
    STRING_LITERAL  reduce using rule 237 (namedblock -> BEGIN COLON ID END .)


state 570

    (239) namedblock_statements -> namedblock_statement .

    END             reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    INTEGER         reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    REAL            reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    PARAMETER       reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    LOCALPARAM      reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    IF              reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    CASE            reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    CASEX           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    FOR             reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    WHILE           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    WAIT            reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    FOREVER         reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    BEGIN           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    FORK            reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    DELAY           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    AT              reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    DOLLER          reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    DISABLE         reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    INPUT           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    OUTPUT          reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    INOUT           reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    TRI             reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    REG             reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    WIRE            reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    SIGNED          reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    SUPPLY0         reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    SUPPLY1         reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    LBRACE          reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    ID              reduce using rule 239 (namedblock_statements -> namedblock_statement .)
    SEMICOLON       reduce using rule 239 (namedblock_statements -> namedblock_statement .)


state 571

    (240) namedblock_statement -> basic_statement .

    END             reduce using rule 240 (namedblock_statement -> basic_statement .)
    INTEGER         reduce using rule 240 (namedblock_statement -> basic_statement .)
    REAL            reduce using rule 240 (namedblock_statement -> basic_statement .)
    PARAMETER       reduce using rule 240 (namedblock_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 240 (namedblock_statement -> basic_statement .)
    IF              reduce using rule 240 (namedblock_statement -> basic_statement .)
    CASE            reduce using rule 240 (namedblock_statement -> basic_statement .)
    CASEX           reduce using rule 240 (namedblock_statement -> basic_statement .)
    FOR             reduce using rule 240 (namedblock_statement -> basic_statement .)
    WHILE           reduce using rule 240 (namedblock_statement -> basic_statement .)
    WAIT            reduce using rule 240 (namedblock_statement -> basic_statement .)
    FOREVER         reduce using rule 240 (namedblock_statement -> basic_statement .)
    BEGIN           reduce using rule 240 (namedblock_statement -> basic_statement .)
    FORK            reduce using rule 240 (namedblock_statement -> basic_statement .)
    DELAY           reduce using rule 240 (namedblock_statement -> basic_statement .)
    AT              reduce using rule 240 (namedblock_statement -> basic_statement .)
    DOLLER          reduce using rule 240 (namedblock_statement -> basic_statement .)
    DISABLE         reduce using rule 240 (namedblock_statement -> basic_statement .)
    INPUT           reduce using rule 240 (namedblock_statement -> basic_statement .)
    OUTPUT          reduce using rule 240 (namedblock_statement -> basic_statement .)
    INOUT           reduce using rule 240 (namedblock_statement -> basic_statement .)
    TRI             reduce using rule 240 (namedblock_statement -> basic_statement .)
    REG             reduce using rule 240 (namedblock_statement -> basic_statement .)
    WIRE            reduce using rule 240 (namedblock_statement -> basic_statement .)
    SIGNED          reduce using rule 240 (namedblock_statement -> basic_statement .)
    SUPPLY0         reduce using rule 240 (namedblock_statement -> basic_statement .)
    SUPPLY1         reduce using rule 240 (namedblock_statement -> basic_statement .)
    LBRACE          reduce using rule 240 (namedblock_statement -> basic_statement .)
    ID              reduce using rule 240 (namedblock_statement -> basic_statement .)
    SEMICOLON       reduce using rule 240 (namedblock_statement -> basic_statement .)


state 572

    (241) namedblock_statement -> decl .

    END             reduce using rule 241 (namedblock_statement -> decl .)
    INTEGER         reduce using rule 241 (namedblock_statement -> decl .)
    REAL            reduce using rule 241 (namedblock_statement -> decl .)
    PARAMETER       reduce using rule 241 (namedblock_statement -> decl .)
    LOCALPARAM      reduce using rule 241 (namedblock_statement -> decl .)
    IF              reduce using rule 241 (namedblock_statement -> decl .)
    CASE            reduce using rule 241 (namedblock_statement -> decl .)
    CASEX           reduce using rule 241 (namedblock_statement -> decl .)
    FOR             reduce using rule 241 (namedblock_statement -> decl .)
    WHILE           reduce using rule 241 (namedblock_statement -> decl .)
    WAIT            reduce using rule 241 (namedblock_statement -> decl .)
    FOREVER         reduce using rule 241 (namedblock_statement -> decl .)
    BEGIN           reduce using rule 241 (namedblock_statement -> decl .)
    FORK            reduce using rule 241 (namedblock_statement -> decl .)
    DELAY           reduce using rule 241 (namedblock_statement -> decl .)
    AT              reduce using rule 241 (namedblock_statement -> decl .)
    DOLLER          reduce using rule 241 (namedblock_statement -> decl .)
    DISABLE         reduce using rule 241 (namedblock_statement -> decl .)
    INPUT           reduce using rule 241 (namedblock_statement -> decl .)
    OUTPUT          reduce using rule 241 (namedblock_statement -> decl .)
    INOUT           reduce using rule 241 (namedblock_statement -> decl .)
    TRI             reduce using rule 241 (namedblock_statement -> decl .)
    REG             reduce using rule 241 (namedblock_statement -> decl .)
    WIRE            reduce using rule 241 (namedblock_statement -> decl .)
    SIGNED          reduce using rule 241 (namedblock_statement -> decl .)
    SUPPLY0         reduce using rule 241 (namedblock_statement -> decl .)
    SUPPLY1         reduce using rule 241 (namedblock_statement -> decl .)
    LBRACE          reduce using rule 241 (namedblock_statement -> decl .)
    ID              reduce using rule 241 (namedblock_statement -> decl .)
    SEMICOLON       reduce using rule 241 (namedblock_statement -> decl .)


state 573

    (242) namedblock_statement -> integerdecl .

    END             reduce using rule 242 (namedblock_statement -> integerdecl .)
    INTEGER         reduce using rule 242 (namedblock_statement -> integerdecl .)
    REAL            reduce using rule 242 (namedblock_statement -> integerdecl .)
    PARAMETER       reduce using rule 242 (namedblock_statement -> integerdecl .)
    LOCALPARAM      reduce using rule 242 (namedblock_statement -> integerdecl .)
    IF              reduce using rule 242 (namedblock_statement -> integerdecl .)
    CASE            reduce using rule 242 (namedblock_statement -> integerdecl .)
    CASEX           reduce using rule 242 (namedblock_statement -> integerdecl .)
    FOR             reduce using rule 242 (namedblock_statement -> integerdecl .)
    WHILE           reduce using rule 242 (namedblock_statement -> integerdecl .)
    WAIT            reduce using rule 242 (namedblock_statement -> integerdecl .)
    FOREVER         reduce using rule 242 (namedblock_statement -> integerdecl .)
    BEGIN           reduce using rule 242 (namedblock_statement -> integerdecl .)
    FORK            reduce using rule 242 (namedblock_statement -> integerdecl .)
    DELAY           reduce using rule 242 (namedblock_statement -> integerdecl .)
    AT              reduce using rule 242 (namedblock_statement -> integerdecl .)
    DOLLER          reduce using rule 242 (namedblock_statement -> integerdecl .)
    DISABLE         reduce using rule 242 (namedblock_statement -> integerdecl .)
    INPUT           reduce using rule 242 (namedblock_statement -> integerdecl .)
    OUTPUT          reduce using rule 242 (namedblock_statement -> integerdecl .)
    INOUT           reduce using rule 242 (namedblock_statement -> integerdecl .)
    TRI             reduce using rule 242 (namedblock_statement -> integerdecl .)
    REG             reduce using rule 242 (namedblock_statement -> integerdecl .)
    WIRE            reduce using rule 242 (namedblock_statement -> integerdecl .)
    SIGNED          reduce using rule 242 (namedblock_statement -> integerdecl .)
    SUPPLY0         reduce using rule 242 (namedblock_statement -> integerdecl .)
    SUPPLY1         reduce using rule 242 (namedblock_statement -> integerdecl .)
    LBRACE          reduce using rule 242 (namedblock_statement -> integerdecl .)
    ID              reduce using rule 242 (namedblock_statement -> integerdecl .)
    SEMICOLON       reduce using rule 242 (namedblock_statement -> integerdecl .)


state 574

    (243) namedblock_statement -> realdecl .

    END             reduce using rule 243 (namedblock_statement -> realdecl .)
    INTEGER         reduce using rule 243 (namedblock_statement -> realdecl .)
    REAL            reduce using rule 243 (namedblock_statement -> realdecl .)
    PARAMETER       reduce using rule 243 (namedblock_statement -> realdecl .)
    LOCALPARAM      reduce using rule 243 (namedblock_statement -> realdecl .)
    IF              reduce using rule 243 (namedblock_statement -> realdecl .)
    CASE            reduce using rule 243 (namedblock_statement -> realdecl .)
    CASEX           reduce using rule 243 (namedblock_statement -> realdecl .)
    FOR             reduce using rule 243 (namedblock_statement -> realdecl .)
    WHILE           reduce using rule 243 (namedblock_statement -> realdecl .)
    WAIT            reduce using rule 243 (namedblock_statement -> realdecl .)
    FOREVER         reduce using rule 243 (namedblock_statement -> realdecl .)
    BEGIN           reduce using rule 243 (namedblock_statement -> realdecl .)
    FORK            reduce using rule 243 (namedblock_statement -> realdecl .)
    DELAY           reduce using rule 243 (namedblock_statement -> realdecl .)
    AT              reduce using rule 243 (namedblock_statement -> realdecl .)
    DOLLER          reduce using rule 243 (namedblock_statement -> realdecl .)
    DISABLE         reduce using rule 243 (namedblock_statement -> realdecl .)
    INPUT           reduce using rule 243 (namedblock_statement -> realdecl .)
    OUTPUT          reduce using rule 243 (namedblock_statement -> realdecl .)
    INOUT           reduce using rule 243 (namedblock_statement -> realdecl .)
    TRI             reduce using rule 243 (namedblock_statement -> realdecl .)
    REG             reduce using rule 243 (namedblock_statement -> realdecl .)
    WIRE            reduce using rule 243 (namedblock_statement -> realdecl .)
    SIGNED          reduce using rule 243 (namedblock_statement -> realdecl .)
    SUPPLY0         reduce using rule 243 (namedblock_statement -> realdecl .)
    SUPPLY1         reduce using rule 243 (namedblock_statement -> realdecl .)
    LBRACE          reduce using rule 243 (namedblock_statement -> realdecl .)
    ID              reduce using rule 243 (namedblock_statement -> realdecl .)
    SEMICOLON       reduce using rule 243 (namedblock_statement -> realdecl .)


state 575

    (244) namedblock_statement -> parameterdecl .

    END             reduce using rule 244 (namedblock_statement -> parameterdecl .)
    INTEGER         reduce using rule 244 (namedblock_statement -> parameterdecl .)
    REAL            reduce using rule 244 (namedblock_statement -> parameterdecl .)
    PARAMETER       reduce using rule 244 (namedblock_statement -> parameterdecl .)
    LOCALPARAM      reduce using rule 244 (namedblock_statement -> parameterdecl .)
    IF              reduce using rule 244 (namedblock_statement -> parameterdecl .)
    CASE            reduce using rule 244 (namedblock_statement -> parameterdecl .)
    CASEX           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    FOR             reduce using rule 244 (namedblock_statement -> parameterdecl .)
    WHILE           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    WAIT            reduce using rule 244 (namedblock_statement -> parameterdecl .)
    FOREVER         reduce using rule 244 (namedblock_statement -> parameterdecl .)
    BEGIN           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    FORK            reduce using rule 244 (namedblock_statement -> parameterdecl .)
    DELAY           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    AT              reduce using rule 244 (namedblock_statement -> parameterdecl .)
    DOLLER          reduce using rule 244 (namedblock_statement -> parameterdecl .)
    DISABLE         reduce using rule 244 (namedblock_statement -> parameterdecl .)
    INPUT           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    OUTPUT          reduce using rule 244 (namedblock_statement -> parameterdecl .)
    INOUT           reduce using rule 244 (namedblock_statement -> parameterdecl .)
    TRI             reduce using rule 244 (namedblock_statement -> parameterdecl .)
    REG             reduce using rule 244 (namedblock_statement -> parameterdecl .)
    WIRE            reduce using rule 244 (namedblock_statement -> parameterdecl .)
    SIGNED          reduce using rule 244 (namedblock_statement -> parameterdecl .)
    SUPPLY0         reduce using rule 244 (namedblock_statement -> parameterdecl .)
    SUPPLY1         reduce using rule 244 (namedblock_statement -> parameterdecl .)
    LBRACE          reduce using rule 244 (namedblock_statement -> parameterdecl .)
    ID              reduce using rule 244 (namedblock_statement -> parameterdecl .)
    SEMICOLON       reduce using rule 244 (namedblock_statement -> parameterdecl .)


state 576

    (245) namedblock_statement -> localparamdecl .

    END             reduce using rule 245 (namedblock_statement -> localparamdecl .)
    INTEGER         reduce using rule 245 (namedblock_statement -> localparamdecl .)
    REAL            reduce using rule 245 (namedblock_statement -> localparamdecl .)
    PARAMETER       reduce using rule 245 (namedblock_statement -> localparamdecl .)
    LOCALPARAM      reduce using rule 245 (namedblock_statement -> localparamdecl .)
    IF              reduce using rule 245 (namedblock_statement -> localparamdecl .)
    CASE            reduce using rule 245 (namedblock_statement -> localparamdecl .)
    CASEX           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    FOR             reduce using rule 245 (namedblock_statement -> localparamdecl .)
    WHILE           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    WAIT            reduce using rule 245 (namedblock_statement -> localparamdecl .)
    FOREVER         reduce using rule 245 (namedblock_statement -> localparamdecl .)
    BEGIN           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    FORK            reduce using rule 245 (namedblock_statement -> localparamdecl .)
    DELAY           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    AT              reduce using rule 245 (namedblock_statement -> localparamdecl .)
    DOLLER          reduce using rule 245 (namedblock_statement -> localparamdecl .)
    DISABLE         reduce using rule 245 (namedblock_statement -> localparamdecl .)
    INPUT           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    OUTPUT          reduce using rule 245 (namedblock_statement -> localparamdecl .)
    INOUT           reduce using rule 245 (namedblock_statement -> localparamdecl .)
    TRI             reduce using rule 245 (namedblock_statement -> localparamdecl .)
    REG             reduce using rule 245 (namedblock_statement -> localparamdecl .)
    WIRE            reduce using rule 245 (namedblock_statement -> localparamdecl .)
    SIGNED          reduce using rule 245 (namedblock_statement -> localparamdecl .)
    SUPPLY0         reduce using rule 245 (namedblock_statement -> localparamdecl .)
    SUPPLY1         reduce using rule 245 (namedblock_statement -> localparamdecl .)
    LBRACE          reduce using rule 245 (namedblock_statement -> localparamdecl .)
    ID              reduce using rule 245 (namedblock_statement -> localparamdecl .)
    SEMICOLON       reduce using rule 245 (namedblock_statement -> localparamdecl .)


state 577

    (226) delays -> DELAY LPAREN expression RPAREN .
    (154) expression -> LPAREN expression RPAREN .

    IF              reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    ID              reduce using rule 226 (delays -> DELAY LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 154 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 154 (expression -> LPAREN expression RPAREN .)


state 578

    (286) instance_body -> ID LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 668


state 579

    (287) instance_body -> ID width LPAREN . instance_ports RPAREN
    (303) instance_ports -> . instance_ports_list
    (304) instance_ports -> . instance_ports_arg
    (305) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (306) instance_ports_list -> . instance_port_list
    (307) instance_ports_list -> . empty
    (309) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (310) instance_ports_arg -> . instance_port_arg
    (308) instance_port_list -> . expression
    (385) empty -> .
    (311) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (312) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (313) instance_port_arg -> . DOT ID LPAREN RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 385 (empty -> .)
    RPAREN          reduce using rule 385 (empty -> .)
    DOT             shift and go to state 360
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    instance_ports                 shift and go to state 669
    instance_ports_list            shift and go to state 354
    instance_ports_arg             shift and go to state 355
    instance_port_list             shift and go to state 356
    empty                          shift and go to state 357
    instance_port_arg              shift and go to state 358
    expression                     shift and go to state 359
    identifier                     shift and go to state 99
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 580

    (284) instance_bodylist -> instance_bodylist COMMA instance_body .

    SEMICOLON       reduce using rule 284 (instance_bodylist -> instance_bodylist COMMA instance_body .)
    COMMA           reduce using rule 284 (instance_bodylist -> instance_bodylist COMMA instance_body .)


state 581

    (293) parameterlist -> DELAY LPAREN param_args RPAREN .

    ID              reduce using rule 293 (parameterlist -> DELAY LPAREN param_args RPAREN .)


state 582

    (298) param_args -> param_args COMMA . param_arg
    (302) param_arg -> . DOT ID LPAREN expression RPAREN

    DOT             shift and go to state 484

    param_arg                      shift and go to state 670

state 583

    (294) parameterlist -> DELAY LPAREN param_args_noname RPAREN .

    ID              reduce using rule 294 (parameterlist -> DELAY LPAREN param_args_noname RPAREN .)


state 584

    (296) param_args_noname -> param_args_noname COMMA . param_arg_noname
    (301) param_arg_noname -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    param_arg_noname               shift and go to state 671
    expression                     shift and go to state 485
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 585

    (302) param_arg -> DOT ID . LPAREN expression RPAREN

    LPAREN          shift and go to state 672


state 586

    (305) instance_ports_list -> instance_ports_list COMMA instance_port_list .

    COMMA           reduce using rule 305 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)
    RPAREN          reduce using rule 305 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)


state 587

    (309) instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .

    COMMA           reduce using rule 309 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)
    RPAREN          reduce using rule 309 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)


state 588

    (311) instance_port_arg -> DOT ID LPAREN . identifier RPAREN
    (312) instance_port_arg -> DOT ID LPAREN . expression RPAREN
    (313) instance_port_arg -> DOT ID LPAREN . RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 674
    ID              shift and go to state 81
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    identifier                     shift and go to state 673
    expression                     shift and go to state 675
    scope                          shift and go to state 103
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 676
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    const_expression               shift and go to state 100
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 589

    (343) function -> FUNCTION width ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 677


state 590

    (344) function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 344 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)


state 591

    (345) function_statement -> funcvardecls function_calc .

    ENDFUNCTION     reduce using rule 345 (function_statement -> funcvardecls function_calc .)


state 592

    (346) funcvardecls -> funcvardecls funcvardecl .

    IF              reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    FOR             reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    WHILE           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    CASE            reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    CASEX           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    BEGIN           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    INTEGER         reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    DELAY           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    INPUT           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    OUTPUT          reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    INOUT           reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    TRI             reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    REG             reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    WIRE            reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    SIGNED          reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY0         reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY1         reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    LBRACE          reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)
    ID              reduce using rule 346 (funcvardecls -> funcvardecls funcvardecl .)


state 593

    (350) function_calc -> blocking_substitution .

    ENDFUNCTION     reduce using rule 350 (function_calc -> blocking_substitution .)


state 594

    (351) function_calc -> if_statement .

    ENDFUNCTION     reduce using rule 351 (function_calc -> if_statement .)


state 595

    (352) function_calc -> for_statement .

    ENDFUNCTION     reduce using rule 352 (function_calc -> for_statement .)


state 596

    (353) function_calc -> while_statement .

    ENDFUNCTION     reduce using rule 353 (function_calc -> while_statement .)


state 597

    (354) function_calc -> case_statement .

    ENDFUNCTION     reduce using rule 354 (function_calc -> case_statement .)


state 598

    (355) function_calc -> casex_statement .

    ENDFUNCTION     reduce using rule 355 (function_calc -> casex_statement .)


state 599

    (356) function_calc -> block .

    ENDFUNCTION     reduce using rule 356 (function_calc -> block .)


state 600

    (357) function_calc -> namedblock .

    ENDFUNCTION     reduce using rule 357 (function_calc -> namedblock .)


state 601

    (223) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (250) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    IF              shift and go to state 323
    LBRACE          shift and go to state 162
    ID              shift and go to state 81

    lvalue                         shift and go to state 531
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 602

    (71) decl -> sigtypes width . declnamelist SEMICOLON
    (72) declnamelist -> . declnamelist COMMA declname
    (73) declnamelist -> . declname
    (74) declname -> . ID
    (75) declname -> . ID length

    ID              shift and go to state 422

    declnamelist                   shift and go to state 274
    declname                       shift and go to state 131

state 603

    (362) task -> TASK ID SEMICOLON task_statement ENDTASK .

    ENDMODULE       reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENERATE        reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INTEGER         reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REAL            reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    PARAMETER       reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LOCALPARAM      reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENVAR          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ASSIGN          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INITIAL         reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ID              reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SENS_OR         reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FUNCTION        reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TASK            reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LPAREN          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INPUT           reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    OUTPUT          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INOUT           reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TRI             reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REG             reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    WIRE            reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SIGNED          reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY0         reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY1         reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ENDGENERATE     reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    IF              reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FOR             reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ELSE            reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    END             reduce using rule 362 (task -> TASK ID SEMICOLON task_statement ENDTASK .)


state 604

    (363) task_statement -> taskvardecls task_calc .

    ENDTASK         reduce using rule 363 (task_statement -> taskvardecls task_calc .)


state 605

    (364) taskvardecls -> taskvardecls taskvardecl .

    IF              reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    FOR             reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    WHILE           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    CASE            reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    CASEX           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    BEGIN           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    INTEGER         reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    DELAY           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    INPUT           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    OUTPUT          reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    INOUT           reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    TRI             reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    REG             reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    WIRE            reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    SIGNED          reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY0         reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY1         reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    LBRACE          reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)
    ID              reduce using rule 364 (taskvardecls -> taskvardecls taskvardecl .)


state 606

    (369) task_calc -> blocking_substitution .

    ENDTASK         reduce using rule 369 (task_calc -> blocking_substitution .)


state 607

    (370) task_calc -> if_statement .

    ENDTASK         reduce using rule 370 (task_calc -> if_statement .)


state 608

    (371) task_calc -> for_statement .

    ENDTASK         reduce using rule 371 (task_calc -> for_statement .)


state 609

    (372) task_calc -> while_statement .

    ENDTASK         reduce using rule 372 (task_calc -> while_statement .)


state 610

    (373) task_calc -> case_statement .

    ENDTASK         reduce using rule 373 (task_calc -> case_statement .)


state 611

    (374) task_calc -> casex_statement .

    ENDTASK         reduce using rule 374 (task_calc -> casex_statement .)


state 612

    (375) task_calc -> block .

    ENDTASK         reduce using rule 375 (task_calc -> block .)


state 613

    (376) task_calc -> namedblock .

    ENDTASK         reduce using rule 376 (task_calc -> namedblock .)


state 614

    (45) ioport -> sigtypes width portname .

    RPAREN          reduce using rule 45 (ioport -> sigtypes width portname .)
    COMMA           reduce using rule 45 (ioport -> sigtypes width portname .)


state 615

    (153) expression -> expression COND expression COLON expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFTA resolved as shift
  ! shift/reduce conflict for RSHIFTA resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQL resolved as shift
  ! shift/reduce conflict for NEL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for COND resolved as shift
    RPAREN          reduce using rule 153 (expression -> expression COND expression COLON expression .)
    LBRACE          reduce using rule 153 (expression -> expression COND expression COLON expression .)
    RBRACE          reduce using rule 153 (expression -> expression COND expression COLON expression .)
    COMMA           reduce using rule 153 (expression -> expression COND expression COLON expression .)
    COLON           reduce using rule 153 (expression -> expression COND expression COLON expression .)
    SEMICOLON       reduce using rule 153 (expression -> expression COND expression COLON expression .)
    PLUSCOLON       reduce using rule 153 (expression -> expression COND expression COLON expression .)
    MINUSCOLON      reduce using rule 153 (expression -> expression COND expression COLON expression .)
    RBRACKET        reduce using rule 153 (expression -> expression COND expression COLON expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247

  ! TIMES           [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! POWER           [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! MOD             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! PLUS            [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! MINUS           [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFT          [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFT          [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFTA         [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFTA         [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LT              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! GT              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LE              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! GE              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! EQ              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! NE              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! EQL             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! NEL             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! AND             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! XOR             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! XNOR            [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! OR              [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LAND            [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! LOR             [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]
  ! COND            [ reduce using rule 153 (expression -> expression COND expression COLON expression .) ]


state 616

    (170) partselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 678
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 617

    (171) partselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 679
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 618

    (172) partselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 680
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 619

    (167) partselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 681
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 620

    (168) partselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 682
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 621

    (169) partselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 683
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 622

    (359) func_args -> func_args COMMA expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 359 (func_args -> func_args COMMA expression .)
    COMMA           reduce using rule 359 (func_args -> func_args COMMA expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 623

    (337) systemcall -> DOLLER ID LPAREN sysargs RPAREN .

    TIMES           reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    POWER           reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MOD             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LT              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GT              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LE              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GE              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQ              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NE              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQL             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NEL             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    AND             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XOR             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    OR              reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LAND            reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LOR             reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COND            reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COLON           reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 337 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)


state 624

    (339) sysargs -> sysargs COMMA . sysarg
    (342) sysarg -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    sysarg                         shift and go to state 684
    expression                     shift and go to state 525
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 625

    (338) systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .

    TIMES           reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    POWER           reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MOD             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LT              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GT              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LE              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GE              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQ              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NE              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQL             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NEL             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    AND             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XOR             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    OR              reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LAND            reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LOR             reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COND            reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COLON           reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 338 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)


state 626

    (327) generate_if -> IF LPAREN cond RPAREN gif_true_item . ELSE gif_false_item
    (328) generate_if -> IF LPAREN cond RPAREN gif_true_item .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 685
    ENDGENERATE     reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    IF              reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FOR             reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INTEGER         reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REAL            reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    PARAMETER       reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LOCALPARAM      reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    GENVAR          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ASSIGN          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INITIAL         reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ID              reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SENS_OR         reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FUNCTION        reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TASK            reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LPAREN          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INPUT           reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    OUTPUT          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INOUT           reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TRI             reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REG             reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    WIRE            reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SIGNED          reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY0         reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY1         reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    END             reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)

  ! ELSE            [ reduce using rule 328 (generate_if -> IF LPAREN cond RPAREN gif_true_item .) ]


state 627

    (329) gif_true_item -> generate_item .

    ELSE            reduce using rule 329 (gif_true_item -> generate_item .)
    ENDGENERATE     reduce using rule 329 (gif_true_item -> generate_item .)
    IF              reduce using rule 329 (gif_true_item -> generate_item .)
    FOR             reduce using rule 329 (gif_true_item -> generate_item .)
    INTEGER         reduce using rule 329 (gif_true_item -> generate_item .)
    REAL            reduce using rule 329 (gif_true_item -> generate_item .)
    PARAMETER       reduce using rule 329 (gif_true_item -> generate_item .)
    LOCALPARAM      reduce using rule 329 (gif_true_item -> generate_item .)
    GENVAR          reduce using rule 329 (gif_true_item -> generate_item .)
    ASSIGN          reduce using rule 329 (gif_true_item -> generate_item .)
    ALWAYS          reduce using rule 329 (gif_true_item -> generate_item .)
    INITIAL         reduce using rule 329 (gif_true_item -> generate_item .)
    ID              reduce using rule 329 (gif_true_item -> generate_item .)
    SENS_OR         reduce using rule 329 (gif_true_item -> generate_item .)
    FUNCTION        reduce using rule 329 (gif_true_item -> generate_item .)
    TASK            reduce using rule 329 (gif_true_item -> generate_item .)
    LPAREN          reduce using rule 329 (gif_true_item -> generate_item .)
    INPUT           reduce using rule 329 (gif_true_item -> generate_item .)
    OUTPUT          reduce using rule 329 (gif_true_item -> generate_item .)
    INOUT           reduce using rule 329 (gif_true_item -> generate_item .)
    TRI             reduce using rule 329 (gif_true_item -> generate_item .)
    REG             reduce using rule 329 (gif_true_item -> generate_item .)
    WIRE            reduce using rule 329 (gif_true_item -> generate_item .)
    SIGNED          reduce using rule 329 (gif_true_item -> generate_item .)
    SUPPLY0         reduce using rule 329 (gif_true_item -> generate_item .)
    SUPPLY1         reduce using rule 329 (gif_true_item -> generate_item .)
    END             reduce using rule 329 (gif_true_item -> generate_item .)


state 628

    (330) gif_true_item -> generate_block .

    ELSE            reduce using rule 330 (gif_true_item -> generate_block .)
    ENDGENERATE     reduce using rule 330 (gif_true_item -> generate_block .)
    IF              reduce using rule 330 (gif_true_item -> generate_block .)
    FOR             reduce using rule 330 (gif_true_item -> generate_block .)
    INTEGER         reduce using rule 330 (gif_true_item -> generate_block .)
    REAL            reduce using rule 330 (gif_true_item -> generate_block .)
    PARAMETER       reduce using rule 330 (gif_true_item -> generate_block .)
    LOCALPARAM      reduce using rule 330 (gif_true_item -> generate_block .)
    GENVAR          reduce using rule 330 (gif_true_item -> generate_block .)
    ASSIGN          reduce using rule 330 (gif_true_item -> generate_block .)
    ALWAYS          reduce using rule 330 (gif_true_item -> generate_block .)
    INITIAL         reduce using rule 330 (gif_true_item -> generate_block .)
    ID              reduce using rule 330 (gif_true_item -> generate_block .)
    SENS_OR         reduce using rule 330 (gif_true_item -> generate_block .)
    FUNCTION        reduce using rule 330 (gif_true_item -> generate_block .)
    TASK            reduce using rule 330 (gif_true_item -> generate_block .)
    LPAREN          reduce using rule 330 (gif_true_item -> generate_block .)
    INPUT           reduce using rule 330 (gif_true_item -> generate_block .)
    OUTPUT          reduce using rule 330 (gif_true_item -> generate_block .)
    INOUT           reduce using rule 330 (gif_true_item -> generate_block .)
    TRI             reduce using rule 330 (gif_true_item -> generate_block .)
    REG             reduce using rule 330 (gif_true_item -> generate_block .)
    WIRE            reduce using rule 330 (gif_true_item -> generate_block .)
    SIGNED          reduce using rule 330 (gif_true_item -> generate_block .)
    SUPPLY0         reduce using rule 330 (gif_true_item -> generate_block .)
    SUPPLY1         reduce using rule 330 (gif_true_item -> generate_block .)
    END             reduce using rule 330 (gif_true_item -> generate_block .)


state 629

    (325) generate_block -> BEGIN . generate_items END
    (326) generate_block -> BEGIN . COLON ID generate_items END
    (319) generate_items -> . empty
    (320) generate_items -> . generate_items generate_item
    (321) generate_items -> . generate_item
    (385) empty -> .
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    COLON           shift and go to state 687
    END             reduce using rule 385 (empty -> .)
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! IF              [ reduce using rule 385 (empty -> .) ]
  ! FOR             [ reduce using rule 385 (empty -> .) ]
  ! INTEGER         [ reduce using rule 385 (empty -> .) ]
  ! REAL            [ reduce using rule 385 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 385 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 385 (empty -> .) ]
  ! GENVAR          [ reduce using rule 385 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 385 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 385 (empty -> .) ]
  ! INITIAL         [ reduce using rule 385 (empty -> .) ]
  ! ID              [ reduce using rule 385 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 385 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 385 (empty -> .) ]
  ! TASK            [ reduce using rule 385 (empty -> .) ]
  ! LPAREN          [ reduce using rule 385 (empty -> .) ]
  ! INPUT           [ reduce using rule 385 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 385 (empty -> .) ]
  ! INOUT           [ reduce using rule 385 (empty -> .) ]
  ! TRI             [ reduce using rule 385 (empty -> .) ]
  ! REG             [ reduce using rule 385 (empty -> .) ]
  ! WIRE            [ reduce using rule 385 (empty -> .) ]
  ! SIGNED          [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 385 (empty -> .) ]

    generate_items                 shift and go to state 686
    empty                          shift and go to state 120
    generate_item                  shift and go to state 121
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 630

    (333) generate_for -> FOR LPAREN forpre forcond forpost . RPAREN generate_forcontent

    RPAREN          shift and go to state 688


state 631

    (261) forpost -> blocking_substitution_base .

    RPAREN          reduce using rule 261 (forpost -> blocking_substitution_base .)


state 632

    (262) forpost -> empty .
    (230) delays -> empty .

    RPAREN          reduce using rule 262 (forpost -> empty .)
    LBRACE          reduce using rule 230 (delays -> empty .)
    ID              reduce using rule 230 (delays -> empty .)


state 633

    (224) blocking_substitution_base -> delays . lvalue EQUALS delays rvalue
    (114) lvalue -> . lpartselect
    (115) lvalue -> . lpointer
    (116) lvalue -> . lconcat
    (117) lvalue -> . identifier
    (100) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (101) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (102) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (103) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (104) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (105) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (106) lpointer -> . pointer
    (107) lconcat -> . LBRACE lconcatlist RBRACE
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT

    LBRACE          shift and go to state 162
    ID              shift and go to state 81

    lvalue                         shift and go to state 689
    lpartselect                    shift and go to state 157
    lpointer                       shift and go to state 158
    lconcat                        shift and go to state 159
    identifier                     shift and go to state 160
    pointer                        shift and go to state 161
    scope                          shift and go to state 103

state 634

    (259) forcond -> cond SEMICOLON .

    DELAY           reduce using rule 259 (forcond -> cond SEMICOLON .)
    RPAREN          reduce using rule 259 (forcond -> cond SEMICOLON .)
    LBRACE          reduce using rule 259 (forcond -> cond SEMICOLON .)
    ID              reduce using rule 259 (forcond -> cond SEMICOLON .)


state 635

    (49) width -> LBRACKET expression COLON expression RBRACKET .

    ID              reduce using rule 49 (width -> LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 49 (width -> LBRACKET expression COLON expression RBRACKET .)
    LPAREN          reduce using rule 49 (width -> LBRACKET expression COLON expression RBRACKET .)


state 636

    (50) length -> LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 690
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 637

    (79) declassign_element -> delays ID EQUALS delays rvalue .

    SEMICOLON       reduce using rule 79 (declassign_element -> delays ID EQUALS delays rvalue .)


state 638

    (99) assignment -> ASSIGN delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 691


state 639

    (103) lpartselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 692
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 640

    (104) lpartselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 693
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 641

    (105) lpartselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 694
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 642

    (100) lpartselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 695
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 643

    (101) lpartselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 696
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 644

    (102) lpartselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 697
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 645

    (194) edgesigs -> edgesigs SENS_OR edgesig .

    RPAREN          reduce using rule 194 (edgesigs -> edgesigs SENS_OR edgesig .)
    SENS_OR         reduce using rule 194 (edgesigs -> edgesigs SENS_OR edgesig .)


state 646

    (203) levelsigs -> levelsigs SENS_OR levelsig .

    RPAREN          reduce using rule 203 (levelsigs -> levelsigs SENS_OR levelsig .)
    SENS_OR         reduce using rule 203 (levelsigs -> levelsigs SENS_OR levelsig .)
    COMMA           reduce using rule 203 (levelsigs -> levelsigs SENS_OR levelsig .)


state 647

    (204) levelsigs -> levelsigs COMMA levelsig .

    RPAREN          reduce using rule 204 (levelsigs -> levelsigs COMMA levelsig .)
    SENS_OR         reduce using rule 204 (levelsigs -> levelsigs COMMA levelsig .)
    COMMA           reduce using rule 204 (levelsigs -> levelsigs COMMA levelsig .)


state 648

    (248) if_statement -> IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (249) if_statement -> IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 698
    ENDMODULE       reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 249 (if_statement -> IF LPAREN cond RPAREN true_statement .) ]


state 649

    (254) true_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 254 (true_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 254 (true_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 254 (true_statement -> ifcontent_statement .)
    REAL            reduce using rule 254 (true_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 254 (true_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 254 (true_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 254 (true_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 254 (true_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 254 (true_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 254 (true_statement -> ifcontent_statement .)
    ID              reduce using rule 254 (true_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 254 (true_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 254 (true_statement -> ifcontent_statement .)
    TASK            reduce using rule 254 (true_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 254 (true_statement -> ifcontent_statement .)
    INPUT           reduce using rule 254 (true_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 254 (true_statement -> ifcontent_statement .)
    INOUT           reduce using rule 254 (true_statement -> ifcontent_statement .)
    TRI             reduce using rule 254 (true_statement -> ifcontent_statement .)
    REG             reduce using rule 254 (true_statement -> ifcontent_statement .)
    WIRE            reduce using rule 254 (true_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 254 (true_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 254 (true_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 254 (true_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 254 (true_statement -> ifcontent_statement .)
    IF              reduce using rule 254 (true_statement -> ifcontent_statement .)
    FOR             reduce using rule 254 (true_statement -> ifcontent_statement .)
    ELSE            reduce using rule 254 (true_statement -> ifcontent_statement .)
    END             reduce using rule 254 (true_statement -> ifcontent_statement .)
    CASE            reduce using rule 254 (true_statement -> ifcontent_statement .)
    CASEX           reduce using rule 254 (true_statement -> ifcontent_statement .)
    WHILE           reduce using rule 254 (true_statement -> ifcontent_statement .)
    WAIT            reduce using rule 254 (true_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 254 (true_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 254 (true_statement -> ifcontent_statement .)
    FORK            reduce using rule 254 (true_statement -> ifcontent_statement .)
    DELAY           reduce using rule 254 (true_statement -> ifcontent_statement .)
    AT              reduce using rule 254 (true_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 254 (true_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 254 (true_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 254 (true_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 254 (true_statement -> ifcontent_statement .)
    JOIN            reduce using rule 254 (true_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 254 (true_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 254 (true_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 254 (true_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 254 (true_statement -> ifcontent_statement .)
    MINUS           reduce using rule 254 (true_statement -> ifcontent_statement .)
    PLUS            reduce using rule 254 (true_statement -> ifcontent_statement .)
    LNOT            reduce using rule 254 (true_statement -> ifcontent_statement .)
    NOT             reduce using rule 254 (true_statement -> ifcontent_statement .)
    AND             reduce using rule 254 (true_statement -> ifcontent_statement .)
    NAND            reduce using rule 254 (true_statement -> ifcontent_statement .)
    NOR             reduce using rule 254 (true_statement -> ifcontent_statement .)
    OR              reduce using rule 254 (true_statement -> ifcontent_statement .)
    XOR             reduce using rule 254 (true_statement -> ifcontent_statement .)
    XNOR            reduce using rule 254 (true_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 254 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 254 (true_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 254 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 254 (true_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 254 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 254 (true_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 254 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 254 (true_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 254 (true_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 254 (true_statement -> ifcontent_statement .)


state 650

    (253) ifcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 253 (ifcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    REAL            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 253 (ifcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 253 (ifcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ID              reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 253 (ifcontent_statement -> basic_statement .)
    TASK            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INPUT           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INOUT           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    TRI             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    REG             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    WIRE            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 253 (ifcontent_statement -> basic_statement .)
    IF              reduce using rule 253 (ifcontent_statement -> basic_statement .)
    FOR             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ELSE            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    END             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    CASE            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    CASEX           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    WHILE           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    WAIT            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    FORK            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    DELAY           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    AT              reduce using rule 253 (ifcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 253 (ifcontent_statement -> basic_statement .)
    JOIN            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 253 (ifcontent_statement -> basic_statement .)
    MINUS           reduce using rule 253 (ifcontent_statement -> basic_statement .)
    PLUS            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    LNOT            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    NOT             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    AND             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    NAND            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    NOR             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    OR              reduce using rule 253 (ifcontent_statement -> basic_statement .)
    XOR             reduce using rule 253 (ifcontent_statement -> basic_statement .)
    XNOR            reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 253 (ifcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 253 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 253 (ifcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 253 (ifcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 253 (ifcontent_statement -> basic_statement .)


state 651

    (250) if_statement -> delays IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (251) if_statement -> delays IF LPAREN cond RPAREN . true_statement
    (254) true_statement -> . ifcontent_statement
    (253) ifcontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    delays                         shift and go to state 183
    true_statement                 shift and go to state 699
    ifcontent_statement            shift and go to state 649
    basic_statement                shift and go to state 650
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 652

    (223) blocking_substitution -> delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 700


state 653

    (225) nonblocking_substitution -> delays lvalue LE delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 701


state 654

    (266) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (269) casecontent_statements -> casecontent_statements . casecontent_statement
    (271) casecontent_statement -> . casecontent_condition COLON basic_statement
    (274) casecontent_statement -> . DEFAULT COLON basic_statement
    (272) casecontent_condition -> . casecontent_condition COMMA expression
    (273) casecontent_condition -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 702
    DEFAULT         shift and go to state 657
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    casecontent_statement          shift and go to state 703
    casecontent_condition          shift and go to state 656
    expression                     shift and go to state 658
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 655

    (270) casecontent_statements -> casecontent_statement .

    ENDCASE         reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    DEFAULT         reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    MINUS           reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    PLUS            reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    LNOT            reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    NOT             reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    AND             reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    NAND            reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    NOR             reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    OR              reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    XOR             reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    XNOR            reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    LPAREN          reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    LBRACE          reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    DOLLER          reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    ID              reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    FLOATNUMBER     reduce using rule 270 (casecontent_statements -> casecontent_statement .)
    STRING_LITERAL  reduce using rule 270 (casecontent_statements -> casecontent_statement .)


state 656

    (271) casecontent_statement -> casecontent_condition . COLON basic_statement
    (272) casecontent_condition -> casecontent_condition . COMMA expression

    COLON           shift and go to state 704
    COMMA           shift and go to state 705


state 657

    (274) casecontent_statement -> DEFAULT . COLON basic_statement

    COLON           shift and go to state 706


state 658

    (273) casecontent_condition -> expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 273 (casecontent_condition -> expression .)
    COMMA           reduce using rule 273 (casecontent_condition -> expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 659

    (267) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (269) casecontent_statements -> casecontent_statements . casecontent_statement
    (271) casecontent_statement -> . casecontent_condition COLON basic_statement
    (274) casecontent_statement -> . DEFAULT COLON basic_statement
    (272) casecontent_condition -> . casecontent_condition COMMA expression
    (273) casecontent_condition -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 707
    DEFAULT         shift and go to state 657
    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    casecontent_statement          shift and go to state 703
    casecontent_condition          shift and go to state 656
    expression                     shift and go to state 658
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 660

    (256) for_statement -> FOR LPAREN forpre forcond forpost . RPAREN forcontent_statement

    RPAREN          shift and go to state 708


state 661

    (264) while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .

    ENDMODULE       reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENERATE        reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTEGER         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REAL            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PARAMETER       reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LOCALPARAM      reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENVAR          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ASSIGN          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INITIAL         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ID              reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SENS_OR         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FUNCTION        reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TASK            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LPAREN          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INPUT           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OUTPUT          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INOUT           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TRI             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REG             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WIRE            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY0         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY1         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDGENERATE     reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    IF              reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOR             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ELSE            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    END             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASE            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASEX           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WHILE           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WAIT            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOREVER         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    BEGIN           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FORK            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DELAY           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AT              reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DOLLER          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DISABLE         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LBRACE          reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SEMICOLON       reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    JOIN            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDFUNCTION     reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDTASK         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDCASE         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DEFAULT         reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    MINUS           reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PLUS            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LNOT            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOT             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AND             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NAND            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOR             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OR              reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XOR             reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XNOR            reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_DEC   reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_BIN   reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_OCT   reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_HEX   reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FLOATNUMBER     reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    STRING_LITERAL  reduce using rule 264 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)


state 662

    (265) whilecontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 265 (whilecontent_statement -> basic_statement .)
    GENERATE        reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INTEGER         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    REAL            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 265 (whilecontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 265 (whilecontent_statement -> basic_statement .)
    GENVAR          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INITIAL         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ID              reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 265 (whilecontent_statement -> basic_statement .)
    TASK            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    LPAREN          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INPUT           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INOUT           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    TRI             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    REG             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    WIRE            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SIGNED          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 265 (whilecontent_statement -> basic_statement .)
    IF              reduce using rule 265 (whilecontent_statement -> basic_statement .)
    FOR             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ELSE            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    END             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    CASE            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    CASEX           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    WHILE           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    WAIT            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    FOREVER         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    BEGIN           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    FORK            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    DELAY           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    AT              reduce using rule 265 (whilecontent_statement -> basic_statement .)
    DOLLER          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    DISABLE         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    LBRACE          reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 265 (whilecontent_statement -> basic_statement .)
    JOIN            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 265 (whilecontent_statement -> basic_statement .)
    MINUS           reduce using rule 265 (whilecontent_statement -> basic_statement .)
    PLUS            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    LNOT            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    NOT             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    AND             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    NAND            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    NOR             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    OR              reduce using rule 265 (whilecontent_statement -> basic_statement .)
    XOR             reduce using rule 265 (whilecontent_statement -> basic_statement .)
    XNOR            reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 265 (whilecontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 265 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 265 (whilecontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 265 (whilecontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 265 (whilecontent_statement -> basic_statement .)


state 663

    (278) wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .

    ENDMODULE       reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENERATE        reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTEGER         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REAL            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PARAMETER       reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LOCALPARAM      reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENVAR          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ASSIGN          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INITIAL         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ID              reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SENS_OR         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FUNCTION        reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TASK            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LPAREN          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INPUT           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OUTPUT          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INOUT           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TRI             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REG             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WIRE            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY0         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY1         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDGENERATE     reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    IF              reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOR             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ELSE            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    END             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASE            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASEX           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WHILE           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WAIT            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOREVER         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    BEGIN           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FORK            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DELAY           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AT              reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DOLLER          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DISABLE         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LBRACE          reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SEMICOLON       reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    JOIN            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDFUNCTION     reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDTASK         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDCASE         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DEFAULT         reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    MINUS           reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PLUS            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LNOT            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOT             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AND             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NAND            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOR             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OR              reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XOR             reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XNOR            reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_DEC   reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_BIN   reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_OCT   reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_HEX   reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FLOATNUMBER     reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    STRING_LITERAL  reduce using rule 278 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)


state 664

    (279) waitcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 279 (waitcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    REAL            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 279 (waitcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 279 (waitcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ID              reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 279 (waitcontent_statement -> basic_statement .)
    TASK            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INPUT           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INOUT           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    TRI             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    REG             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    WIRE            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 279 (waitcontent_statement -> basic_statement .)
    IF              reduce using rule 279 (waitcontent_statement -> basic_statement .)
    FOR             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ELSE            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    END             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    CASE            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    CASEX           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    WHILE           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    WAIT            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    FORK            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    DELAY           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    AT              reduce using rule 279 (waitcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 279 (waitcontent_statement -> basic_statement .)
    JOIN            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 279 (waitcontent_statement -> basic_statement .)
    MINUS           reduce using rule 279 (waitcontent_statement -> basic_statement .)
    PLUS            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    LNOT            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    NOT             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    AND             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    NAND            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    NOR             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    OR              reduce using rule 279 (waitcontent_statement -> basic_statement .)
    XOR             reduce using rule 279 (waitcontent_statement -> basic_statement .)
    XNOR            reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 279 (waitcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 279 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 279 (waitcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 279 (waitcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 279 (waitcontent_statement -> basic_statement .)


state 665

    (280) waitcontent_statement -> SEMICOLON .

    ENDMODULE       reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    GENERATE        reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INTEGER         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    REAL            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    PARAMETER       reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    LOCALPARAM      reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    GENVAR          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ASSIGN          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ALWAYS          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INITIAL         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ID              reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SENS_OR         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    TASK            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    LPAREN          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INPUT           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    OUTPUT          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INOUT           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    TRI             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    REG             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    WIRE            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SIGNED          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SUPPLY0         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SUPPLY1         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ENDGENERATE     reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    IF              reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    FOR             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ELSE            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    END             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    CASE            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    CASEX           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    WHILE           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    WAIT            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    FOREVER         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    BEGIN           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    FORK            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    DELAY           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    AT              reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    DOLLER          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    DISABLE         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    LBRACE          reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    JOIN            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ENDFUNCTION     reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ENDTASK         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    ENDCASE         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    MINUS           reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    PLUS            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    LNOT            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    NOT             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    AND             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    NAND            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    NOR             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    OR              reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    XOR             reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    XNOR            reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 280 (waitcontent_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 280 (waitcontent_statement -> SEMICOLON .)


state 666

    (236) namedblock -> BEGIN COLON ID namedblock_statements END .

    ENDMODULE       reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENERATE        reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTEGER         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REAL            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PARAMETER       reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LOCALPARAM      reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENVAR          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ASSIGN          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INITIAL         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ID              reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SENS_OR         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FUNCTION        reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TASK            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LPAREN          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INPUT           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OUTPUT          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INOUT           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TRI             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REG             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WIRE            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY0         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY1         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDGENERATE     reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    IF              reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOR             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ELSE            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    END             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASE            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASEX           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WHILE           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WAIT            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOREVER         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    BEGIN           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FORK            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DELAY           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AT              reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DOLLER          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DISABLE         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LBRACE          reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SEMICOLON       reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    JOIN            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDFUNCTION     reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDTASK         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDCASE         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DEFAULT         reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    MINUS           reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PLUS            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LNOT            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOT             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AND             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NAND            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOR             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OR              reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XOR             reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XNOR            reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_DEC   reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_BIN   reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_OCT   reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_HEX   reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FLOATNUMBER     reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    STRING_LITERAL  reduce using rule 236 (namedblock -> BEGIN COLON ID namedblock_statements END .)


state 667

    (238) namedblock_statements -> namedblock_statements namedblock_statement .

    END             reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INTEGER         reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REAL            reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    PARAMETER       reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LOCALPARAM      reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    IF              reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASE            reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASEX           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOR             reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WHILE           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WAIT            reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOREVER         reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    BEGIN           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FORK            reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DELAY           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    AT              reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DOLLER          reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DISABLE         reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INPUT           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    OUTPUT          reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INOUT           reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    TRI             reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REG             reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WIRE            reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SIGNED          reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY0         reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY1         reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LBRACE          reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    ID              reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SEMICOLON       reduce using rule 238 (namedblock_statements -> namedblock_statements namedblock_statement .)


state 668

    (286) instance_body -> ID LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 286 (instance_body -> ID LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 286 (instance_body -> ID LPAREN instance_ports RPAREN .)


state 669

    (287) instance_body -> ID width LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 709


state 670

    (298) param_args -> param_args COMMA param_arg .

    RPAREN          reduce using rule 298 (param_args -> param_args COMMA param_arg .)
    COMMA           reduce using rule 298 (param_args -> param_args COMMA param_arg .)


state 671

    (296) param_args_noname -> param_args_noname COMMA param_arg_noname .

    RPAREN          reduce using rule 296 (param_args_noname -> param_args_noname COMMA param_arg_noname .)
    COMMA           reduce using rule 296 (param_args_noname -> param_args_noname COMMA param_arg_noname .)


state 672

    (302) param_arg -> DOT ID LPAREN . expression RPAREN
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 710
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 673

    (311) instance_port_arg -> DOT ID LPAREN identifier . RPAREN
    (161) expression -> identifier .
    (379) scope -> identifier . DOT
    (167) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (168) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> identifier . LBRACKET expression RBRACKET
    (358) functioncall -> identifier . LPAREN func_args RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 711
    POWER           reduce using rule 161 (expression -> identifier .)
    TIMES           reduce using rule 161 (expression -> identifier .)
    DIVIDE          reduce using rule 161 (expression -> identifier .)
    MOD             reduce using rule 161 (expression -> identifier .)
    PLUS            reduce using rule 161 (expression -> identifier .)
    MINUS           reduce using rule 161 (expression -> identifier .)
    LSHIFT          reduce using rule 161 (expression -> identifier .)
    RSHIFT          reduce using rule 161 (expression -> identifier .)
    LSHIFTA         reduce using rule 161 (expression -> identifier .)
    RSHIFTA         reduce using rule 161 (expression -> identifier .)
    LT              reduce using rule 161 (expression -> identifier .)
    GT              reduce using rule 161 (expression -> identifier .)
    LE              reduce using rule 161 (expression -> identifier .)
    GE              reduce using rule 161 (expression -> identifier .)
    EQ              reduce using rule 161 (expression -> identifier .)
    NE              reduce using rule 161 (expression -> identifier .)
    EQL             reduce using rule 161 (expression -> identifier .)
    NEL             reduce using rule 161 (expression -> identifier .)
    AND             reduce using rule 161 (expression -> identifier .)
    XOR             reduce using rule 161 (expression -> identifier .)
    XNOR            reduce using rule 161 (expression -> identifier .)
    OR              reduce using rule 161 (expression -> identifier .)
    LAND            reduce using rule 161 (expression -> identifier .)
    LOR             reduce using rule 161 (expression -> identifier .)
    COND            reduce using rule 161 (expression -> identifier .)
    DOT             shift and go to state 262
    LBRACKET        shift and go to state 260
    LPAREN          shift and go to state 261

  ! RPAREN          [ reduce using rule 161 (expression -> identifier .) ]


state 674

    (313) instance_port_arg -> DOT ID LPAREN RPAREN .

    COMMA           reduce using rule 313 (instance_port_arg -> DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 313 (instance_port_arg -> DOT ID LPAREN RPAREN .)


state 675

    (312) instance_port_arg -> DOT ID LPAREN expression . RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 712
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 676

    (158) expression -> pointer .
    (380) scope -> pointer . DOT
    (170) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (171) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (174) pointer -> pointer . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 158 (expression -> pointer .)
    POWER           reduce using rule 158 (expression -> pointer .)
    TIMES           reduce using rule 158 (expression -> pointer .)
    DIVIDE          reduce using rule 158 (expression -> pointer .)
    MOD             reduce using rule 158 (expression -> pointer .)
    PLUS            reduce using rule 158 (expression -> pointer .)
    MINUS           reduce using rule 158 (expression -> pointer .)
    LSHIFT          reduce using rule 158 (expression -> pointer .)
    RSHIFT          reduce using rule 158 (expression -> pointer .)
    LSHIFTA         reduce using rule 158 (expression -> pointer .)
    RSHIFTA         reduce using rule 158 (expression -> pointer .)
    LT              reduce using rule 158 (expression -> pointer .)
    GT              reduce using rule 158 (expression -> pointer .)
    LE              reduce using rule 158 (expression -> pointer .)
    GE              reduce using rule 158 (expression -> pointer .)
    EQ              reduce using rule 158 (expression -> pointer .)
    NE              reduce using rule 158 (expression -> pointer .)
    EQL             reduce using rule 158 (expression -> pointer .)
    NEL             reduce using rule 158 (expression -> pointer .)
    AND             reduce using rule 158 (expression -> pointer .)
    XOR             reduce using rule 158 (expression -> pointer .)
    XNOR            reduce using rule 158 (expression -> pointer .)
    OR              reduce using rule 158 (expression -> pointer .)
    LAND            reduce using rule 158 (expression -> pointer .)
    LOR             reduce using rule 158 (expression -> pointer .)
    COND            reduce using rule 158 (expression -> pointer .)
    DOT             shift and go to state 259
    LBRACKET        shift and go to state 258


state 677

    (343) function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 343 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)


state 678

    (170) partselect -> pointer LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 170 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 679

    (171) partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 171 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 680

    (172) partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 172 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 681

    (167) partselect -> identifier LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 167 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 682

    (168) partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 168 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 683

    (169) partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 169 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 684

    (339) sysargs -> sysargs COMMA sysarg .

    RPAREN          reduce using rule 339 (sysargs -> sysargs COMMA sysarg .)
    COMMA           reduce using rule 339 (sysargs -> sysargs COMMA sysarg .)


state 685

    (327) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE . gif_false_item
    (331) gif_false_item -> . generate_item
    (332) gif_false_item -> . generate_block
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (325) generate_block -> . BEGIN generate_items END
    (326) generate_block -> . BEGIN COLON ID generate_items END
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 629
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    gif_false_item                 shift and go to state 713
    generate_item                  shift and go to state 714
    generate_block                 shift and go to state 715
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 686

    (325) generate_block -> BEGIN generate_items . END
    (320) generate_items -> generate_items . generate_item
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    END             shift and go to state 716
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    generate_item                  shift and go to state 269
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 687

    (326) generate_block -> BEGIN COLON . ID generate_items END

    ID              shift and go to state 717


state 688

    (333) generate_for -> FOR LPAREN forpre forcond forpost RPAREN . generate_forcontent
    (334) generate_forcontent -> . generate_item
    (335) generate_forcontent -> . generate_block
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (325) generate_block -> . BEGIN generate_items END
    (326) generate_block -> . BEGIN COLON ID generate_items END
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 629
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    generate_forcontent            shift and go to state 718
    generate_item                  shift and go to state 719
    generate_block                 shift and go to state 720
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 689

    (224) blocking_substitution_base -> delays lvalue . EQUALS delays rvalue

    EQUALS          shift and go to state 721


state 690

    (50) length -> LBRACKET expression COLON expression RBRACKET .

    SEMICOLON       reduce using rule 50 (length -> LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 50 (length -> LBRACKET expression COLON expression RBRACKET .)


state 691

    (99) assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 99 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)


state 692

    (103) lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 103 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 103 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 103 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 103 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 693

    (104) lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 104 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 104 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 104 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 104 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 694

    (105) lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 105 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 105 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 105 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 105 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 695

    (100) lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 100 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 100 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 100 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 100 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 696

    (101) lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 101 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 101 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 101 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 101 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 697

    (102) lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 102 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 102 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 102 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 102 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 698

    (248) if_statement -> IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (255) else_statement -> . ifcontent_statement
    (253) ifcontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    else_statement                 shift and go to state 722
    ifcontent_statement            shift and go to state 723
    basic_statement                shift and go to state 650
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 699

    (250) if_statement -> delays IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (251) if_statement -> delays IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 724
    ENDMODULE       reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 251 (if_statement -> delays IF LPAREN cond RPAREN true_statement .) ]


state 700

    (223) blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASE            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASEX           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WHILE           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WAIT            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FORK            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DELAY           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AT              reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    JOIN            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    MINUS           reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PLUS            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LNOT            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOT             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AND             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NAND            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOR             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OR              reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XOR             reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XNOR            reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 223 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)


state 701

    (225) nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REAL            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ID              reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TASK            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INPUT           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INOUT           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TRI             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REG             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WIRE            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    IF              reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOR             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ELSE            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    END             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASE            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASEX           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WHILE           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WAIT            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FORK            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DELAY           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AT              reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    JOIN            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    MINUS           reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PLUS            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LNOT            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOT             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AND             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NAND            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOR             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OR              reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XOR             reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XNOR            reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 225 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)


state 702

    (266) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 266 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 703

    (269) casecontent_statements -> casecontent_statements casecontent_statement .

    ENDCASE         reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DEFAULT         reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    MINUS           reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    PLUS            reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LNOT            reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOT             reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    AND             reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NAND            reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOR             reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    OR              reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XOR             reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XNOR            reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LPAREN          reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LBRACE          reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DOLLER          reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    ID              reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    FLOATNUMBER     reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)
    STRING_LITERAL  reduce using rule 269 (casecontent_statements -> casecontent_statements casecontent_statement .)


state 704

    (271) casecontent_statement -> casecontent_condition COLON . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    basic_statement                shift and go to state 725
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 705

    (272) casecontent_condition -> casecontent_condition COMMA . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    expression                     shift and go to state 726
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 706

    (274) casecontent_statement -> DEFAULT COLON . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    basic_statement                shift and go to state 727
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 707

    (267) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 267 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 708

    (256) for_statement -> FOR LPAREN forpre forcond forpost RPAREN . forcontent_statement
    (263) forcontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    forcontent_statement           shift and go to state 728
    basic_statement                shift and go to state 729
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    delays                         shift and go to state 183
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 709

    (287) instance_body -> ID width LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 287 (instance_body -> ID width LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 287 (instance_body -> ID width LPAREN instance_ports RPAREN .)


state 710

    (302) param_arg -> DOT ID LPAREN expression . RPAREN
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 730
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 711

    (311) instance_port_arg -> DOT ID LPAREN identifier RPAREN .

    COMMA           reduce using rule 311 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)
    RPAREN          reduce using rule 311 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)


state 712

    (312) instance_port_arg -> DOT ID LPAREN expression RPAREN .

    COMMA           reduce using rule 312 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)
    RPAREN          reduce using rule 312 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)


state 713

    (327) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .

    ENDGENERATE     reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    IF              reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FOR             reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INTEGER         reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REAL            reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    PARAMETER       reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LOCALPARAM      reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    GENVAR          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ASSIGN          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INITIAL         reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ID              reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SENS_OR         reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FUNCTION        reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TASK            reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LPAREN          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INPUT           reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    OUTPUT          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INOUT           reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TRI             reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REG             reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    WIRE            reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SIGNED          reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY0         reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY1         reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ELSE            reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    END             reduce using rule 327 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)


state 714

    (331) gif_false_item -> generate_item .

    ELSE            reduce using rule 331 (gif_false_item -> generate_item .)
    ENDGENERATE     reduce using rule 331 (gif_false_item -> generate_item .)
    IF              reduce using rule 331 (gif_false_item -> generate_item .)
    FOR             reduce using rule 331 (gif_false_item -> generate_item .)
    INTEGER         reduce using rule 331 (gif_false_item -> generate_item .)
    REAL            reduce using rule 331 (gif_false_item -> generate_item .)
    PARAMETER       reduce using rule 331 (gif_false_item -> generate_item .)
    LOCALPARAM      reduce using rule 331 (gif_false_item -> generate_item .)
    GENVAR          reduce using rule 331 (gif_false_item -> generate_item .)
    ASSIGN          reduce using rule 331 (gif_false_item -> generate_item .)
    ALWAYS          reduce using rule 331 (gif_false_item -> generate_item .)
    INITIAL         reduce using rule 331 (gif_false_item -> generate_item .)
    ID              reduce using rule 331 (gif_false_item -> generate_item .)
    SENS_OR         reduce using rule 331 (gif_false_item -> generate_item .)
    FUNCTION        reduce using rule 331 (gif_false_item -> generate_item .)
    TASK            reduce using rule 331 (gif_false_item -> generate_item .)
    LPAREN          reduce using rule 331 (gif_false_item -> generate_item .)
    INPUT           reduce using rule 331 (gif_false_item -> generate_item .)
    OUTPUT          reduce using rule 331 (gif_false_item -> generate_item .)
    INOUT           reduce using rule 331 (gif_false_item -> generate_item .)
    TRI             reduce using rule 331 (gif_false_item -> generate_item .)
    REG             reduce using rule 331 (gif_false_item -> generate_item .)
    WIRE            reduce using rule 331 (gif_false_item -> generate_item .)
    SIGNED          reduce using rule 331 (gif_false_item -> generate_item .)
    SUPPLY0         reduce using rule 331 (gif_false_item -> generate_item .)
    SUPPLY1         reduce using rule 331 (gif_false_item -> generate_item .)
    END             reduce using rule 331 (gif_false_item -> generate_item .)


state 715

    (332) gif_false_item -> generate_block .

    ELSE            reduce using rule 332 (gif_false_item -> generate_block .)
    ENDGENERATE     reduce using rule 332 (gif_false_item -> generate_block .)
    IF              reduce using rule 332 (gif_false_item -> generate_block .)
    FOR             reduce using rule 332 (gif_false_item -> generate_block .)
    INTEGER         reduce using rule 332 (gif_false_item -> generate_block .)
    REAL            reduce using rule 332 (gif_false_item -> generate_block .)
    PARAMETER       reduce using rule 332 (gif_false_item -> generate_block .)
    LOCALPARAM      reduce using rule 332 (gif_false_item -> generate_block .)
    GENVAR          reduce using rule 332 (gif_false_item -> generate_block .)
    ASSIGN          reduce using rule 332 (gif_false_item -> generate_block .)
    ALWAYS          reduce using rule 332 (gif_false_item -> generate_block .)
    INITIAL         reduce using rule 332 (gif_false_item -> generate_block .)
    ID              reduce using rule 332 (gif_false_item -> generate_block .)
    SENS_OR         reduce using rule 332 (gif_false_item -> generate_block .)
    FUNCTION        reduce using rule 332 (gif_false_item -> generate_block .)
    TASK            reduce using rule 332 (gif_false_item -> generate_block .)
    LPAREN          reduce using rule 332 (gif_false_item -> generate_block .)
    INPUT           reduce using rule 332 (gif_false_item -> generate_block .)
    OUTPUT          reduce using rule 332 (gif_false_item -> generate_block .)
    INOUT           reduce using rule 332 (gif_false_item -> generate_block .)
    TRI             reduce using rule 332 (gif_false_item -> generate_block .)
    REG             reduce using rule 332 (gif_false_item -> generate_block .)
    WIRE            reduce using rule 332 (gif_false_item -> generate_block .)
    SIGNED          reduce using rule 332 (gif_false_item -> generate_block .)
    SUPPLY0         reduce using rule 332 (gif_false_item -> generate_block .)
    SUPPLY1         reduce using rule 332 (gif_false_item -> generate_block .)
    END             reduce using rule 332 (gif_false_item -> generate_block .)


state 716

    (325) generate_block -> BEGIN generate_items END .

    ELSE            reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    ENDGENERATE     reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    IF              reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    FOR             reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    INTEGER         reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    REAL            reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    PARAMETER       reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    LOCALPARAM      reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    GENVAR          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    ASSIGN          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    ALWAYS          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    INITIAL         reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    ID              reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    SENS_OR         reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    FUNCTION        reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    TASK            reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    LPAREN          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    INPUT           reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    OUTPUT          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    INOUT           reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    TRI             reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    REG             reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    WIRE            reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    SIGNED          reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    SUPPLY0         reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    SUPPLY1         reduce using rule 325 (generate_block -> BEGIN generate_items END .)
    END             reduce using rule 325 (generate_block -> BEGIN generate_items END .)


state 717

    (326) generate_block -> BEGIN COLON ID . generate_items END
    (319) generate_items -> . empty
    (320) generate_items -> . generate_items generate_item
    (321) generate_items -> . generate_item
    (385) empty -> .
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    END             reduce using rule 385 (empty -> .)
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

  ! IF              [ reduce using rule 385 (empty -> .) ]
  ! FOR             [ reduce using rule 385 (empty -> .) ]
  ! INTEGER         [ reduce using rule 385 (empty -> .) ]
  ! REAL            [ reduce using rule 385 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 385 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 385 (empty -> .) ]
  ! GENVAR          [ reduce using rule 385 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 385 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 385 (empty -> .) ]
  ! INITIAL         [ reduce using rule 385 (empty -> .) ]
  ! ID              [ reduce using rule 385 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 385 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 385 (empty -> .) ]
  ! TASK            [ reduce using rule 385 (empty -> .) ]
  ! LPAREN          [ reduce using rule 385 (empty -> .) ]
  ! INPUT           [ reduce using rule 385 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 385 (empty -> .) ]
  ! INOUT           [ reduce using rule 385 (empty -> .) ]
  ! TRI             [ reduce using rule 385 (empty -> .) ]
  ! REG             [ reduce using rule 385 (empty -> .) ]
  ! WIRE            [ reduce using rule 385 (empty -> .) ]
  ! SIGNED          [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 385 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 385 (empty -> .) ]

    generate_items                 shift and go to state 731
    empty                          shift and go to state 120
    generate_item                  shift and go to state 121
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 718

    (333) generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .

    ENDGENERATE     reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    IF              reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FOR             reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INTEGER         reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REAL            reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    PARAMETER       reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LOCALPARAM      reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    GENVAR          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ASSIGN          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INITIAL         reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ID              reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SENS_OR         reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FUNCTION        reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TASK            reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LPAREN          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INPUT           reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    OUTPUT          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INOUT           reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TRI             reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REG             reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    WIRE            reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SIGNED          reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY0         reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY1         reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ELSE            reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    END             reduce using rule 333 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)


state 719

    (334) generate_forcontent -> generate_item .

    ELSE            reduce using rule 334 (generate_forcontent -> generate_item .)
    ENDGENERATE     reduce using rule 334 (generate_forcontent -> generate_item .)
    IF              reduce using rule 334 (generate_forcontent -> generate_item .)
    FOR             reduce using rule 334 (generate_forcontent -> generate_item .)
    INTEGER         reduce using rule 334 (generate_forcontent -> generate_item .)
    REAL            reduce using rule 334 (generate_forcontent -> generate_item .)
    PARAMETER       reduce using rule 334 (generate_forcontent -> generate_item .)
    LOCALPARAM      reduce using rule 334 (generate_forcontent -> generate_item .)
    GENVAR          reduce using rule 334 (generate_forcontent -> generate_item .)
    ASSIGN          reduce using rule 334 (generate_forcontent -> generate_item .)
    ALWAYS          reduce using rule 334 (generate_forcontent -> generate_item .)
    INITIAL         reduce using rule 334 (generate_forcontent -> generate_item .)
    ID              reduce using rule 334 (generate_forcontent -> generate_item .)
    SENS_OR         reduce using rule 334 (generate_forcontent -> generate_item .)
    FUNCTION        reduce using rule 334 (generate_forcontent -> generate_item .)
    TASK            reduce using rule 334 (generate_forcontent -> generate_item .)
    LPAREN          reduce using rule 334 (generate_forcontent -> generate_item .)
    INPUT           reduce using rule 334 (generate_forcontent -> generate_item .)
    OUTPUT          reduce using rule 334 (generate_forcontent -> generate_item .)
    INOUT           reduce using rule 334 (generate_forcontent -> generate_item .)
    TRI             reduce using rule 334 (generate_forcontent -> generate_item .)
    REG             reduce using rule 334 (generate_forcontent -> generate_item .)
    WIRE            reduce using rule 334 (generate_forcontent -> generate_item .)
    SIGNED          reduce using rule 334 (generate_forcontent -> generate_item .)
    SUPPLY0         reduce using rule 334 (generate_forcontent -> generate_item .)
    SUPPLY1         reduce using rule 334 (generate_forcontent -> generate_item .)
    END             reduce using rule 334 (generate_forcontent -> generate_item .)


state 720

    (335) generate_forcontent -> generate_block .

    ELSE            reduce using rule 335 (generate_forcontent -> generate_block .)
    ENDGENERATE     reduce using rule 335 (generate_forcontent -> generate_block .)
    IF              reduce using rule 335 (generate_forcontent -> generate_block .)
    FOR             reduce using rule 335 (generate_forcontent -> generate_block .)
    INTEGER         reduce using rule 335 (generate_forcontent -> generate_block .)
    REAL            reduce using rule 335 (generate_forcontent -> generate_block .)
    PARAMETER       reduce using rule 335 (generate_forcontent -> generate_block .)
    LOCALPARAM      reduce using rule 335 (generate_forcontent -> generate_block .)
    GENVAR          reduce using rule 335 (generate_forcontent -> generate_block .)
    ASSIGN          reduce using rule 335 (generate_forcontent -> generate_block .)
    ALWAYS          reduce using rule 335 (generate_forcontent -> generate_block .)
    INITIAL         reduce using rule 335 (generate_forcontent -> generate_block .)
    ID              reduce using rule 335 (generate_forcontent -> generate_block .)
    SENS_OR         reduce using rule 335 (generate_forcontent -> generate_block .)
    FUNCTION        reduce using rule 335 (generate_forcontent -> generate_block .)
    TASK            reduce using rule 335 (generate_forcontent -> generate_block .)
    LPAREN          reduce using rule 335 (generate_forcontent -> generate_block .)
    INPUT           reduce using rule 335 (generate_forcontent -> generate_block .)
    OUTPUT          reduce using rule 335 (generate_forcontent -> generate_block .)
    INOUT           reduce using rule 335 (generate_forcontent -> generate_block .)
    TRI             reduce using rule 335 (generate_forcontent -> generate_block .)
    REG             reduce using rule 335 (generate_forcontent -> generate_block .)
    WIRE            reduce using rule 335 (generate_forcontent -> generate_block .)
    SIGNED          reduce using rule 335 (generate_forcontent -> generate_block .)
    SUPPLY0         reduce using rule 335 (generate_forcontent -> generate_block .)
    SUPPLY1         reduce using rule 335 (generate_forcontent -> generate_block .)
    END             reduce using rule 335 (generate_forcontent -> generate_block .)


state 721

    (224) blocking_substitution_base -> delays lvalue EQUALS . delays rvalue
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (385) empty -> .

    DELAY           shift and go to state 135
    MINUS           reduce using rule 385 (empty -> .)
    PLUS            reduce using rule 385 (empty -> .)
    LNOT            reduce using rule 385 (empty -> .)
    NOT             reduce using rule 385 (empty -> .)
    AND             reduce using rule 385 (empty -> .)
    NAND            reduce using rule 385 (empty -> .)
    NOR             reduce using rule 385 (empty -> .)
    OR              reduce using rule 385 (empty -> .)
    XOR             reduce using rule 385 (empty -> .)
    XNOR            reduce using rule 385 (empty -> .)
    LPAREN          reduce using rule 385 (empty -> .)
    LBRACE          reduce using rule 385 (empty -> .)
    DOLLER          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    INTNUMBER_DEC   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 385 (empty -> .)
    INTNUMBER_BIN   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 385 (empty -> .)
    INTNUMBER_OCT   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 385 (empty -> .)
    INTNUMBER_HEX   reduce using rule 385 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 385 (empty -> .)
    FLOATNUMBER     reduce using rule 385 (empty -> .)
    STRING_LITERAL  reduce using rule 385 (empty -> .)

    delays                         shift and go to state 732
    empty                          shift and go to state 136

state 722

    (248) if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 248 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 723

    (255) else_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 255 (else_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 255 (else_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 255 (else_statement -> ifcontent_statement .)
    REAL            reduce using rule 255 (else_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 255 (else_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 255 (else_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 255 (else_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 255 (else_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 255 (else_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 255 (else_statement -> ifcontent_statement .)
    ID              reduce using rule 255 (else_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 255 (else_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 255 (else_statement -> ifcontent_statement .)
    TASK            reduce using rule 255 (else_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 255 (else_statement -> ifcontent_statement .)
    INPUT           reduce using rule 255 (else_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 255 (else_statement -> ifcontent_statement .)
    INOUT           reduce using rule 255 (else_statement -> ifcontent_statement .)
    TRI             reduce using rule 255 (else_statement -> ifcontent_statement .)
    REG             reduce using rule 255 (else_statement -> ifcontent_statement .)
    WIRE            reduce using rule 255 (else_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 255 (else_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 255 (else_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 255 (else_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 255 (else_statement -> ifcontent_statement .)
    IF              reduce using rule 255 (else_statement -> ifcontent_statement .)
    FOR             reduce using rule 255 (else_statement -> ifcontent_statement .)
    ELSE            reduce using rule 255 (else_statement -> ifcontent_statement .)
    END             reduce using rule 255 (else_statement -> ifcontent_statement .)
    CASE            reduce using rule 255 (else_statement -> ifcontent_statement .)
    CASEX           reduce using rule 255 (else_statement -> ifcontent_statement .)
    WHILE           reduce using rule 255 (else_statement -> ifcontent_statement .)
    WAIT            reduce using rule 255 (else_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 255 (else_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 255 (else_statement -> ifcontent_statement .)
    FORK            reduce using rule 255 (else_statement -> ifcontent_statement .)
    DELAY           reduce using rule 255 (else_statement -> ifcontent_statement .)
    AT              reduce using rule 255 (else_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 255 (else_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 255 (else_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 255 (else_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 255 (else_statement -> ifcontent_statement .)
    JOIN            reduce using rule 255 (else_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 255 (else_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 255 (else_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 255 (else_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 255 (else_statement -> ifcontent_statement .)
    MINUS           reduce using rule 255 (else_statement -> ifcontent_statement .)
    PLUS            reduce using rule 255 (else_statement -> ifcontent_statement .)
    LNOT            reduce using rule 255 (else_statement -> ifcontent_statement .)
    NOT             reduce using rule 255 (else_statement -> ifcontent_statement .)
    AND             reduce using rule 255 (else_statement -> ifcontent_statement .)
    NAND            reduce using rule 255 (else_statement -> ifcontent_statement .)
    NOR             reduce using rule 255 (else_statement -> ifcontent_statement .)
    OR              reduce using rule 255 (else_statement -> ifcontent_statement .)
    XOR             reduce using rule 255 (else_statement -> ifcontent_statement .)
    XNOR            reduce using rule 255 (else_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 255 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 255 (else_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 255 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 255 (else_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 255 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 255 (else_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 255 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 255 (else_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 255 (else_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 255 (else_statement -> ifcontent_statement .)


state 724

    (250) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (255) else_statement -> . ifcontent_statement
    (253) ifcontent_statement -> . basic_statement
    (208) basic_statement -> . if_statement
    (209) basic_statement -> . case_statement
    (210) basic_statement -> . casex_statement
    (211) basic_statement -> . for_statement
    (212) basic_statement -> . while_statement
    (213) basic_statement -> . event_statement
    (214) basic_statement -> . wait_statement
    (215) basic_statement -> . forever_statement
    (216) basic_statement -> . block
    (217) basic_statement -> . namedblock
    (218) basic_statement -> . parallelblock
    (219) basic_statement -> . blocking_substitution
    (220) basic_statement -> . nonblocking_substitution
    (221) basic_statement -> . single_statement
    (248) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (249) if_statement -> . IF LPAREN cond RPAREN true_statement
    (250) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (251) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (266) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (267) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (256) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (264) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (277) event_statement -> . senslist SEMICOLON
    (278) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (281) forever_statement -> . FOREVER basic_statement
    (231) block -> . BEGIN block_statements END
    (232) block -> . BEGIN END
    (236) namedblock -> . BEGIN COLON ID namedblock_statements END
    (237) namedblock -> . BEGIN COLON ID END
    (246) parallelblock -> . FORK block_statements JOIN
    (247) parallelblock -> . FORK JOIN
    (223) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (225) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (382) single_statement -> . DELAY expression SEMICOLON
    (383) single_statement -> . systemcall SEMICOLON
    (384) single_statement -> . disable SEMICOLON
    (226) delays -> . DELAY LPAREN expression RPAREN
    (227) delays -> . DELAY identifier
    (228) delays -> . DELAY intnumber
    (229) delays -> . DELAY floatnumber
    (230) delays -> . empty
    (189) senslist -> . AT LPAREN edgesigs RPAREN
    (196) senslist -> . empty
    (197) senslist -> . AT levelsig
    (198) senslist -> . AT LPAREN levelsigs RPAREN
    (206) senslist -> . AT TIMES
    (207) senslist -> . AT LPAREN TIMES RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (381) disable -> . DISABLE ID
    (385) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 182
    CASE            shift and go to state 184
    CASEX           shift and go to state 185
    FOR             shift and go to state 186
    WHILE           shift and go to state 187
    WAIT            shift and go to state 189
    FOREVER         shift and go to state 190
    BEGIN           shift and go to state 191
    FORK            shift and go to state 192
    DELAY           shift and go to state 193
    AT              shift and go to state 164
    DOLLER          shift and go to state 102
    DISABLE         shift and go to state 197
    LBRACE          reduce using rule 385 (empty -> .)
    ID              reduce using rule 385 (empty -> .)
    SEMICOLON       reduce using rule 385 (empty -> .)

  ! IF              [ reduce using rule 385 (empty -> .) ]

    delays                         shift and go to state 183
    else_statement                 shift and go to state 733
    ifcontent_statement            shift and go to state 723
    basic_statement                shift and go to state 650
    if_statement                   shift and go to state 168
    case_statement                 shift and go to state 169
    casex_statement                shift and go to state 170
    for_statement                  shift and go to state 171
    while_statement                shift and go to state 172
    event_statement                shift and go to state 173
    wait_statement                 shift and go to state 174
    forever_statement              shift and go to state 175
    block                          shift and go to state 176
    namedblock                     shift and go to state 177
    parallelblock                  shift and go to state 178
    blocking_substitution          shift and go to state 179
    nonblocking_substitution       shift and go to state 180
    single_statement               shift and go to state 181
    senslist                       shift and go to state 188
    systemcall                     shift and go to state 194
    disable                        shift and go to state 195
    empty                          shift and go to state 196

state 725

    (271) casecontent_statement -> casecontent_condition COLON basic_statement .

    ENDCASE         reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DEFAULT         reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    MINUS           reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    PLUS            reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LNOT            reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOT             reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    AND             reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NAND            reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOR             reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    OR              reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XOR             reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XNOR            reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LPAREN          reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LBRACE          reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DOLLER          reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    ID              reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    FLOATNUMBER     reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    STRING_LITERAL  reduce using rule 271 (casecontent_statement -> casecontent_condition COLON basic_statement .)


state 726

    (272) casecontent_condition -> casecontent_condition COMMA expression .
    (129) expression -> expression . POWER expression
    (130) expression -> expression . TIMES expression
    (131) expression -> expression . DIVIDE expression
    (132) expression -> expression . MOD expression
    (133) expression -> expression . PLUS expression
    (134) expression -> expression . MINUS expression
    (135) expression -> expression . LSHIFT expression
    (136) expression -> expression . RSHIFT expression
    (137) expression -> expression . LSHIFTA expression
    (138) expression -> expression . RSHIFTA expression
    (139) expression -> expression . LT expression
    (140) expression -> expression . GT expression
    (141) expression -> expression . LE expression
    (142) expression -> expression . GE expression
    (143) expression -> expression . EQ expression
    (144) expression -> expression . NE expression
    (145) expression -> expression . EQL expression
    (146) expression -> expression . NEL expression
    (147) expression -> expression . AND expression
    (148) expression -> expression . XOR expression
    (149) expression -> expression . XNOR expression
    (150) expression -> expression . OR expression
    (151) expression -> expression . LAND expression
    (152) expression -> expression . LOR expression
    (153) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 272 (casecontent_condition -> casecontent_condition COMMA expression .)
    COMMA           reduce using rule 272 (casecontent_condition -> casecontent_condition COMMA expression .)
    POWER           shift and go to state 224
    TIMES           shift and go to state 377
    DIVIDE          shift and go to state 225
    MOD             shift and go to state 226
    PLUS            shift and go to state 227
    MINUS           shift and go to state 228
    LSHIFT          shift and go to state 229
    RSHIFT          shift and go to state 230
    LSHIFTA         shift and go to state 231
    RSHIFTA         shift and go to state 232
    LT              shift and go to state 233
    GT              shift and go to state 234
    LE              shift and go to state 235
    GE              shift and go to state 236
    EQ              shift and go to state 237
    NE              shift and go to state 238
    EQL             shift and go to state 239
    NEL             shift and go to state 240
    AND             shift and go to state 241
    XOR             shift and go to state 242
    XNOR            shift and go to state 243
    OR              shift and go to state 244
    LAND            shift and go to state 245
    LOR             shift and go to state 246
    COND            shift and go to state 247


state 727

    (274) casecontent_statement -> DEFAULT COLON basic_statement .

    ENDCASE         reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DEFAULT         reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    MINUS           reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    PLUS            reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LNOT            reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOT             reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    AND             reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NAND            reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOR             reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    OR              reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XOR             reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XNOR            reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LPAREN          reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LBRACE          reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DOLLER          reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    ID              reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    FLOATNUMBER     reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)
    STRING_LITERAL  reduce using rule 274 (casecontent_statement -> DEFAULT COLON basic_statement .)


state 728

    (256) for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .

    ENDMODULE       reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENERATE        reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTEGER         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REAL            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PARAMETER       reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LOCALPARAM      reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENVAR          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ASSIGN          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INITIAL         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ID              reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SENS_OR         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FUNCTION        reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TASK            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LPAREN          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INPUT           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OUTPUT          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INOUT           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TRI             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REG             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WIRE            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY0         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY1         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDGENERATE     reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    IF              reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOR             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ELSE            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    END             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASE            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASEX           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WHILE           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WAIT            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOREVER         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    BEGIN           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FORK            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DELAY           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AT              reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DOLLER          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DISABLE         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LBRACE          reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SEMICOLON       reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    JOIN            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDFUNCTION     reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDTASK         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDCASE         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DEFAULT         reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    MINUS           reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PLUS            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LNOT            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOT             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AND             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NAND            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOR             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OR              reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XOR             reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XNOR            reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_DEC   reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_BIN   reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_OCT   reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_HEX   reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FLOATNUMBER     reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    STRING_LITERAL  reduce using rule 256 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)


state 729

    (263) forcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 263 (forcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 263 (forcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 263 (forcontent_statement -> basic_statement .)
    REAL            reduce using rule 263 (forcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 263 (forcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 263 (forcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 263 (forcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 263 (forcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 263 (forcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 263 (forcontent_statement -> basic_statement .)
    ID              reduce using rule 263 (forcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 263 (forcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 263 (forcontent_statement -> basic_statement .)
    TASK            reduce using rule 263 (forcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 263 (forcontent_statement -> basic_statement .)
    INPUT           reduce using rule 263 (forcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 263 (forcontent_statement -> basic_statement .)
    INOUT           reduce using rule 263 (forcontent_statement -> basic_statement .)
    TRI             reduce using rule 263 (forcontent_statement -> basic_statement .)
    REG             reduce using rule 263 (forcontent_statement -> basic_statement .)
    WIRE            reduce using rule 263 (forcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 263 (forcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 263 (forcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 263 (forcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 263 (forcontent_statement -> basic_statement .)
    IF              reduce using rule 263 (forcontent_statement -> basic_statement .)
    FOR             reduce using rule 263 (forcontent_statement -> basic_statement .)
    ELSE            reduce using rule 263 (forcontent_statement -> basic_statement .)
    END             reduce using rule 263 (forcontent_statement -> basic_statement .)
    CASE            reduce using rule 263 (forcontent_statement -> basic_statement .)
    CASEX           reduce using rule 263 (forcontent_statement -> basic_statement .)
    WHILE           reduce using rule 263 (forcontent_statement -> basic_statement .)
    WAIT            reduce using rule 263 (forcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 263 (forcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 263 (forcontent_statement -> basic_statement .)
    FORK            reduce using rule 263 (forcontent_statement -> basic_statement .)
    DELAY           reduce using rule 263 (forcontent_statement -> basic_statement .)
    AT              reduce using rule 263 (forcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 263 (forcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 263 (forcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 263 (forcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 263 (forcontent_statement -> basic_statement .)
    JOIN            reduce using rule 263 (forcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 263 (forcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 263 (forcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 263 (forcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 263 (forcontent_statement -> basic_statement .)
    MINUS           reduce using rule 263 (forcontent_statement -> basic_statement .)
    PLUS            reduce using rule 263 (forcontent_statement -> basic_statement .)
    LNOT            reduce using rule 263 (forcontent_statement -> basic_statement .)
    NOT             reduce using rule 263 (forcontent_statement -> basic_statement .)
    AND             reduce using rule 263 (forcontent_statement -> basic_statement .)
    NAND            reduce using rule 263 (forcontent_statement -> basic_statement .)
    NOR             reduce using rule 263 (forcontent_statement -> basic_statement .)
    OR              reduce using rule 263 (forcontent_statement -> basic_statement .)
    XOR             reduce using rule 263 (forcontent_statement -> basic_statement .)
    XNOR            reduce using rule 263 (forcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 263 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 263 (forcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 263 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 263 (forcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 263 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 263 (forcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 263 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 263 (forcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 263 (forcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 263 (forcontent_statement -> basic_statement .)


state 730

    (302) param_arg -> DOT ID LPAREN expression RPAREN .

    RPAREN          reduce using rule 302 (param_arg -> DOT ID LPAREN expression RPAREN .)
    COMMA           reduce using rule 302 (param_arg -> DOT ID LPAREN expression RPAREN .)


state 731

    (326) generate_block -> BEGIN COLON ID generate_items . END
    (320) generate_items -> generate_items . generate_item
    (322) generate_item -> . standard_item
    (323) generate_item -> . generate_if
    (324) generate_item -> . generate_for
    (56) standard_item -> . decl
    (57) standard_item -> . integerdecl
    (58) standard_item -> . realdecl
    (59) standard_item -> . declassign
    (60) standard_item -> . parameterdecl
    (61) standard_item -> . localparamdecl
    (62) standard_item -> . genvardecl
    (63) standard_item -> . assignment
    (64) standard_item -> . always
    (65) standard_item -> . initial
    (66) standard_item -> . instance
    (67) standard_item -> . function
    (68) standard_item -> . task
    (69) standard_item -> . pragma
    (327) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (328) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (333) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (70) decl -> . sigtypes declnamelist SEMICOLON
    (71) decl -> . sigtypes width declnamelist SEMICOLON
    (80) integerdecl -> . INTEGER integernamelist SEMICOLON
    (81) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (85) realdecl -> . REAL realnamelist SEMICOLON
    (76) declassign -> . sigtypes declassign_element SEMICOLON
    (77) declassign -> . sigtypes width declassign_element SEMICOLON
    (89) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (90) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (91) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (92) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (93) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (94) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (314) genvardecl -> . GENVAR genvarlist SEMICOLON
    (98) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (99) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (188) always -> . ALWAYS senslist always_statement
    (275) initial -> . INITIAL initial_statement
    (282) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (283) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (288) instance -> . ID instance_bodylist_noname SEMICOLON
    (289) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (343) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (344) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (362) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (31) sigtypes -> . sigtypes sigtype
    (32) sigtypes -> . sigtype
    (33) sigtype -> . INPUT
    (34) sigtype -> . OUTPUT
    (35) sigtype -> . INOUT
    (36) sigtype -> . TRI
    (37) sigtype -> . REG
    (38) sigtype -> . WIRE
    (39) sigtype -> . SIGNED
    (40) sigtype -> . SUPPLY0
    (41) sigtype -> . SUPPLY1

    END             shift and go to state 734
    IF              shift and go to state 125
    FOR             shift and go to state 126
    INTEGER         shift and go to state 45
    REAL            shift and go to state 47
    PARAMETER       shift and go to state 48
    LOCALPARAM      shift and go to state 49
    GENVAR          shift and go to state 50
    ASSIGN          shift and go to state 51
    ALWAYS          shift and go to state 52
    INITIAL         shift and go to state 53
    ID              shift and go to state 54
    SENS_OR         shift and go to state 55
    FUNCTION        shift and go to state 56
    TASK            shift and go to state 57
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 59
    OUTPUT          shift and go to state 60
    INOUT           shift and go to state 61
    TRI             shift and go to state 62
    REG             shift and go to state 63
    WIRE            shift and go to state 64
    SIGNED          shift and go to state 46
    SUPPLY0         shift and go to state 65
    SUPPLY1         shift and go to state 66

    generate_item                  shift and go to state 269
    standard_item                  shift and go to state 122
    generate_if                    shift and go to state 123
    generate_for                   shift and go to state 124
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    initial                        shift and go to state 38
    instance                       shift and go to state 39
    function                       shift and go to state 40
    task                           shift and go to state 41
    pragma                         shift and go to state 42
    sigtypes                       shift and go to state 44
    sigtype                        shift and go to state 58

state 732

    (224) blocking_substitution_base -> delays lvalue EQUALS delays . rvalue
    (118) rvalue -> . expression
    (119) expression -> . MINUS expression
    (120) expression -> . PLUS expression
    (121) expression -> . LNOT expression
    (122) expression -> . NOT expression
    (123) expression -> . AND expression
    (124) expression -> . NAND expression
    (125) expression -> . NOR expression
    (126) expression -> . OR expression
    (127) expression -> . XOR expression
    (128) expression -> . XNOR expression
    (129) expression -> . expression POWER expression
    (130) expression -> . expression TIMES expression
    (131) expression -> . expression DIVIDE expression
    (132) expression -> . expression MOD expression
    (133) expression -> . expression PLUS expression
    (134) expression -> . expression MINUS expression
    (135) expression -> . expression LSHIFT expression
    (136) expression -> . expression RSHIFT expression
    (137) expression -> . expression LSHIFTA expression
    (138) expression -> . expression RSHIFTA expression
    (139) expression -> . expression LT expression
    (140) expression -> . expression GT expression
    (141) expression -> . expression LE expression
    (142) expression -> . expression GE expression
    (143) expression -> . expression EQ expression
    (144) expression -> . expression NE expression
    (145) expression -> . expression EQL expression
    (146) expression -> . expression NEL expression
    (147) expression -> . expression AND expression
    (148) expression -> . expression XOR expression
    (149) expression -> . expression XNOR expression
    (150) expression -> . expression OR expression
    (151) expression -> . expression LAND expression
    (152) expression -> . expression LOR expression
    (153) expression -> . expression COND expression COLON expression
    (154) expression -> . LPAREN expression RPAREN
    (155) expression -> . concat
    (156) expression -> . repeat
    (157) expression -> . partselect
    (158) expression -> . pointer
    (159) expression -> . functioncall
    (160) expression -> . systemcall
    (161) expression -> . identifier
    (162) expression -> . const_expression
    (163) concat -> . LBRACE concatlist RBRACE
    (166) repeat -> . LBRACE expression concat RBRACE
    (167) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (168) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (169) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (170) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (171) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (172) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (173) pointer -> . identifier LBRACKET expression RBRACKET
    (174) pointer -> . pointer LBRACKET expression RBRACKET
    (358) functioncall -> . identifier LPAREN func_args RPAREN
    (336) systemcall -> . DOLLER ID
    (337) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (338) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (377) identifier -> . ID
    (378) identifier -> . scope ID
    (175) const_expression -> . intnumber
    (176) const_expression -> . floatnumber
    (177) const_expression -> . stringliteral
    (379) scope -> . identifier DOT
    (380) scope -> . pointer DOT
    (179) intnumber -> . INTNUMBER_DEC
    (180) intnumber -> . SIGNED_INTNUMBER_DEC
    (181) intnumber -> . INTNUMBER_BIN
    (182) intnumber -> . SIGNED_INTNUMBER_BIN
    (183) intnumber -> . INTNUMBER_OCT
    (184) intnumber -> . SIGNED_INTNUMBER_OCT
    (185) intnumber -> . INTNUMBER_HEX
    (186) intnumber -> . SIGNED_INTNUMBER_HEX
    (178) floatnumber -> . FLOATNUMBER
    (187) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 83
    PLUS            shift and go to state 84
    LNOT            shift and go to state 85
    NOT             shift and go to state 86
    AND             shift and go to state 87
    NAND            shift and go to state 88
    NOR             shift and go to state 89
    OR              shift and go to state 90
    XOR             shift and go to state 91
    XNOR            shift and go to state 92
    LPAREN          shift and go to state 80
    LBRACE          shift and go to state 101
    DOLLER          shift and go to state 102
    ID              shift and go to state 81
    INTNUMBER_DEC   shift and go to state 107
    SIGNED_INTNUMBER_DEC shift and go to state 108
    INTNUMBER_BIN   shift and go to state 109
    SIGNED_INTNUMBER_BIN shift and go to state 110
    INTNUMBER_OCT   shift and go to state 111
    SIGNED_INTNUMBER_OCT shift and go to state 112
    INTNUMBER_HEX   shift and go to state 113
    SIGNED_INTNUMBER_HEX shift and go to state 114
    FLOATNUMBER     shift and go to state 115
    STRING_LITERAL  shift and go to state 116

    rvalue                         shift and go to state 735
    expression                     shift and go to state 427
    concat                         shift and go to state 93
    repeat                         shift and go to state 94
    partselect                     shift and go to state 95
    pointer                        shift and go to state 96
    functioncall                   shift and go to state 97
    systemcall                     shift and go to state 98
    identifier                     shift and go to state 99
    const_expression               shift and go to state 100
    scope                          shift and go to state 103
    intnumber                      shift and go to state 104
    floatnumber                    shift and go to state 105
    stringliteral                  shift and go to state 106

state 733

    (250) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 250 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 734

    (326) generate_block -> BEGIN COLON ID generate_items END .

    ELSE            reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    ENDGENERATE     reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    IF              reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    FOR             reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    INTEGER         reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    REAL            reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    PARAMETER       reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    LOCALPARAM      reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    GENVAR          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    ASSIGN          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    INITIAL         reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    ID              reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    SENS_OR         reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    FUNCTION        reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    TASK            reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    LPAREN          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    INPUT           reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    OUTPUT          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    INOUT           reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    TRI             reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    REG             reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    WIRE            reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    SIGNED          reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY0         reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY1         reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)
    END             reduce using rule 326 (generate_block -> BEGIN COLON ID generate_items END .)


state 735

    (224) blocking_substitution_base -> delays lvalue EQUALS delays rvalue .

    RPAREN          reduce using rule 224 (blocking_substitution_base -> delays lvalue EQUALS delays rvalue .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GENERATE in state 18 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 18 resolved as shift
WARNING: shift/reduce conflict for REAL in state 18 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 18 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 18 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 18 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 18 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 18 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 18 resolved as shift
WARNING: shift/reduce conflict for TASK in state 18 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 18 resolved as shift
WARNING: shift/reduce conflict for TRI in state 18 resolved as shift
WARNING: shift/reduce conflict for REG in state 18 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 18 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 18 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 43 resolved as shift
WARNING: shift/reduce conflict for REAL in state 43 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 43 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 43 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 43 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 43 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 43 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 43 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 43 resolved as shift
WARNING: shift/reduce conflict for TASK in state 43 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 43 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 43 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 43 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 43 resolved as shift
WARNING: shift/reduce conflict for TRI in state 43 resolved as shift
WARNING: shift/reduce conflict for REG in state 43 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 43 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 43 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 43 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 51 resolved as shift
WARNING: shift/reduce conflict for AT in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 190 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 192 resolved as shift
WARNING: shift/reduce conflict for IF in state 332 resolved as shift
WARNING: shift/reduce conflict for IF in state 337 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 365 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 365 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 365 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 365 resolved as shift
WARNING: shift/reduce conflict for TRI in state 365 resolved as shift
WARNING: shift/reduce conflict for REG in state 365 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 365 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 365 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 365 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 365 resolved as shift
WARNING: shift/reduce conflict for IF in state 470 resolved as shift
WARNING: shift/reduce conflict for IF in state 493 resolved as shift
WARNING: shift/reduce conflict for IF in state 499 resolved as shift
WARNING: shift/reduce conflict for IF in state 559 resolved as shift
WARNING: shift/reduce conflict for IF in state 566 resolved as shift
WARNING: shift/reduce conflict for IF in state 567 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 567 resolved as shift
WARNING: shift/reduce conflict for IF in state 568 resolved as shift
WARNING: shift/reduce conflict for POWER in state 615 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 615 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 615 resolved as shift
WARNING: shift/reduce conflict for MOD in state 615 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 615 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 615 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 615 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 615 resolved as shift
WARNING: shift/reduce conflict for LSHIFTA in state 615 resolved as shift
WARNING: shift/reduce conflict for RSHIFTA in state 615 resolved as shift
WARNING: shift/reduce conflict for LT in state 615 resolved as shift
WARNING: shift/reduce conflict for GT in state 615 resolved as shift
WARNING: shift/reduce conflict for LE in state 615 resolved as shift
WARNING: shift/reduce conflict for GE in state 615 resolved as shift
WARNING: shift/reduce conflict for EQ in state 615 resolved as shift
WARNING: shift/reduce conflict for NE in state 615 resolved as shift
WARNING: shift/reduce conflict for EQL in state 615 resolved as shift
WARNING: shift/reduce conflict for NEL in state 615 resolved as shift
WARNING: shift/reduce conflict for AND in state 615 resolved as shift
WARNING: shift/reduce conflict for XOR in state 615 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 615 resolved as shift
WARNING: shift/reduce conflict for OR in state 615 resolved as shift
WARNING: shift/reduce conflict for LAND in state 615 resolved as shift
WARNING: shift/reduce conflict for LOR in state 615 resolved as shift
WARNING: shift/reduce conflict for COND in state 615 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 626 resolved as shift
WARNING: shift/reduce conflict for IF in state 629 resolved as shift
WARNING: shift/reduce conflict for FOR in state 629 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 629 resolved as shift
WARNING: shift/reduce conflict for REAL in state 629 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 629 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 629 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 629 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 629 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 629 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 629 resolved as shift
WARNING: shift/reduce conflict for ID in state 629 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 629 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 629 resolved as shift
WARNING: shift/reduce conflict for TASK in state 629 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 629 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 629 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 629 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 629 resolved as shift
WARNING: shift/reduce conflict for TRI in state 629 resolved as shift
WARNING: shift/reduce conflict for REG in state 629 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 629 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 629 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 629 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 629 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 648 resolved as shift
WARNING: shift/reduce conflict for IF in state 651 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 673 resolved as shift
WARNING: shift/reduce conflict for IF in state 698 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 699 resolved as shift
WARNING: shift/reduce conflict for IF in state 704 resolved as shift
WARNING: shift/reduce conflict for IF in state 706 resolved as shift
WARNING: shift/reduce conflict for IF in state 708 resolved as shift
WARNING: shift/reduce conflict for IF in state 717 resolved as shift
WARNING: shift/reduce conflict for FOR in state 717 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 717 resolved as shift
WARNING: shift/reduce conflict for REAL in state 717 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 717 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 717 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 717 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 717 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 717 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 717 resolved as shift
WARNING: shift/reduce conflict for ID in state 717 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 717 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 717 resolved as shift
WARNING: shift/reduce conflict for TASK in state 717 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 717 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 717 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 717 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 717 resolved as shift
WARNING: shift/reduce conflict for TRI in state 717 resolved as shift
WARNING: shift/reduce conflict for REG in state 717 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 717 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 717 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 717 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 717 resolved as shift
WARNING: shift/reduce conflict for IF in state 724 resolved as shift
